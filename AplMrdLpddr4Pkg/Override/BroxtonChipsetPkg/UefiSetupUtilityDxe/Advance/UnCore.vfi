// *++
//
// Copyright (c)  1999 - 2016 Intel Corporation. All rights reserved
// This software and associated documentation (if any) is furnished
// under a license and may only be used or copied in accordance
// with the terms of the license. Except as permitted by such
// license, no part of this software or documentation may be
// reproduced, stored in a retrieval system, or transmitted in any
// form or by any means without the express written consent of
// Intel Corporation.
//
//
// Module Name:
//
//   UncoreConfiguration.vfi
//
// Abstract:
//
//   Driver Setup formset.
//


// --*/

form formid = UNCORE_FORM_ID,
  title    = STRING_TOKEN(STR_UNCORE_CONFIGURATION_TITLE);
  
//[-start-170320-IB07400848-modify]//
  subtitle text = STRING_TOKEN(STR_VIDEO_CONFIG_STRING);
  
  grayoutif
    ideqval SystemConfig.UserAccessLevel == 2
    AND
    ideqval SystemConfig.SetUserPass == 1;
    oneof
      varid   = SystemConfig.LogoScuResolution,
      prompt      = STRING_TOKEN(STR_LOGO_SCU_RESOLUTION_STRING),
      help        = STRING_TOKEN(STR_LOGO_SCU_RESOLUTION_HELP),
      option text = STRING_TOKEN(STR_AUTOMATIC),  value = 0x00, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_640X480),    value = 0x01, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_800X600),    value = 0x02, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_1024X768),   value = 0x03, flags = DEFAULT | RESET_REQUIRED;
    endoneof;
  endif;
  
#if FeaturePcdGet(PcdH2ORotateScreenSupported)
  grayoutif
    ideqval SystemConfig.UserAccessLevel == 2
    AND
    ideqval SystemConfig.SetUserPass == 1;
    oneof
      varid   = SystemConfig.RotateScreenConfig,
      prompt      = STRING_TOKEN(STR_ROTATE_SCREEN_PROMPT),
      help        = STRING_TOKEN(STR_ROTATE_SCREEN_HELP),
      option text = STRING_TOKEN(STR_DISABLE),                  value = 0x00, flags = DEFAULT | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ROTATE_SCREEN_090_DEG),    value = 0x01, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ROTATE_SCREEN_270_DEG),    value = 0x02, flags = RESET_REQUIRED;
    endoneof;
  endif;
#endif  

#ifdef VBT_HOOK_SUPPORT
#if defined (APOLLOLAKE_CRB) || defined (USE_CRB_HW_CONFIG)
  goto VBT_HOOK_FORM_ID,
    prompt = STRING_TOKEN(STR_VBT_HOOK_CONFIGURATION),
    help   = STRING_TOKEN(STR_VBT_HOOK_CONFIGURATION);
#endif
#endif

  suppressif ideqvallist SystemConfig.BootType == 0 1;
  
    subtitle text = STRING_TOKEN(STR_BLANK_STRING);
    subtitle text = STRING_TOKEN(STR_GOP_TITLE);

    oneof varid    = SystemConfig.GOPEnable,
      prompt   = STRING_TOKEN(STR_GOP_VBIOS_SWITCH),
      help     = STRING_TOKEN(STR_GOP_VBIOS_SWITCH_HELP),
      option text = STRING_TOKEN(STR_ENABLE), value =1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
    endoneof;

#ifdef PEI_DISPLAY_ENABLE
    oneof   varid   = SystemConfig.PeiGraphicsPeimInit,
      prompt  = STRING_TOKEN(STR_PEI_DISPLAY),
      help    = STRING_TOKEN(STR_PEI_DISPLAY_HELP),
      option text = STRING_TOKEN (STR_ENABLE), value = 1, flags = RESET_REQUIRED;
      option text = STRING_TOKEN (STR_DISABLE), value = 0, flags = DEFAULT | MANUFACTURING |RESET_REQUIRED;
    endoneof;
#endif

    oneof varid  = SystemConfig.GOPBrightnessLevel,
      prompt = STRING_TOKEN(STR_GOP_BRIGHTNESS_LEVEL),
      help   = STRING_TOKEN(STR_GOP_BRIGHTNESS_LEVEL_HELP),
      option text = STRING_TOKEN(STR_GOP_BRIGHT_20), value =2, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_GOP_BRIGHT_40), value =3, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_GOP_BRIGHT_60), value =4, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_GOP_BRIGHT_80), value =5, flags = DEFAULT | MANUFACTURING| RESET_REQUIRED;
      option text = STRING_TOKEN(STR_GOP_BRIGHT_100), value =6, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_GOP_BRIGHT_120), value =7, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_GOP_BRIGHT_140), value =8, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_GOP_BRIGHT_160), value =9, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_GOP_BRIGHT_180), value =10, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_GOP_BRIGHT_200), value =11, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_GOP_BRIGHT_220), value =12, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_GOP_BRIGHT_240), value =13, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_GOP_BRIGHT_255), value =14, flags = RESET_REQUIRED;
    endoneof;

  endif;
//[-end-170320-IB07400848-modify]//

  subtitle text = STRING_TOKEN(STR_NULL_STRING);
  subtitle text = STRING_TOKEN(STR_IGD_TITLE);

  oneof varid  = SystemConfig.Igd,
    prompt   = STRING_TOKEN (STR_IGD_PROMPT),
    help     = STRING_TOKEN (STR_IGD_HELP),
    option text = STRING_TOKEN(STR_DISABLE), value=0, flags=RESET_REQUIRED;
    option text = STRING_TOKEN(STR_ENABLE),  value=1, flags=DEFAULT | MANUFACTURING | RESET_REQUIRED;
  endoneof;

#if FeaturePcdGet(PcdSwitchableGraphicsSupported)
      oneof
        varid       = SystemConfig.EnSGFunction,
        prompt      = STRING_TOKEN(STR_ENABLED_SG_STRING),
        help        = STRING_TOKEN(STR_ENABLED_SG_HELP),
        option text = STRING_TOKEN(STR_DISABLED_TEXT),      value = 0, flags = 0;
        option text = STRING_TOKEN(STR_ENABLED_TEXT),       value = 1, flags = DEFAULT;
     endoneof;
#endif

  oneof varid    = SystemConfig.PrimaryVideoAdaptor,
    prompt   = STRING_TOKEN(STR_PRIMARY_DISPLAY),
    help     = STRING_TOKEN(STR_PRIMARY_DISPLAY_HELP),
//[-start-160705-IB07400752-modify]//
    option text = STRING_TOKEN(STR_AUTOMATIC),    value = 3, flags = DEFAULT | RESET_REQUIRED;
    option text = STRING_TOKEN(STR_IGD_STRING),   value = 0, flags = RESET_REQUIRED;
    option text = STRING_TOKEN(STR_PCI_STRING),   value = 2, flags = RESET_REQUIRED;
#if FeaturePcdGet(PcdSwitchableGraphicsSupported)
    option text = STRING_TOKEN(STR_HG_STRING) ,   value = 4, flags = RESET_REQUIRED;
#endif
//[-end-160705-IB07400752-modify]//
  endoneof;

  suppressif NOT ideqval SystemConfig.PrimaryVideoAdaptor == 4;
    numeric varid = SystemConfig.DelayAfterPwrEn,
      prompt      = STRING_TOKEN (STR_HG_DELAY_AFTR_PWR_EN),
      help        = STRING_TOKEN (STR_HG_DELAY_AFTR_PWR_EN_HELP),
      minimum     = 0,
      maximum     = 1000,
      step        = 0,    // Stepping of 0 equates to a manual entering of a value, otherwise it will auto-increment with a left/right arrow
      default     = 300,
    endnumeric;
  endif;

  suppressif NOT ideqval SystemConfig.PrimaryVideoAdaptor == 4;
    numeric varid = SystemConfig.DelayAfterHoldReset,
      prompt      = STRING_TOKEN (STR_HG_DELAY_AFTR_HLD_RST),
      help        = STRING_TOKEN (STR_HG_DELAY_AFTR_HLD_RST_HELP),
      minimum     = 0,
      maximum     = 1000,
      step        = 0,    // Stepping of 0 equates to a manual entering of a value, otherwise it will auto-increment with a left/right arrow
      default     = 100,
    endnumeric;
  endif;

//[-start-160506-IB03090427-modify]//
  oneof varid = SystemConfig.EnableRenderStandby,
   prompt   = STRING_TOKEN(STR_VIDEO_RS2_PROMPT),
   help     = STRING_TOKEN(STR_VIDEO_RS2_HELP),
   option text = STRING_TOKEN(STR_ENABLE), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
   option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
  endoneof;
//[-end-160506-IB03090427-modify]//

  oneof varid    = SystemConfig.GTTSize,
    prompt   = STRING_TOKEN(STR_GTT_SIZE),
    help     = STRING_TOKEN(STR_GTT_SIZE_HELP),
    option text = STRING_TOKEN(GTT_SIZE_2MB), value = 1, flags =  RESET_REQUIRED;
    option text = STRING_TOKEN(GTT_SIZE_4MB), value = 2, flags =  RESET_REQUIRED;
    option text = STRING_TOKEN(GTT_SIZE_8MB), value = 3, flags =  DEFAULT | MANUFACTURING | RESET_REQUIRED;
  endoneof;

  oneof varid    = SystemConfig.IgdApertureSize,
    prompt   = STRING_TOKEN(STR_APERTURE_SIZE),
    help     = STRING_TOKEN(STR_APERTURE_SIZE_HELP),
    option text = STRING_TOKEN(APERTURE_SIZE_128MB), value = 0, flags =  RESET_REQUIRED;
    option text = STRING_TOKEN(APERTURE_SIZE_256MB), value = 1, flags =  DEFAULT | MANUFACTURING | RESET_REQUIRED;
    option text = STRING_TOKEN(APERTURE_SIZE_512MB), value = 3, flags =  RESET_REQUIRED;
  endoneof;

  oneof varid   = SystemConfig.IgdDvmt50PreAlloc,
    prompt  = STRING_TOKEN(STR_DVMT50_PRE_ALLOC),
    help    = STRING_TOKEN(STR_DVMT50_PRE_ALLOC_HELP),
//    option text = STRING_TOKEN(STR_DVMT50_PRE_ALLOC_32M), value = 1, flags = RESET_REQUIRED;
    option text = STRING_TOKEN(STR_DVMT50_PRE_ALLOC_64M), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    option text = STRING_TOKEN(STR_DVMT50_PRE_ALLOC_96M), value = 3, flags = RESET_REQUIRED;
    option text = STRING_TOKEN(STR_DVMT50_PRE_ALLOC_128M), value = 4, flags = RESET_REQUIRED;
    option text = STRING_TOKEN(STR_DVMT50_PRE_ALLOC_160M), value = 5, flags = RESET_REQUIRED;
    option text = STRING_TOKEN(STR_DVMT50_PRE_ALLOC_192M), value = 6, flags = RESET_REQUIRED;
    option text = STRING_TOKEN(STR_DVMT50_PRE_ALLOC_224M), value = 7, flags = RESET_REQUIRED;
    option text = STRING_TOKEN(STR_DVMT50_PRE_ALLOC_256M), value = 8, flags = RESET_REQUIRED;
    option text = STRING_TOKEN(STR_DVMT50_PRE_ALLOC_288M), value = 9, flags = RESET_REQUIRED;
    option text = STRING_TOKEN(STR_DVMT50_PRE_ALLOC_320M), value = 10, flags = RESET_REQUIRED;
    option text = STRING_TOKEN(STR_DVMT50_PRE_ALLOC_352M), value = 11, flags = RESET_REQUIRED;
    option text = STRING_TOKEN(STR_DVMT50_PRE_ALLOC_384M), value = 12, flags = RESET_REQUIRED;
    option text = STRING_TOKEN(STR_DVMT50_PRE_ALLOC_416M), value = 13, flags = RESET_REQUIRED;
    option text = STRING_TOKEN(STR_DVMT50_PRE_ALLOC_448M), value = 14, flags = RESET_REQUIRED;
    option text = STRING_TOKEN(STR_DVMT50_PRE_ALLOC_480M), value = 15, flags = RESET_REQUIRED;
    option text = STRING_TOKEN(STR_DVMT50_PRE_ALLOC_512M), value = 16, flags = RESET_REQUIRED;
  endoneof;

  oneof   varid   = SystemConfig.IgdDvmt50TotalAlloc,
    prompt  = STRING_TOKEN(STR_DVMT50_DVMT ),
    help    = STRING_TOKEN(STR_DVMT50_DVMT_HELP),
    option text = STRING_TOKEN(STR_DVMT50_ALLOC_128), value = 1, flags = RESET_REQUIRED;
    option text = STRING_TOKEN(STR_DVMT50_ALLOC_256), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    option text = STRING_TOKEN(STR_DVMT50_ALLOC_MAX), value = 3, flags = RESET_REQUIRED;
  endoneof;

  oneof   varid   = SystemConfig.CdClock,
    prompt  = STRING_TOKEN(STR_CD_CLOCK),
    help    = STRING_TOKEN(STR_CD_CLOCK_HELP),
    option text = STRING_TOKEN(STR_CD_CLOCK_144), value= 0, flags= RESET_REQUIRED;
    option text = STRING_TOKEN(STR_CD_CLOCK_288), value= 1, flags= RESET_REQUIRED;
    option text = STRING_TOKEN(STR_CD_CLOCK_384), value= 2, flags= RESET_REQUIRED;
    option text = STRING_TOKEN(STR_CD_CLOCK_576), value= 3, flags= RESET_REQUIRED;
    option text = STRING_TOKEN(STR_CD_CLOCK_624), value= 4, flags= DEFAULT | MANUFACTURING | RESET_REQUIRED;
  endoneof;

  //
  //Gt Config
  //
  oneof   varid = SystemConfig.PmSupport,
    prompt      = STRING_TOKEN(STR_PM_SUPPORT),
    help        = STRING_TOKEN(STR_PM_SUPPORT_HELP),
//[-start-160413-IB03090426-modify]//
    option text = STRING_TOKEN(STR_ENABLE), value=1, flags= DEFAULT | MANUFACTURING | RESET_REQUIRED;
    option text = STRING_TOKEN(STR_DISABLE), value=0, flags= RESET_REQUIRED;
//[-end-160413-IB03090426-modify]//
  endoneof;

  suppressif ideqval SystemConfig.PmSupport == 0;

  endif;

  //
  //Gt Config - PAVP
  //
  oneof   varid   = SystemConfig.PavpEnable,
    prompt        = STRING_TOKEN(STR_PAVP_ENABLE),
    help          = STRING_TOKEN(STR_PAVP_ENABLE_HELP),
    option text   = STRING_TOKEN(STR_ENABLE), value=1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    option text   = STRING_TOKEN(STR_DISABLE), value=0, flags = RESET_REQUIRED;
  endoneof;

  suppressif ideqval SystemConfig.PavpEnable == 0;
  endif;


//[-start-160216-IB03090424-remove]//
//  //
//  //Spread Spectrum clock
//  //
//  oneof varid  = SystemConfig.SpreadSpectrum,
//    prompt   = STRING_TOKEN (STR_SPREAD_SPECTRUM_CLOCK_PROMPT),
//    help     = STRING_TOKEN (STR_SPREAD_SPECTRUM_CLOCK_HELP),
//    option text = STRING_TOKEN(STR_DISABLE), value=0, flags=DEFAULT | MANUFACTURING | RESET_REQUIRED;
//    option text = STRING_TOKEN(STR_ENABLE),  value=1, flags=0 | RESET_REQUIRED;
//  endoneof;
//[-end-160216-IB03090424-remove]//


  subtitle text = STRING_TOKEN(STR_NULL_STRING);

  subtitle text = STRING_TOKEN(STR_IGD_LCD_CONTROL);

//[-start-151231-IB03090424-remove]//
//  oneof varid    = SystemConfig.LidStatus,
//    prompt   = STRING_TOKEN(STR_FORCE_LID_STATUS_PROMPT),
//    help     = STRING_TOKEN(STR_FORCE_LID_STATUS_HELP),
//    option text = STRING_TOKEN(STR_LID_STATUS__OFF_PROMPT), value = 0, flags = 0 | RESET_REQUIRED;
//    option text = STRING_TOKEN(STR_LID_STATUS__ON_PROMPT), value = 1, flags = MANUFACTURING| DEFAULT| RESET_REQUIRED;
//  endoneof;
//[-end-151231-IB03090424-remove]//

  oneof varid    = SystemConfig.IgdLcdIBia,
    prompt   = STRING_TOKEN(STR_VIDEO_LCD_IBIA),
    help     = STRING_TOKEN(STR_VIDEO_LCD_IBIAHLP),
    option text = STRING_TOKEN(STR_VIDEO_LCD_IBIAA), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    option text = STRING_TOKEN(STR_VIDEO_LCD_IBIAD), value = 1, flags = 0| RESET_REQUIRED;
    option text = STRING_TOKEN(STR_VIDEO_LCD_IBIAL1), value = 2, flags = 0| RESET_REQUIRED;
    option text = STRING_TOKEN(STR_VIDEO_LCD_IBIAL2), value = 3, flags = 0| RESET_REQUIRED;
    option text = STRING_TOKEN(STR_VIDEO_LCD_IBIAL3), value = 4, flags = 0| RESET_REQUIRED;
    option text = STRING_TOKEN(STR_VIDEO_LCD_IBIAL4), value = 5, flags = 0| RESET_REQUIRED;
    option text = STRING_TOKEN(STR_VIDEO_LCD_IBIAL5), value = 6, flags = 0| RESET_REQUIRED;
  endoneof;

//[-start-151231-IB03090424-modify]//
  oneof varid  = SystemConfig.AlsEnable,
    prompt   = STRING_TOKEN (STR_ACPI_ALS_ENABLE),
    help     = STRING_TOKEN (STR_ACPI_ALS_ENABLE_HELP),
    option text = STRING_TOKEN(STR_DISABLE), value=0, flags= 0 | RESET_REQUIRED;
    option text = STRING_TOKEN(STR_ENABLE),  value=1, flags= DEFAULT | MANUFACTURING | RESET_REQUIRED;
  endoneof;
//[-end-151231-IB03090424-modify]//


  oneof   varid   = SystemConfig.IgdFlatPanel,
    prompt      = STRING_TOKEN(STR_IGD_FLAT_PANEL_PROMPT),
    help        = STRING_TOKEN(STR_NULL_STRING),
    option text = STRING_TOKEN(STR_AUTOMATIC), value=0x00, flags=DEFAULT | RESET_REQUIRED;
    option text = STRING_TOKEN(STR_640X480), value=0x01, flags=RESET_REQUIRED;
    option text = STRING_TOKEN(STR_800X600), value=0x02, flags=RESET_REQUIRED;
    option text = STRING_TOKEN(STR_1024X768), value=0x03, flags=RESET_REQUIRED;
    option text = STRING_TOKEN(STR_1280X1024), value=0x04, flags=RESET_REQUIRED;
    option text = STRING_TOKEN(STR_1366X768), value=0x05, flags=RESET_REQUIRED;
    option text = STRING_TOKEN(STR_1680X1050), value=0x06, flags=RESET_REQUIRED;
    option text = STRING_TOKEN(STR_1920X1200), value=0x07, flags=RESET_REQUIRED;
    option text = STRING_TOKEN(STR_1280X800), value=0x08, flags=RESET_REQUIRED;
  endoneof;

  oneof   varid   = SystemConfig.BootDisplayDevice,
    prompt      = STRING_TOKEN(STR_BOOT_DISPLAY_DEVICE_PROMPT),
    help        = STRING_TOKEN(STR_BOOT_DISPLAY_DEVICE_HELP),
#if (TABLET_PF_ENABLE == 1)
    option text = STRING_TOKEN(STR_AUTOMATIC), value=0x00, flags=DEFAULT | RESET_REQUIRED;
    option text = STRING_TOKEN(STR_HDMIPORTB), value=0x02, flags=RESET_REQUIRED;
    option text = STRING_TOKEN(STR_EDPPORTC), value=0x05, flags=RESET_REQUIRED;
#else
    option text = STRING_TOKEN(STR_AUTOMATIC), value=0x00, flags=DEFAULT | RESET_REQUIRED;
    option text = STRING_TOKEN(STR_VGAPORT), value=0x01, flags=RESET_REQUIRED;
    option text = STRING_TOKEN(STR_HDMIPORTB), value=0x02, flags=RESET_REQUIRED;
    option text = STRING_TOKEN(STR_DPPORTB), value=0x03, flags=RESET_REQUIRED;
    option text = STRING_TOKEN(STR_DPPORTC), value=0x04, flags=RESET_REQUIRED;
    option text = STRING_TOKEN(STR_EDPPORTC), value=0x05, flags=RESET_REQUIRED;
    option text = STRING_TOKEN(STR_DSIPORTA), value=0x06, flags=RESET_REQUIRED;
    option text = STRING_TOKEN(STR_DSIPORTC), value=0x07, flags=RESET_REQUIRED;
#endif

  endoneof;

  //
  //Panel Scaling
  //
  oneof   varid   = SystemConfig.PanelScaling,
    prompt      = STRING_TOKEN(STR_PANEL_SCALING_PROMPT),
    help        = STRING_TOKEN(STR_PANEL_SCALING_HELP),
    option text = STRING_TOKEN(STR_AUTOMATIC), value=0x00, flags=DEFAULT | RESET_REQUIRED;
    option text = STRING_TOKEN(STR_PANEL_SCALING_STRETCH), value=0x01, flags=RESET_REQUIRED;
    option text = STRING_TOKEN(STR_PANEL_SCALING_CENTER), value=0x02, flags=RESET_REQUIRED;
  endoneof;

  //
  //GMCH BLC Control
  //
  oneof   varid   = SystemConfig.IgdLcdIGmchBlc,
    prompt      = STRING_TOKEN(STR_VIDEO_LCD_IGMCHBLC_PROMPT),
    help        = STRING_TOKEN(STR_VIDEO_LCD_IGMCHBLC_HELP),
    option text = STRING_TOKEN(STR_VIDEO_LCD_IGMCHBLC1), value=0x00, flags=DEFAULT | RESET_REQUIRED;
    option text = STRING_TOKEN(STR_VIDEO_LCD_IGMCHBLC2), value=0x01, flags=RESET_REQUIRED;
    option text = STRING_TOKEN(STR_VIDEO_LCD_IGMCHBLC3), value=0x02, flags=RESET_REQUIRED;
    option text = STRING_TOKEN(STR_VIDEO_LCD_IGMCHBLC4), value=0x03, flags=RESET_REQUIRED;
  endoneof;

  subtitle text = STRING_TOKEN(STR_NULL_STRING);

//[-start-170203-IB07400838-remove]//
//  //
//  //Memory Configuration
//  //
//  subtitle text = STRING_TOKEN(STR_MEMORY_CONFIGURATION_TITLE);
//
//  oneof varid  = SystemConfig.ScramblerSupport,
//    prompt   = STRING_TOKEN (STR_MEMORY_SCRAMBLER_PROMPT),
//    help     = STRING_TOKEN (STR_MEMORY_SCRAMBLER_HELP),
//    option text = STRING_TOKEN (STR_ENABLE),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
//    option text = STRING_TOKEN (STR_DISABLE), value = 0, flags = RESET_REQUIRED;
//  endoneof;
//
//  subtitle text = STRING_TOKEN(STR_NULL_STRING);
//[-end-170203-IB07400838-remove]//
//[-start-160216-IB03090424-modify]//
  //
  //IPU Configuration
  //
  subtitle text = STRING_TOKEN(STR_IPU_CONFIGURATION_TITLE);

  oneof varid   = SystemConfig.IpuEn,
    questionid  = 0x1002,
    prompt      = STRING_TOKEN(STR_IPU_ENABLED),
    help        = STRING_TOKEN(STR_IPU_ENABLED_HELP),
    flags       = INTERACTIVE,
//[-start-160510-IB07400726-modify]//
    option text = STRING_TOKEN(STR_DISABLE),  value = 0, flags = DEFAULT | RESET_REQUIRED;
    option text = STRING_TOKEN(STR_ENABLE),   value = 1, flags = RESET_REQUIRED;
//[-end-160510-IB07400726-modify]//
  endoneof;

  suppressif ideqval SystemConfig.IpuEn == 0;
    oneof varid   = SystemConfig.IpuAcpiMode,
      prompt      = STRING_TOKEN (STR_IPU_ACPI_PROMPT),
      help        = STRING_TOKEN (STR_IPU_ACPI_HELP),
//[-start-171031-IB07400922-modify]//
//#if BXTI_PF_ENABLE
      option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_IPU_ACPI_IGFX),  value = 1, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_IPU_ACPI_NOIGFX),  value = 2, flags = RESET_REQUIRED;
//#else
//      option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
//      option text = STRING_TOKEN(STR_IPU_ACPI_IGFX),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
//      option text = STRING_TOKEN(STR_IPU_ACPI_NOIGFX),  value = 2, flags = RESET_REQUIRED;
//#endif
//[-end-171031-IB07400922-modify]//
    endoneof;

//[-start-160317-IB03090425-add]//
    oneof varid = SystemConfig.WorldCameraSel,
      prompt      = STRING_TOKEN(STR_WORLDCAMERA_SELECTION_PROMPT),
      help        = STRING_TOKEN(STR_WORLDCAMERA_SELECTION_HELP),
//[-start-171031-IB07400922-modify]//
//#if BXTI_PF_ENABLE
      option text = STRING_TOKEN(STR_DISABLE),          value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_IMX214),           value = 1, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_IMX135_OV13858),   value = 2, flags = RESET_REQUIRED;
#ifdef BUILD_IOTG_CRB      
      option text = STRING_TOKEN(STR_MT9V024),          value = 3, flags = RESET_REQUIRED;
#endif
//#else
//      option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
//      option text = STRING_TOKEN(STR_IMX214), value = 1, flags = RESET_REQUIRED;
//      option text = STRING_TOKEN(STR_IMX135), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
//#endif
//[-end-171031-IB07400922-modify]//
//[-end-160317-IB03090425-add]//
    endoneof;
//[-start-171031-IB07400922-add]//
    oneof varid = SystemConfig.UserCameraSel,
      prompt      = STRING_TOKEN(STR_USERCAMERA_SELECTION_PROMPT),
      help        = STRING_TOKEN(STR_USERCAMERA_SELECTION_HELP),
//#if BXTI_PF_ENABLE
      option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_OV2740), value = 1, flags = RESET_REQUIRED;
//#else
//      option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
//      option text = STRING_TOKEN(STR_OV2740), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
//#endif
    endoneof;
//[-end-171031-IB07400922-add]//

//[-start-160718-IB06720413-add]//
    // Rotation
    oneof varid   = SystemConfig.CameraRotationAngle,
      prompt      = STRING_TOKEN(STR_CAM_DEGREE),
      help        = STRING_TOKEN(STR_CAM_DEGREE_HELP),
      option text = STRING_TOKEN(STR_CAM_DEGREE_0), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      //option text = STRING_TOKEN(STR_CAM_DEGREE_45), value = 1, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_CAM_DEGREE_90), value = 2, flags = RESET_REQUIRED;
      //option text = STRING_TOKEN(STR_CAM_DEGREE_135), value = 3, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_CAM_DEGREE_180), value = 4, flags = RESET_REQUIRED;
      //option text = STRING_TOKEN(STR_CAM_DEGREE_225), value = 5, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_CAM_DEGREE_270), value = 6, flags = RESET_REQUIRED;
      //option text = STRING_TOKEN(STR_CAM_DEGREE_315), value = 7, flags = RESET_REQUIRED;
    endoneof;
//[-end-160718-IB06720413-add]//

  endif;
//[-end-160216-IB03090424-modify]//


endform;

//[-start-160913-IB07400784-add]//
#ifdef VBT_HOOK_SUPPORT
#if defined (APOLLOLAKE_CRB) || defined (USE_CRB_HW_CONFIG)
  #include "VbtHook.vfi"
#endif
#endif
//[-end-160913-IB07400784-add]//
