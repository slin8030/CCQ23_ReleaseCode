// *++
//
// Copyright (c)  1999 - 2016 Intel Corporation. All rights reserved
// This software and associated documentation (if any) is furnished
// under a license and may only be used or copied in accordance
// with the terms of the license. Except as permitted by such
// license, no part of this software or documentation may be
// reproduced, stored in a retrieval system, or transmitted in any
// form or by any means without the express written consent of
// Intel Corporation.
//
//
// Module Name:
//
//   SourthClusterConfig.vfi
//
// Abstract:
//
//   South Cluster SystemConfig formset.
//
//Revision History:
//  ------------------------------------------------------------------------------
//  Rev   Date<MM/DD/YYYY>    Name    Description
//  ------------------------------------------------------------------------------

// --*/

//
// South Cluster Configuration Form
//

//[-start-160216-IB03090424-modify]//
form formid = SOUTH_CLUSTER_FORM_ID,
  title    = STRING_TOKEN(STR_SOUTH_CLUSTER_TITLE);

  subtitle text = STRING_TOKEN(STR_NULL_STRING);

  //
  // Jump to HD-Audio Configuration Form
  //
  goto HDAUDIO_OPTIONS_FORM_ID,
    prompt = STRING_TOKEN(STR_HDAUDIO_OPTIONS_FORM_TITLE),
    help   = STRING_TOKEN(STR_HDAUDIO_OPTIONS_FORM_HELP);

  //
  // Jump to GMM Configuration Form
  //
  goto GMM_OPTIONS_FORM_ID,
    prompt = STRING_TOKEN(STR_GMM_OPTIONS_FORM_TITLE),
    help   = STRING_TOKEN(STR_GMM_OPTIONS_FORM_HELP);

  //
  // Jump to ISH Configuration Form
  //
  goto ISH_OPTIONS_FORM_ID,
    prompt = STRING_TOKEN(STR_ISH_OPTIONS_FORM_TITLE),
    help   = STRING_TOKEN(STR_ISH_OPTIONS_FORM_HELP);

  //
  // Jump to LPSS Configuration Form
  //
  goto LPSS_OPTIONS_FORM_ID,
    prompt = STRING_TOKEN(STR_LPSS_FORM_TITLE),
    help   = STRING_TOKEN(STR_LPSS_FORM_HELP);

  //
  // Jump to PCIe Configuration Form
  //
  goto PCIE_DEVICE_OPTIONS_FORM_ID,
    prompt = STRING_TOKEN(STR_PCIE_OPTIONS_FORM_TITLE),
    help = STRING_TOKEN(STR_PCIE_OPTIONS_FORM_HELP);

  //
  // Jump to SATA Configuration Form
  //
  goto SATA_CONFIGURATION_ID,
    prompt = STRING_TOKEN(STR_SATA_FORM_TITLE),
    help   = STRING_TOKEN(STR_SATA_FORM_HELP);
  //
  // Jump to SCC Configuration Form
  //
  goto SCC_OPTIONS_FORM_ID,
    prompt = STRING_TOKEN(STR_SCC_OPTIONS_FORM_TITLE),
    help   = STRING_TOKEN(STR_SCC_OPTIONS_FORM_HELP);

  //
  // Jump to USB Configuration Form
  //
  goto USB_OPTIONS_FORM_ID,
    prompt = STRING_TOKEN(STR_USB_OPTIONS_FORM_TITLE),
    help = STRING_TOKEN(STR_USB_OPTIONS_FORM_HELP);

  //
  // Jump to Misc Configuration Form
  //
  goto MISC_OPTIONS_FORM_ID,
    prompt = STRING_TOKEN(STR_MISC_OPTION_FORM_TITLE),
    help   = STRING_TOKEN(STR_MISC_OPTION_FORM_HELP);

#ifdef PSS_SUPPORT    
  //
  // Jump to PSS Chip Form
  //
  goto PSS_CHIP_OPTION_FORM_ID,
    prompt = STRING_TOKEN(STR_PSS_CHIP_OPTIONS_FORM_TITLE),
    help   = STRING_TOKEN(STR_PSS_CHIP_OPTIONS_FORM_TITLE_HELP);
#endif
endform;

//
// Misc Configurations
//
form formid     = MISC_OPTIONS_FORM_ID,
  title         = STRING_TOKEN(STR_MISC_OPTION_FORM_TITLE);
  subtitle text = STRING_TOKEN(STR_MISC_OPTION_FORM_TITLE);

  oneof varid   = SystemConfig.Hpet,
    prompt      = STRING_TOKEN(STR_HPET_PROMPT),
    help        = STRING_TOKEN(STR_HPET_HELP),
    option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
    option text = STRING_TOKEN(STR_ENABLE), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
  endoneof;

  oneof varid   = SystemConfig.Cg8254,
    prompt      = STRING_TOKEN(STR_8254CG_PROMPT),
    help        = STRING_TOKEN(STR_8254CG_HELP),
//[-start-160330-IB07400715-modify]//
//[-start-160630-IB07400750-modify]//
//[-start-161008-IB07400794-modify]//
    //
    // For Legacy/Linux support, default set to disable, even if Intel BIOS default is enabled
    //
//#if !BXTI_PF_ENABLE
//#ifdef BUILD_CCG_CRB
//    option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
//    option text = STRING_TOKEN(STR_ENABLE), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
//#else
    option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    option text = STRING_TOKEN(STR_ENABLE), value = 1, flags = RESET_REQUIRED;
//#endif
//[-end-161008-IB07400794-modify]//
//[-end-160630-IB07400750-modify]//
//[-end-160330-IB07400715-modify]//
  endoneof;
  
  oneof varid   = SystemConfig.StateAfterG3,
    prompt      = STRING_TOKEN(STR_STATE_AFTER_G3),
    help        = STRING_TOKEN(STR_STATE_AFTER_G3_HELP),
    option text = STRING_TOKEN(STR_S0_AFTER_G3_STRING), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    option text = STRING_TOKEN(STR_S5_AFTER_G3_STRING), value = 1, flags = RESET_REQUIRED;
//[-start-170314-IB07400847-add]//
    option text = STRING_TOKEN(STR_LAST_AFTER_G3_STRING), value = 2, flags = RESET_REQUIRED;
//[-end-170314-IB07400847-add]//
  endoneof;

//[-start-160506-IB03090427-add]//
  oneof varid   = SystemConfig.PowerButterDebounceMode,
    prompt      = STRING_TOKEN(STR_POWER_BUTTON_DEBOUNCE_MODE),
    help        = STRING_TOKEN(STR_POWER_BUTTON_DEBOUNCE_MODE_HELP),
    option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
    option text = STRING_TOKEN(STR_ENABLE), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
  endoneof;
//[-end-160506-IB03090427-add]//

//[-start-170321-IB07400848-remove]//
//  oneof varid  = SystemConfig.EnableClockSpreadSpec,
//     prompt   = STRING_TOKEN(STR_CLOCK_SPREAD_SPEC_ENABLE),
//     help     = STRING_TOKEN(STR_CLOCK_SPREAD_SPEC_ENABLE_HELP),
//     option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
//     option text = STRING_TOKEN(STR_ENABLE), value = 1, flags = RESET_REQUIRED;
//  endoneof;
//
//  oneof varid   = SystemConfig.UartInterface,
//    prompt      = STRING_TOKEN(STR_PCH_UART_SELECT),
//    help        = STRING_TOKEN(STR_PCH_UART_SELECT_HELP),
//    option text = STRING_TOKEN(STR_UART_SELECT_PCU), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
//    option text = STRING_TOKEN(STR_UART_SELECT_SIO), value = 1, flags = RESET_REQUIRED;
//  endoneof;
//[-end-170321-IB07400848-remove]//
  
//[-start-160413-IB03090426-add]//
//[-start-161102-IB07400807-remove]//
//   oneof varid   = SystemConfig.Wol,
//    prompt      = STRING_TOKEN(STR_WAKE_ON_LAN_PROMPT),
//    help        = STRING_TOKEN(STR_WAKE_ON_LAN_HELP),
//    option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
//    option text = STRING_TOKEN(STR_ENABLE), value = 1, flags = RESET_REQUIRED;
//  endoneof;
//[-end-161102-IB07400807-remove]//
//[-end-160413-IB03090426-add]//
  oneof varid  = SystemConfig.ScBiosLock,
    prompt   = STRING_TOKEN(STR_PCH_BLE_PROMPT),
    help     = STRING_TOKEN(STR_PCH_BLE_HELP),
//[-start-160411-IB07400715-modify]//
    option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
//[-end-160411-IB07400715-modify]//
  endoneof;
//[-start-160413-IB03090426-add]//
  oneof varid  = SystemConfig.RtcLock,
    prompt   = STRING_TOKEN(STR_PCH_RTC_LOCK_PROMPT),
    help     = STRING_TOKEN(STR_PCH_RTC_LOCK_HELP),
    option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
    option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
  endoneof;
//[-end-160413-IB03090426-add]//
  oneof varid   = SystemConfig.FprrEnable,
    prompt      = STRING_TOKEN(STR_FPRR_ENABLE),
    help        = STRING_TOKEN(STR_FPRR_ENABLE_HELP),
//[-start-160411-IB07400715-modify]//
    option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
//[-end-160411-IB07400715-modify]//
  endoneof;

//[-start-160719-IB03090429-add]//
  oneof varid   = SystemConfig.TcoLock,
    prompt      = STRING_TOKEN(STR_TCO_LOCK_PROMPT),
    help        = STRING_TOKEN(STR_TCO_LOCK_HELP),
//[-start-160803-IB07400768-modify]//
//[-start-160914-IB07400784-modify]//
//#if BXTI_PF_ENABLE
#ifdef BUILD_IOTG_CRB
    option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
#else
    option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
    option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
#endif
//[-end-160914-IB07400784-modify]//
//[-end-160803-IB07400768-modify]//
  endoneof;
//[-end-160719-IB03090429-add]//

//[-start-160413-IB03090426-add]//
  oneof varid = SystemConfig.DciEn,
    prompt   = STRING_TOKEN(STR_DCI_HDCIEN_PROMPT),
    help     = STRING_TOKEN(STR_DCI_HDCIEN_HELP),
    option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
  endoneof;

  suppressif ideqval SystemConfig.DciEn == 1;
  oneof varid = SystemConfig.DciAutoDetect,
    prompt   = STRING_TOKEN(STR_DCI_AUTO_PROMPT),
    help     = STRING_TOKEN(STR_DCI_AUTO_HELP),
    option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
    option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
  endoneof;
  endif;
//[-end-160413-IB03090426-add]//

//[-start-160513-IB03090427-add]//
//[-start-170322-IB07400848-modify]//
  //
  // Only used on Apollo Lake RVP
  //
  suppressif ideqval SystemConfig.IsIOTGBoardIds == 1;
    oneof varid = SystemConfig.GpioLock,
      prompt   = STRING_TOKEN(STR_GPIOLOCK_PROMPT),
      help     = STRING_TOKEN(STR_GPIOLOCK_HELP),
      option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
    endoneof;
  endif;  
//[-end-170322-IB07400848-modify]//
//[-end-160513-IB03090427-add]//
//[-start-160725-IB07400761-add]//
//[-start-170222-IB07400843-modify]//
  oneof 
    varid       = SystemConfig.LpcClockRun,
    prompt      = STRING_TOKEN(STR_LPC_CLOCK_RUN_ENABLE_PROMPT),
    help        = STRING_TOKEN(STR_LPC_CLOCK_RUN_ENABLE_HELP),
    option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
    option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
  endoneof;
//[-end-170222-IB07400843-modify]//
//[-end-160725-IB07400761-add]//
//[-start-170222-IB07400843-add]//
  oneof
    varid       = SystemConfig.SirqEnabled,
    prompt      = STRING_TOKEN(STR_SERIAL_IRQ_STRING),
    help        = STRING_TOKEN(STR_SERIAL_IRQ_HELP),
    option text = STRING_TOKEN(STR_DISABLE_TEXT), value = 0, flags = RESET_REQUIRED;
    option text = STRING_TOKEN(STR_ENABLED_TEXT), value = 1, flags = DEFAULT | RESET_REQUIRED;
  endoneof;
  oneof
    varid       = SystemConfig.SirqMode,
    prompt      = STRING_TOKEN(STR_SERIAL_IRQ_MODE_STRING),
    help        = STRING_TOKEN(STR_SERIAL_IRQ_MODE_HELP),
    option text = STRING_TOKEN(STR_SERIAL_IRQ_QUIET_MODE),       value = 0, flags = DEFAULT | RESET_REQUIRED;
    option text = STRING_TOKEN(STR_SERIAL_IRQ_CONTINUOUS_MODE),  value = 1, flags = RESET_REQUIRED;
  endoneof;
//[-end-170222-IB07400843-add]//
  subtitle text = STRING_TOKEN(STR_NULL_STRING);
  subtitle text = STRING_TOKEN(STR_LPSS_DEVICE_SETTING_SUBTITLE);

//[-start-160429-IB07400722-add]//
  oneof varid   = SystemConfig.HideUnusedLpssDevices,
    prompt      = STRING_TOKEN(STR_HIDE_UNUSED_DEVICES_PROMPT),
    help        = STRING_TOKEN(STR_HIDE_UNUSED_DEVICES_HELP),
    option text = STRING_TOKEN(STR_DISABLED), value = 1, flags = RESET_REQUIRED;
    option text = STRING_TOKEN(STR_ENABLED),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
  endoneof;
//[-end-160429-IB07400722-add]//

  oneof varid  = SystemConfig.SelectBtDevice,
    prompt   = STRING_TOKEN(STR_PCH_SERIAL_IO_BLUETOOTH_DEVICE),
    help     = STRING_TOKEN(STR_PCH_SERIAL_IO_BLUETOOTH_HELP),
//[-start-160421-IB03090426-modify]//
      option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_BT_BCM2E40), value = 1, flags = RESET_REQUIRED;
//      option text = STRING_TOKEN(STR_BT_BCM2EA1), value = 2, flags = RESET_REQUIRED;
//[-end-160421-IB03090426-modify]//
  endoneof;

  oneof varid   = SystemConfig.I2s343A,
    prompt      = STRING_TOKEN(STR_I2C_DEVICE_CODEC_INT343A_PROMPT),
    help        = STRING_TOKEN(STR_I2C_DEVICE_CODEC_INT343A_HELP),
//[-start-160429-IB07400722-modify]//
    option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    option text = STRING_TOKEN(STR_ENABLE), value = 1, flags = RESET_REQUIRED;
//[-end-160429-IB07400722-modify]//
  endoneof;

  oneof varid   = SystemConfig.I2s34C1,
    prompt      = STRING_TOKEN(STR_I2C_DEVICE_CODEC_INT34C1_PROMPT),
    help        = STRING_TOKEN(STR_I2C_DEVICE_CODEC_INT34C1_HELP),
//[-start-160421-IB03090426-modify]//
    option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    option text = STRING_TOKEN(STR_ENABLE), value = 1, flags = RESET_REQUIRED;
//[-end-160421-IB03090426-modify]//
  endoneof;

  oneof varid   = SystemConfig.I2cNfc,
    prompt      = STRING_TOKEN(STR_I2C_DEVICE_NFC_PROMPT),
    help        = STRING_TOKEN(STR_I2C_DEVICE_NFC_HELP),
//[-start-160429-IB07400722-modify]//
    option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    option text = STRING_TOKEN(STR_ENABLE), value = 1, flags = RESET_REQUIRED;
//[-end-160429-IB07400722-modify]//
  endoneof;

  oneof varid   = SystemConfig.I2cPss,
    prompt      = STRING_TOKEN(STR_I2C_DEVICE_PSS_PROMPT),
    help        = STRING_TOKEN(STR_I2C_DEVICE_PSS_HELP),
//[-start-160421-IB03090426-modify]//
    option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    option text = STRING_TOKEN(STR_ENABLE), value = 1, flags = RESET_REQUIRED;
//[-end-160421-IB03090426-modify]//
  endoneof;

//[-start-160413-IB03090426-modify]//
  oneof varid   = SystemConfig.UartGps,
    prompt      = STRING_TOKEN(STR_UART_DEVICE_GPS_PROMPT),
    help        = STRING_TOKEN(STR_UART_DEVICE_GPS_HELP),
    option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    option text = STRING_TOKEN(STR_ENABLE), value = 1, flags = RESET_REQUIRED;
  endoneof;
//[-end-160413-IB03090426-modify]//

  oneof varid   = SystemConfig.Spi1SensorDevice,
    prompt      = STRING_TOKEN(STR_SPI1_FPS_PROMPT),
    help        = STRING_TOKEN(STR_SPI1_FPS_HELP),
    option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    option text = STRING_TOKEN(STR_SPI1_FPS_FPC1020), value = 1, flags = RESET_REQUIRED;
    option text = STRING_TOKEN(STR_SPI1_FPS_FPC1021), value = 2, flags = RESET_REQUIRED;
  endoneof;
  
//[-start-160718-IB06720413-add]//
//[-start-160726-IB07400762-modify]//
  oneof varid   = SystemConfig.I2cTouchPanel,
    prompt      = STRING_TOKEN(STR_I2C_DEVICE_TOUCHPANEL_PROMPT),
    help        = STRING_TOKEN(STR_I2C_DEVICE_TOUCHPANEL_HELP),
    option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    option text = STRING_TOKEN(STR_ENABLE), value = 1, flags = RESET_REQUIRED;
  endoneof;
  
  oneof varid   = SystemConfig.I2cTouchPad,
    prompt      = STRING_TOKEN(STR_I2C_DEVICE_TOUCHPAD_PROMPT),
    help        = STRING_TOKEN(STR_I2C_DEVICE_TOUCHPAD_HELP),
    option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    option text = STRING_TOKEN(STR_ENABLE), value = 1, flags = RESET_REQUIRED;
  endoneof;
//[-end-160726-IB07400762-modify]//
//[-end-160718-IB06720413-add]//

endform;

//
// LAN Configurations
//
//
// ISH Configurations
//
form formid     = ISH_OPTIONS_FORM_ID,
  title         = STRING_TOKEN(STR_ISH_OPTIONS_FORM_TITLE);
  subtitle text = STRING_TOKEN(STR_ISH_OPTIONS_FORM_TITLE);

//[-start-160317-IB03090425-modify]//
  oneof varid  = SystemConfig.ScIshEnabled,
      prompt   = STRING_TOKEN(STR_ISH_PROMPT),
      help     = STRING_TOKEN(STR_ISH_HELP),
//[-start-171218-IB07400935-modify]//
      option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING |RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = RESET_REQUIRED;
//[-end-171218-IB07400935-modify]//
    endoneof;

endform; // End of ISH Configurations

//
// LPSS Configurations
//
form formid = LPSS_OPTIONS_FORM_ID,
  title         = STRING_TOKEN(STR_LPSS_FORM_TITLE);
  subtitle text = STRING_TOKEN(STR_LPSS_SETTING_SUBTITLE);

    oneof varid   = SystemConfig.LpssI2C0Enabled,
      prompt      = STRING_TOKEN(STR_LPSS_I2C0_PROMPT),
      help        = STRING_TOKEN(STR_LPSS_I2C0_HELP),
      option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_PCI_MODE_STRING), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
//[-start-170320-IB07400848-remove]//
//      option text = STRING_TOKEN(STR_ACPI_MODE_STRING), value = 2, flags = RESET_REQUIRED;
//[-end-170320-IB07400848-remove]//
    endoneof;
    
//[-start-160922-IB07400788-add]//
// #if BXTI_PF_ENABLE
    suppressif ideqval SystemConfig.LpssI2C0Enabled == 0;
      oneof varid   = SystemConfig.I2C0Speed,
        prompt      = STRING_TOKEN(STR_LPSS_I2C0_SPEED),
        help        = STRING_TOKEN(STR_LPSS_I2C0_SPEED_HELP),
        option text = STRING_TOKEN(STR_I2C_SPEED_SSCN), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_I2C_SPEED_FMCN), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(STR_I2C_SPEED_FPCN), value = 2, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_I2C_SPEED_HSCN), value = 3, flags = RESET_REQUIRED;
      endoneof;
    endif;
// #endif
//[-end-160922-IB07400788-add]//

    oneof varid   = SystemConfig.LpssI2C1Enabled,
      prompt      = STRING_TOKEN(STR_LPSS_I2C1_PROMPT),
      help        = STRING_TOKEN(STR_LPSS_I2C1_HELP),
      option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_PCI_MODE_STRING), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
//[-start-170320-IB07400848-remove]//
//      option text = STRING_TOKEN(STR_ACPI_MODE_STRING), value = 2, flags = RESET_REQUIRED;
//[-end-170320-IB07400848-remove]//
    endoneof;

//[-start-160803-IB07400768-add]//
// #if BXTI_PF_ENABLE
    suppressif ideqval SystemConfig.LpssI2C1Enabled == 0;
      oneof varid   = SystemConfig.I2C1Speed,
        prompt      = STRING_TOKEN(STR_LPSS_I2C1_SPEED),
        help        = STRING_TOKEN(STR_LPSS_I2C1_SPEED_HELP),
        option text = STRING_TOKEN(STR_I2C_SPEED_SSCN), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_I2C_SPEED_FMCN), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(STR_I2C_SPEED_FPCN), value = 2, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_I2C_SPEED_HSCN), value = 3, flags = RESET_REQUIRED;
      endoneof;
    endif;
// #endif
//[-end-160803-IB07400768-add]//

    oneof varid   = SystemConfig.LpssI2C2Enabled,
      prompt      = STRING_TOKEN(STR_LPSS_I2C2_PROMPT),
      help        = STRING_TOKEN(STR_LPSS_I2C2_HELP),
      option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_PCI_MODE_STRING), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
//[-start-170320-IB07400848-remove]//
//      option text = STRING_TOKEN(STR_ACPI_MODE_STRING), value = 2, flags = RESET_REQUIRED;
//[-end-170320-IB07400848-remove]//
    endoneof;

//[-start-160803-IB07400768-add]//
// #if BXTI_PF_ENABLE
    suppressif ideqval SystemConfig.LpssI2C2Enabled == 0;
      oneof varid   = SystemConfig.I2C2Speed,
        prompt      = STRING_TOKEN(STR_LPSS_I2C2_SPEED),
        help        = STRING_TOKEN(STR_LPSS_I2C2_SPEED_HELP),
        option text = STRING_TOKEN(STR_I2C_SPEED_SSCN), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_I2C_SPEED_FMCN), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(STR_I2C_SPEED_FPCN), value = 2, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_I2C_SPEED_HSCN), value = 3, flags = RESET_REQUIRED;
      endoneof;
    endif;
// #endif
//[-end-160803-IB07400768-add]//

    oneof varid   = SystemConfig.LpssI2C3Enabled,
      prompt      = STRING_TOKEN(STR_LPSS_I2C3_PROMPT),
      help        = STRING_TOKEN(STR_LPSS_I2C3_HELP),
      option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_PCI_MODE_STRING), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
//[-start-170320-IB07400848-remove]//
//      option text = STRING_TOKEN(STR_ACPI_MODE_STRING), value = 2, flags = RESET_REQUIRED;
//[-end-170320-IB07400848-remove]//
    endoneof;

//[-start-160803-IB07400768-add]//
// #if BXTI_PF_ENABLE
    suppressif ideqval SystemConfig.LpssI2C3Enabled == 0;
      oneof varid   = SystemConfig.I2C3Speed,
        prompt      = STRING_TOKEN(STR_LPSS_I2C3_SPEED),
        help        = STRING_TOKEN(STR_LPSS_I2C3_SPEED_HELP),
        option text = STRING_TOKEN(STR_I2C_SPEED_SSCN), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_I2C_SPEED_FMCN), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(STR_I2C_SPEED_FPCN), value = 2, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_I2C_SPEED_HSCN), value = 3, flags = RESET_REQUIRED;
      endoneof;
    endif;
// #endif
//[-end-160803-IB07400768-add]//

    oneof varid   = SystemConfig.LpssI2C4Enabled,
      prompt      = STRING_TOKEN(STR_LPSS_I2C4_PROMPT),
      help        = STRING_TOKEN(STR_LPSS_I2C4_HELP),
      option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_PCI_MODE_STRING), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
//[-start-170320-IB07400848-remove]//
//      option text = STRING_TOKEN(STR_ACPI_MODE_STRING), value = 2, flags = RESET_REQUIRED;
//[-end-170320-IB07400848-remove]//
    endoneof;

//[-start-160803-IB07400768-add]//
// #if BXTI_PF_ENABLE
    suppressif ideqval SystemConfig.LpssI2C4Enabled == 0;
      oneof varid   = SystemConfig.I2C4Speed,
        prompt      = STRING_TOKEN(STR_LPSS_I2C4_SPEED),
        help        = STRING_TOKEN(STR_LPSS_I2C4_SPEED_HELP),
        option text = STRING_TOKEN(STR_I2C_SPEED_SSCN), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_I2C_SPEED_FMCN), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(STR_I2C_SPEED_FPCN), value = 2, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_I2C_SPEED_HSCN), value = 3, flags = RESET_REQUIRED;
      endoneof;
    endif;
// #endif
//[-end-160803-IB07400768-add]//

    oneof varid   = SystemConfig.LpssI2C5Enabled,
      prompt      = STRING_TOKEN(STR_LPSS_I2C5_PROMPT),
      help        = STRING_TOKEN(STR_LPSS_I2C5_HELP),
      option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_PCI_MODE_STRING), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
//[-start-170320-IB07400848-remove]//
//      option text = STRING_TOKEN(STR_ACPI_MODE_STRING), value = 2, flags = RESET_REQUIRED;
//[-end-170320-IB07400848-remove]//
    endoneof;

//[-start-160803-IB07400768-add]//
// #if BXTI_PF_ENABLE
    suppressif ideqval SystemConfig.LpssI2C5Enabled == 0;
      oneof varid   = SystemConfig.I2C5Speed,
        prompt      = STRING_TOKEN(STR_LPSS_I2C5_SPEED),
        help        = STRING_TOKEN(STR_LPSS_I2C5_SPEED_HELP),
        option text = STRING_TOKEN(STR_I2C_SPEED_SSCN), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_I2C_SPEED_FMCN), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(STR_I2C_SPEED_FPCN), value = 2, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_I2C_SPEED_HSCN), value = 3, flags = RESET_REQUIRED;
      endoneof;
    endif;
// #endif
//[-end-160803-IB07400768-add]//

    oneof varid   = SystemConfig.LpssI2C6Enabled,
      prompt      = STRING_TOKEN(STR_LPSS_I2C6_PROMPT),
      help        = STRING_TOKEN(STR_LPSS_I2C6_HELP),
      option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_PCI_MODE_STRING), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
//[-start-170320-IB07400848-remove]//
//      option text = STRING_TOKEN(STR_ACPI_MODE_STRING), value = 2, flags = RESET_REQUIRED;
//[-end-170320-IB07400848-remove]//
    endoneof;

//[-start-160803-IB07400768-add]//
// #if BXTI_PF_ENABLE
    suppressif ideqval SystemConfig.LpssI2C6Enabled == 0;
      oneof varid   = SystemConfig.I2C6Speed,
        prompt      = STRING_TOKEN(STR_LPSS_I2C6_SPEED),
        help        = STRING_TOKEN(STR_LPSS_I2C6_SPEED_HELP),
        option text = STRING_TOKEN(STR_I2C_SPEED_SSCN), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_I2C_SPEED_FMCN), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(STR_I2C_SPEED_FPCN), value = 2, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_I2C_SPEED_HSCN), value = 3, flags = RESET_REQUIRED;
      endoneof;
    endif;
// #endif
//[-end-160803-IB07400768-add]//

	oneof varid   = SystemConfig.LpssI2C7Enabled,
      prompt      = STRING_TOKEN(STR_LPSS_I2C7_PROMPT),
      help        = STRING_TOKEN(STR_LPSS_I2C7_HELP),
      option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_PCI_MODE_STRING), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
//[-start-170320-IB07400848-remove]//
//      option text = STRING_TOKEN(STR_ACPI_MODE_STRING), value = 2, flags = RESET_REQUIRED;
//[-end-170320-IB07400848-remove]//
    endoneof;

//[-start-160803-IB07400768-add]//
// #if BXTI_PF_ENABLE
    suppressif ideqval SystemConfig.LpssI2C7Enabled == 0;
      oneof varid   = SystemConfig.I2C7Speed,
        prompt      = STRING_TOKEN(STR_LPSS_I2C7_SPEED),
        help        = STRING_TOKEN(STR_LPSS_I2C7_SPEED_HELP),
        option text = STRING_TOKEN(STR_I2C_SPEED_SSCN), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_I2C_SPEED_FMCN), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(STR_I2C_SPEED_FPCN), value = 2, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_I2C_SPEED_HSCN), value = 3, flags = RESET_REQUIRED;
      endoneof;
    endif;
// #endif
//[-end-160803-IB07400768-add]//

  subtitle text = STRING_TOKEN(STR_NULL_STRING);

    oneof varid   = SystemConfig.LpssHsuart0Enabled,
      prompt      = STRING_TOKEN(STR_LPSS_HSUART0_PROMPT),
      help        = STRING_TOKEN(STR_LPSS_HSUART0_HELP),
      option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_PCI_MODE_STRING), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
//[-start-170320-IB07400848-remove]//
//      option text = STRING_TOKEN(STR_ACPI_MODE_STRING), value = 2, flags = RESET_REQUIRED;
//[-end-170320-IB07400848-remove]//
    endoneof;

    oneof varid   = SystemConfig.LpssHsuart1Enabled,
      prompt      = STRING_TOKEN(STR_LPSS_HSUART1_PROMPT),
      help        = STRING_TOKEN(STR_LPSS_HSUART1_HELP),
      option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_PCI_MODE_STRING), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
//[-start-170320-IB07400848-remove]//
//      option text = STRING_TOKEN(STR_ACPI_MODE_STRING), value = 2, flags = RESET_REQUIRED;
//[-end-170320-IB07400848-remove]//
    endoneof;

	oneof varid   = SystemConfig.LpssHsuart2Enabled,
      prompt      = STRING_TOKEN(STR_LPSS_HSUART2_PROMPT),
      help        = STRING_TOKEN(STR_LPSS_HSUART2_HELP),
      option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_PCI_MODE_STRING), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
//[-start-170320-IB07400848-remove]//
//      option text = STRING_TOKEN(STR_ACPI_MODE_STRING), value = 2, flags = RESET_REQUIRED;
//[-end-170320-IB07400848-remove]//
    endoneof;

    oneof varid   = SystemConfig.LpssHsuart3Enabled,
      prompt      = STRING_TOKEN(STR_LPSS_HSUART3_PROMPT),
      help        = STRING_TOKEN(STR_LPSS_HSUART3_HELP),
      option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_PCI_MODE_STRING), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
//[-start-170320-IB07400848-remove]//
//      option text = STRING_TOKEN(STR_ACPI_MODE_STRING), value = 2, flags = RESET_REQUIRED;
//[-end-170320-IB07400848-remove]//
    endoneof;
	
    oneof varid   = SystemConfig.LpssSpi0Enabled,
        prompt      = STRING_TOKEN(STR_LPSS_SPI0_PROMPT),
      help        = STRING_TOKEN(STR_LPSS_SPI0_HELP),
      option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_PCI_MODE_STRING), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
//[-start-170320-IB07400848-remove]//
//      option text = STRING_TOKEN(STR_ACPI_MODE_STRING), value = 2, flags = RESET_REQUIRED;
//[-end-170320-IB07400848-remove]//
    endoneof;

    oneof varid   = SystemConfig.LpssSpi1Enabled,
      prompt      = STRING_TOKEN(STR_LPSS_SPI1_PROMPT),
      help        = STRING_TOKEN(STR_LPSS_SPI1_HELP),
      option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_PCI_MODE_STRING), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
//[-start-170320-IB07400848-remove]//
//      option text = STRING_TOKEN(STR_ACPI_MODE_STRING), value = 2, flags = RESET_REQUIRED;
//[-end-170320-IB07400848-remove]//
    endoneof;

    oneof varid   = SystemConfig.LpssSpi2Enabled,
      prompt      = STRING_TOKEN(STR_LPSS_SPI2_PROMPT),
      help        = STRING_TOKEN(STR_LPSS_SPI2_HELP),
      option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_PCI_MODE_STRING), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
//[-start-170320-IB07400848-remove]//
//      option text = STRING_TOKEN(STR_ACPI_MODE_STRING), value = 2, flags = RESET_REQUIRED;
//[-end-170320-IB07400848-remove]//
    endoneof;

  subtitle text = STRING_TOKEN(STR_NULL_STRING);

  oneof varid   = SystemConfig.LpssNFCSelect,
    prompt      = STRING_TOKEN(STR_LPSS_NFC_PROMPT),
//[-start-170320-IB07400848-modify]//
    help        = STRING_TOKEN(STR_LPSS_NFC_HELP2),
//[-end-170320-IB07400848-modify]//
    option text = STRING_TOKEN(STR_AUTO), value=0, flags=DEFAULT | MANUFACTURING | RESET_REQUIRED;
    option text = STRING_TOKEN(STR_LPSS_NFC1), value=1, flags=0 | RESET_REQUIRED;
    option text = STRING_TOKEN(STR_LPSS_NFC2), value=2, flags=0 | RESET_REQUIRED;
  endoneof;

  oneof varid   = SystemConfig.GpsModeSel,
    prompt      = STRING_TOKEN(STR_GPS_MODE_PROMPT),
//[-start-170320-IB07400848-modify]//
    help        = STRING_TOKEN(STR_LPSS_GPS_HELP2),
//[-end-170320-IB07400848-modify]//
    option text = STRING_TOKEN(STR_LPSS_GPS), value=0, flags= DEFAULT | MANUFACTURING | RESET_REQUIRED;
    option text = STRING_TOKEN(STR_ISH_GPS), value=1, flags= 0 | RESET_REQUIRED;
  endoneof;

  oneof varid   = SystemConfig.S0ixEnable,
    prompt      = STRING_TOKEN(STR_LPSS_PMCTL_S0IX_PROMPT),
    help        = STRING_TOKEN(STR_LPSS_PMCTL_S0IX_HELP),
    option text = STRING_TOKEN(STR_DISABLE), value=0, flags= RESET_REQUIRED;
    option text = STRING_TOKEN(STR_ENABLE), value=1, flags= DEFAULT | MANUFACTURING | RESET_REQUIRED;
  endoneof;
//[-end-160317-IB03090425-modify]//

  subtitle text = STRING_TOKEN(STR_NULL_STRING);

  subtitle text = STRING_TOKEN(STR_LPSS_CLOCK_GATE_SETTING_SUBTITLE);

  oneof varid   = SystemConfig.LpssI2cClkGateCfg[0],
    prompt      = STRING_TOKEN(STR_LPSS_I2C0_CLK_GATING_PROMPT),
    help        = STRING_TOKEN(STR_LPSS_I2C0_CLK_GATING_HELP),
    option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
    option text = STRING_TOKEN(STR_ENABLE), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
  endoneof;

  oneof varid   = SystemConfig.LpssI2cClkGateCfg[1],
    prompt      = STRING_TOKEN(STR_LPSS_I2C1_CLK_GATING_PROMPT),
    help        = STRING_TOKEN(STR_LPSS_I2C1_CLK_GATING_HELP),
    option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
    option text = STRING_TOKEN(STR_ENABLE), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
  endoneof;

  oneof varid   = SystemConfig.LpssI2cClkGateCfg[2],
    prompt      = STRING_TOKEN(STR_LPSS_I2C2_CLK_GATING_PROMPT),
    help        = STRING_TOKEN(STR_LPSS_I2C2_CLK_GATING_HELP),
    option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
    option text = STRING_TOKEN(STR_ENABLE), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
  endoneof;

  oneof varid   = SystemConfig.LpssI2cClkGateCfg[3],
    prompt      = STRING_TOKEN(STR_LPSS_I2C3_CLK_GATING_PROMPT),
    help        = STRING_TOKEN(STR_LPSS_I2C3_CLK_GATING_HELP),
    option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
    option text = STRING_TOKEN(STR_ENABLE), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
  endoneof;

  oneof varid   = SystemConfig.LpssI2cClkGateCfg[4],
    prompt      = STRING_TOKEN(STR_LPSS_I2C4_CLK_GATING_PROMPT),
    help        = STRING_TOKEN(STR_LPSS_I2C4_CLK_GATING_HELP),
    option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
    option text = STRING_TOKEN(STR_ENABLE), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
  endoneof;

  oneof varid   = SystemConfig.LpssI2cClkGateCfg[5],
    prompt      = STRING_TOKEN(STR_LPSS_I2C5_CLK_GATING_PROMPT),
    help        = STRING_TOKEN(STR_LPSS_I2C5_CLK_GATING_HELP),
    option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
    option text = STRING_TOKEN(STR_ENABLE), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
  endoneof;

  oneof varid   = SystemConfig.LpssI2cClkGateCfg[6],
    prompt      = STRING_TOKEN(STR_LPSS_I2C6_CLK_GATING_PROMPT),
    help        = STRING_TOKEN(STR_LPSS_I2C6_CLK_GATING_HELP),
    option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
    option text = STRING_TOKEN(STR_ENABLE), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
  endoneof;

  oneof varid   = SystemConfig.LpssI2cClkGateCfg[7],
    prompt      = STRING_TOKEN(STR_LPSS_I2C7_CLK_GATING_PROMPT),
    help        = STRING_TOKEN(STR_LPSS_I2C7_CLK_GATING_HELP),
    option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
    option text = STRING_TOKEN(STR_ENABLE), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
  endoneof;

  oneof varid   = SystemConfig.LpssHsuartClkGateCfg[0],
    prompt      = STRING_TOKEN(STR_LPSS_HSUART0_CLK_GATING_PROMPT),
    help        = STRING_TOKEN(STR_LPSS_HSUART0_CLK_GATING_HELP),
    option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
    option text = STRING_TOKEN(STR_ENABLE), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
  endoneof;

  oneof varid   = SystemConfig.LpssHsuartClkGateCfg[1],
    prompt      = STRING_TOKEN(STR_LPSS_HSUART1_CLK_GATING_PROMPT),
    help        = STRING_TOKEN(STR_LPSS_HSUART1_CLK_GATING_HELP),
    option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
    option text = STRING_TOKEN(STR_ENABLE), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
  endoneof;

  oneof varid   = SystemConfig.LpssHsuartClkGateCfg[2],
    prompt      = STRING_TOKEN(STR_LPSS_HSUART2_CLK_GATING_PROMPT),
    help        = STRING_TOKEN(STR_LPSS_HSUART2_CLK_GATING_HELP),
    option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
    option text = STRING_TOKEN(STR_ENABLE), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
  endoneof;

  oneof varid   = SystemConfig.LpssHsuartClkGateCfg[3],
    prompt      = STRING_TOKEN(STR_LPSS_HSUART3_CLK_GATING_PROMPT),
    help        = STRING_TOKEN(STR_LPSS_HSUART3_CLK_GATING_HELP),
    option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
    option text = STRING_TOKEN(STR_ENABLE), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
  endoneof;

  oneof varid   = SystemConfig.LpssSpiClkGateCfg[0],
    prompt      = STRING_TOKEN(STR_LPSS_SPI0_CLK_GATING_PROMPT),
    help        = STRING_TOKEN(STR_LPSS_SPI0_CLK_GATING_HELP),
    option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
    option text = STRING_TOKEN(STR_ENABLE), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
  endoneof;

  oneof varid   = SystemConfig.LpssSpiClkGateCfg[1],
    prompt      = STRING_TOKEN(STR_LPSS_SPI1_CLK_GATING_PROMPT),
    help        = STRING_TOKEN(STR_LPSS_SPI1_CLK_GATING_HELP),
    option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
    option text = STRING_TOKEN(STR_ENABLE), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
  endoneof;

  oneof varid   = SystemConfig.LpssSpiClkGateCfg[2],
    prompt      = STRING_TOKEN(STR_LPSS_SPI2_CLK_GATING_PROMPT),
    help        = STRING_TOKEN(STR_LPSS_SPI2_CLK_GATING_HELP),
    option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
    option text = STRING_TOKEN(STR_ENABLE), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
  endoneof;

endform; // End of LPSS_OPTIONS_FORM_ID

form formid     = SCC_OPTIONS_FORM_ID,
  title         = STRING_TOKEN(STR_SCC_OPTIONS_FORM_TITLE);

//[-start-160317-IB03090425-modify]//
  oneof varid   = SystemConfig.SccSdcardEnabled,
    prompt      = STRING_TOKEN(STR_SCC_SDCARD_PROMPT),
    help        = STRING_TOKEN(STR_SCC_SDCARD_HELP),
    option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
    option text = STRING_TOKEN(STR_ENABLE), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
  endoneof;

  oneof varid   = SystemConfig.ScceMMCEnabled,
    prompt      = STRING_TOKEN(STR_SCC_EMMC_PROMPT),
    help        = STRING_TOKEN(STR_SCC_EMMC_HELP),
    option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
    option text = STRING_TOKEN(STR_ENABLE), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
  endoneof;
//[-end-160317-IB03090425-modify]//
//[-start-161007-IB11270165-modify]//
//[-start-161201-IB11270170-modify]//
//#if (FeaturePcdGet(PcdH2OSdhcSupported) == 0)
  suppressif ideqval SystemConfig.ScceMMCEnabled == 0;
    oneof varid  = SystemConfig.ScceMMCHostMaxSpeed,
      prompt   = STRING_TOKEN(STR_SCC_EMMC_SPEED_PROMPT),
      help     = STRING_TOKEN(STR_SCC_EMMC_SPEED_HELP),
      option text = STRING_TOKEN(STR_HS400), value = 0, flags =  DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_HS200), value = 1, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_DDR50), value = 2, flags = RESET_REQUIRED;
    endoneof;
  endif;
//#endif
//[-end-161007-IB11270165-modify]//
//[-end-161201-IB11270170-modify]//
//[-start-160317-IB03090425-modify]//
  oneof varid   = SystemConfig.SccUfsEnabled,
    prompt      = STRING_TOKEN(STR_SCC_UFS_PROMPT),
    help        = STRING_TOKEN(STR_SCC_UFS_HELP),
    option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    option text = STRING_TOKEN(STR_ENABLE), value = 1, flags = RESET_REQUIRED;
  endoneof;

  oneof varid   = SystemConfig.SccSdioEnabled,
    prompt      = STRING_TOKEN(STR_SCC_SDIO_PROMPT),
    help        = STRING_TOKEN(STR_SCC_SDIO_HELP),
    option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
    option text = STRING_TOKEN(STR_ENABLE), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
  endoneof;
//[-end-160317-IB03090425-modify]//


endform; // End of SCC_OPTIONS_FORM_ID

//
// PCIe Configurations
//
form formid     = PCIE_DEVICE_OPTIONS_FORM_ID,
  title         = STRING_TOKEN(STR_PCIE_OPTIONS_FORM_TITLE);
  subtitle text = STRING_TOKEN(STR_PCIE_OPTIONS_FORM_TITLE);

   oneof varid   = SystemConfig.PcieClockGatingDisabled,
        prompt      = STRING_TOKEN(STR_PCIE_CKG_PROMPT),
        help        = STRING_TOKEN(STR_PCIE_CKG_HELP),
        option text = STRING_TOKEN(STR_DISABLED), value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;

    text
      help   = STRING_TOKEN(STR_EMPTY_STRING),
      text   = STRING_TOKEN(STR_PCIE_LAN_PROMPT),
      text   = STRING_TOKEN(STR_PCIE_LAN_VALUE),
      flags = 0, key = 0;

    oneof varid   = SystemConfig.PcieRootPort8xhDecode,
      prompt      = STRING_TOKEN(STR_PCH_PCIE_PORT8XH_PROMPT),
      help        = STRING_TOKEN(STR_PCH_PCIE_PORT8XH_HELP),
      option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
    endoneof;

    suppressif ideqval SystemConfig.PcieRootPort8xhDecode == 0;
      numeric varid = SystemConfig.Pcie8xhDecodePortIndex,
        prompt      = STRING_TOKEN (STR_PCH_PCIE_PORT8XH_PORT_PROMPT),
        help        = STRING_TOKEN (STR_PCH_PCIE_PORT8XH_PORT_HELP),
        flags       = RESET_REQUIRED,
//[-start-170321-IB07400848-modify]//
        minimum     = 1,
        maximum     = 6,
        step        = 1,    // Stepping of 0 equates to a manual entering of a value, otherwise it will auto-increment with a left/right arrow
        default     = 1,    // PCIe Port0 as default
//[-end-170321-IB07400848-modify]//
      endnumeric;
    endif;

    oneof varid   = SystemConfig.PcieRootPortPeerMemoryWriteEnable,
      prompt      = STRING_TOKEN(STR_PCH_PCIE_PEERMEMORYWRITE_PROMPT),
      help        = STRING_TOKEN(STR_PCH_PCIE_PEERMEMORYWRITE_HELP),
      option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
    endoneof;

//[-start-160317-IB03090425-add]//
    oneof varid   = SystemConfig.PcieComplianceMode,
      prompt      = STRING_TOKEN(STR_PCIE_COMPLIANCE_MODE_PROMPT),
      help        = STRING_TOKEN(STR_PCIE_COMPLIANCE_MODE_HELP),
      option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
    endoneof;
//[-end-160317-IB03090425-add]//

  goto PCIERP1_OPTIONS_FORM_ID,
       prompt = STRING_TOKEN(STR_PCH_PCIERP1_PROMPT),
       help = STRING_TOKEN(STR_PCH_PCIERP_HELP);

  goto PCIERP2_OPTIONS_FORM_ID,
       prompt = STRING_TOKEN(STR_PCH_PCIERP2_PROMPT),
       help = STRING_TOKEN(STR_PCH_PCIERP_HELP);

  goto PCIERP3_OPTIONS_FORM_ID,
       prompt = STRING_TOKEN(STR_PCH_PCIERP3_PROMPT),
       help = STRING_TOKEN(STR_PCH_PCIERP_HELP);

  goto PCIERP4_OPTIONS_FORM_ID,
       prompt = STRING_TOKEN(STR_PCH_PCIERP4_PROMPT),
       help = STRING_TOKEN(STR_PCH_PCIERP_HELP);

  goto PCIERP5_OPTIONS_FORM_ID,
       prompt = STRING_TOKEN(STR_PCH_PCIERP5_PROMPT),
       help = STRING_TOKEN(STR_PCH_PCIERP_HELP);

  goto PCIERP6_OPTIONS_FORM_ID,
       prompt = STRING_TOKEN(STR_PCH_PCIERP6_PROMPT),
       help = STRING_TOKEN(STR_PCH_PCIERP_HELP);

endform; //End of PCIE_DEVICE_OPTIONS_FORM_ID

//------------------------------------------------------------------------------------

form formid     = PCIERP1_OPTIONS_FORM_ID,
  title         = STRING_TOKEN(STR_PCH_PCIERP1_PROMPT);

//[-start-160317-IB03090425-modify]//
  oneof varid   = SystemConfig.PcieRootPortEn[OFFSET_0],
    prompt      = STRING_TOKEN(STR_PCH_PCIERP1_PROMPT),
    help        = STRING_TOKEN(STR_PCH_PCIERP_HELP),
//[-start-160506-IB03090427-modify]//
//[-start-160603-IB07400740-modify]//
    //
    // Set default as Auto for auto detect
    //
//#if !BXTI_PF_ENABLE
    option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
    option text = STRING_TOKEN(STR_ENABLE), value = 1, flags = RESET_REQUIRED;
    option text = STRING_TOKEN(STR_AUTOMATIC), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
//#else
//    option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
//    option text = STRING_TOKEN(STR_ENABLE), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
//    option text = STRING_TOKEN(STR_AUTOMATIC), value = 2, flags = RESET_REQUIRED;
//#endif
//[-end-160603-IB07400740-modify]//
//[-end-160506-IB03090427-modify]//
  endoneof;

  text
    help  = STRING_TOKEN(STR_EMPTY_STRING),
    text  = STRING_TOKEN(STR_DIS_TO_EN_HELP),
    flags = 0,
    key   = 0;
//[-end-160317-IB03090425-modify]//

  suppressif ideqval SystemConfig.PcieRootPortEn[OFFSET_0] == 0x0;
    oneof varid   = SystemConfig.PcieRootPortAspm[OFFSET_0],
      prompt      = STRING_TOKEN(STR_PCIE_ASPM_PROMPT),
      help        = STRING_TOKEN(STR_PCIE_ASPM_HELP),
      option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_PCIE_ASPM_L0S_STRING), value = 1, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_PCIE_ASPM_L1_STRING), value = 2, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_PCIE_ASPM_L0SL1_STRING), value = 3, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_AUTOMATIC), value = 4, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;

    oneof varid   = SystemConfig.PcieRootPortL1SubStates[OFFSET_0],
      prompt      = STRING_TOKEN(STR_PCIE_L1SUB_PROMPT),
      help        = STRING_TOKEN(STR_PCIE_L1SUB_HELP),
      option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_PCIE_L1SUB_1_STRING), value = 1, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_PCIE_L1SUB_2_STRING), value = 2, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_PCIE_L1SUB_1_2_STRING), value = 3, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;

    oneof varid   = SystemConfig.PcieRootPortACS[OFFSET_0],
      prompt      = STRING_TOKEN(STR_PCIE_ACS_PROMPT),
      help        = STRING_TOKEN(STR_PCIE_ACS_HELP),
      option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;

    oneof varid   = SystemConfig.PcieRootPortURE[OFFSET_0],
      prompt      = STRING_TOKEN(STR_PCH_PCIE_URE_PROMPT),
      help        = STRING_TOKEN(STR_PCH_PCIE_URE_HELP),
      option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLE), value = 1, flags = RESET_REQUIRED;
    endoneof;

    oneof varid   = SystemConfig.PcieRootPortFEE[OFFSET_0],
      prompt      = STRING_TOKEN(STR_PCH_PCIE_FEE_PROMPT),
      help        = STRING_TOKEN(STR_PCH_PCIE_FEE_HELP),
      option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLE), value = 1, flags = RESET_REQUIRED;
    endoneof;

    oneof varid   = SystemConfig.PcieRootPortNFE[OFFSET_0],
      prompt      = STRING_TOKEN(STR_PCH_PCIE_NFE_PROMPT),
      help        = STRING_TOKEN(STR_PCH_PCIE_NFE_HELP),
      option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLE), value = 1, flags = RESET_REQUIRED;
    endoneof;

    oneof varid   = SystemConfig.PcieRootPortCEE[OFFSET_0],
      prompt      = STRING_TOKEN(STR_PCH_PCIE_CEE_PROMPT),
      help        = STRING_TOKEN(STR_PCH_PCIE_CEE_HELP),
      option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLE), value = 1, flags = RESET_REQUIRED;
    endoneof;

    oneof varid   = SystemConfig.PcieRootPortCTD[OFFSET_0],
      prompt      = STRING_TOKEN(STR_PCH_PCIE_CTD_PROMPT),
      help        = STRING_TOKEN(STR_PCH_PCIE_CTD_HELP),
      option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
    endoneof;

    oneof varid   = SystemConfig.PcieRootPortSFE[OFFSET_0],
      prompt      = STRING_TOKEN(STR_PCH_PCIE_SFE_PROMPT),
      help        = STRING_TOKEN(STR_PCH_PCIE_SFE_HELP),
      option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLE), value = 1, flags = RESET_REQUIRED;
    endoneof;

    oneof varid   = SystemConfig.PcieRootPortSNE[OFFSET_0],
      prompt      = STRING_TOKEN(STR_PCH_PCIE_SNE_PROMPT),
      help        = STRING_TOKEN(STR_PCH_PCIE_SNE_HELP),
      option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLE), value = 1, flags = RESET_REQUIRED;
    endoneof;

    oneof varid   = SystemConfig.PcieRootPortSCE[OFFSET_0],
      prompt      = STRING_TOKEN(STR_PCH_PCIE_SCE_PROMPT),
      help        = STRING_TOKEN(STR_PCH_PCIE_SCE_HELP),
      option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLE), value = 1, flags = RESET_REQUIRED;
    endoneof;

    oneof varid   = SystemConfig.PcieRootPortPMCE[OFFSET_0],
      prompt      = STRING_TOKEN(STR_PCH_PCIE_PMCE_PROMPT),
      help        = STRING_TOKEN(STR_PCH_PCIE_PMCE_HELP),
      option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLE), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;

    oneof varid   = SystemConfig.PcieRootPortHPE[OFFSET_0],
      prompt      = STRING_TOKEN(STR_PCH_PCIE_HPE_PROMPT),
      help        = STRING_TOKEN(STR_PCH_PCIE_HPE_HELP),
      option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLE), value = 1, flags = RESET_REQUIRED;
    endoneof;

    oneof varid   = SystemConfig.PcieRootPortSpeed[OFFSET_0],
      prompt      = STRING_TOKEN (STR_PCIE_SPEED_PROMPT),
      help        = STRING_TOKEN (STR_PCIE_SPEED_HELP),
      option text = STRING_TOKEN (STR_AUTO), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN (STR_GEN1), value = 1, flags = RESET_REQUIRED;
      option text = STRING_TOKEN (STR_GEN2), value = 2, flags = RESET_REQUIRED;
//[-start-160801-IB03090430-remove]//
//      option text = STRING_TOKEN (STR_GEN3), value = 3, flags = RESET_REQUIRED;
//[-end-160801-IB03090430-remove]//
    endoneof;

    oneof varid   = SystemConfig.PcieRootPortTHS[OFFSET_0],
      prompt      = STRING_TOKEN(STR_PCH_PCIE_THS_PROMPT),
      help        = STRING_TOKEN(STR_PCH_PCIE_THS_HELP),
      option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLE), value = 1, flags = RESET_REQUIRED;
    endoneof;

    numeric varid = SystemConfig.PcieExtraBusRsvd[OFFSET_0],
      prompt      = STRING_TOKEN (STR_PCH_PCIE_RBUS_PROMPT),
      help        = STRING_TOKEN (STR_PCH_PCIE_RBUS_HELP),
      minimum     = 0,
      maximum     = 7,
      step        = 1,    // Stepping of 0 equates to a manual entering of a value, otherwise it will auto-increment with a left/right arrow
      default     = 0,    // default no extra bus reserved
    endnumeric;

    numeric varid = SystemConfig.PcieMemRsvd[OFFSET_0],
      prompt      = STRING_TOKEN (STR_PCH_PCIE_RMEM_PROMPT),
      help        = STRING_TOKEN (STR_PCH_PCIE_RMEM_HELP),
      minimum     = 1,
      maximum     = 20,
      step        = 1,    // Stepping of 0 equates to a manual entering of a value, otherwise it will auto-increment with a left/right arrow
      default     = 10,   // Default 10MB Memory Reserved
    endnumeric;

    numeric varid = SystemConfig.PcieIoRsvd[OFFSET_0],
      prompt      = STRING_TOKEN (STR_PCH_PCIE_RVIO_PROMPT),
      help        = STRING_TOKEN (STR_PCH_PCIE_RVIO_HELP),
      minimum     = 4,
      maximum     = 20,
      step        = 4,    // Stepping of 0 equates to a manual entering of a value, otherwise it will auto-increment with a left/right arrow
      default     = 4,    // Default 4K IO Reserved
    endnumeric;

  subtitle text = STRING_TOKEN(STR_PCH_PCIE_LTR_CONFIG);

    oneof varid   = SystemConfig.PchPcieLtrEnable[OFFSET_0],
      prompt   = STRING_TOKEN (STR_PCH_PCIE_LTR_PROMPT),
      help     = STRING_TOKEN (STR_PCH_PCIE_LTR_HELP),
      option text = STRING_TOKEN(STR_DISABLED),  value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;

    suppressif ideqval SystemConfig.PchPcieLtrEnable[OFFSET_0] == 0;
      oneof varid   = SystemConfig.PchPcieSnoopLatencyOverrideMode[OFFSET_0],
        prompt      = STRING_TOKEN (STR_PCH_PCIE_SL_OVRD_PROMPT),
        help        = STRING_TOKEN (STR_PCH_PCIE_SL_OVRD_HELP),
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_MANUAL_STRING),   value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_AUTO_STRING),     value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      suppressif NOT ideqval SystemConfig.PchPcieSnoopLatencyOverrideMode[OFFSET_0] == 1;
        numeric varid = SystemConfig.PchPcieSnoopLatencyOverrideValue[OFFSET_0],
          prompt      = STRING_TOKEN(STR_PCH_PCIE_SL_VAL_PROMPT),
          help        = STRING_TOKEN(STR_PCH_PCIE_SL_VAL_HELP),
          flags       = RESET_REQUIRED,
          minimum     = 0,
          maximum     = 1023,
          step        = 1,
          default     = 60,
        endnumeric;

        oneof varid   = SystemConfig.PchPcieSnoopLatencyOverrideMultiplier[OFFSET_0],
          prompt      = STRING_TOKEN(STR_PCH_PCIE_SL_SCALE_PROMPT),
          help        = STRING_TOKEN(STR_PCH_PCIE_SL_SCALE_HELP),
          option text = STRING_TOKEN(STR_LTR_SCALE_0), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_LTR_SCALE_1), value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_LTR_SCALE_2), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_LTR_SCALE_3), value = 3, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_LTR_SCALE_4), value = 4, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_LTR_SCALE_5), value = 5, flags = RESET_REQUIRED;
        endoneof;
      endif;

      oneof varid   = SystemConfig.PchPcieNonSnoopLatencyOverrideMode[OFFSET_0],
        prompt      = STRING_TOKEN (STR_PCH_PCIE_NSL_OVRD_PROMPT),
        help        = STRING_TOKEN (STR_PCH_PCIE_NSL_OVRD_HELP),
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_MANUAL_STRING),   value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_AUTO_STRING),     value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      suppressif NOT ideqval SystemConfig.PchPcieNonSnoopLatencyOverrideMode[OFFSET_0] == 1;
        numeric varid = SystemConfig.PchPcieNonSnoopLatencyOverrideValue[0],
          prompt      = STRING_TOKEN(STR_PCH_PCIE_NSL_VAL_PROMPT),
          help        = STRING_TOKEN(STR_PCH_PCIE_NSL_VAL_HELP),
          flags       = RESET_REQUIRED,
          minimum     = 0,
          maximum     = 1023,
          step        = 1,
          default     = 60,
        endnumeric;

        oneof varid   = SystemConfig.PchPcieNonSnoopLatencyOverrideMultiplier[OFFSET_0],
          prompt      = STRING_TOKEN(STR_PCH_PCIE_NSL_SCALE_PROMPT),
          help        = STRING_TOKEN(STR_PCH_PCIE_NSL_SCALE_HELP),
          option text = STRING_TOKEN(STR_LTR_SCALE_0), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_LTR_SCALE_1), value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_LTR_SCALE_2), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_LTR_SCALE_3), value = 3, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_LTR_SCALE_4), value = 4, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_LTR_SCALE_5), value = 5, flags = RESET_REQUIRED;
        endoneof;
      endif;
    endif;

    oneof varid   = SystemConfig.PchPcieLtrConfigLock[OFFSET_0],
      prompt   = STRING_TOKEN (STR_PCH_PCIE_LTRLOCK_PROMPT),
      help     = STRING_TOKEN (STR_PCH_PCIE_LTRLOCK_HELP),
      option text = STRING_TOKEN(STR_DISABLED),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = RESET_REQUIRED;
    endoneof;
//[-start-160506-IB03090427-add]//
    oneof varid   = SystemConfig.PcieRootPortSelectableDeemphasis[OFFSET_0],
      prompt   = STRING_TOKEN (STR_PCH_PCIE_SD_PROMPT),
      help     = STRING_TOKEN (STR_PCH_PCIE_SD_HELP),
      option text = STRING_TOKEN(STR_DISABLED),  value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;
//[-end-160506-IB03090427-add]//
  endif;
endform; //End of PCIERP1_OPTIONS_FORM_ID

//------------------------------------------------------------------------------------

form formid       = PCIERP2_OPTIONS_FORM_ID,
  title           = STRING_TOKEN(STR_PCH_PCIERP2_PROMPT);


//[-start-160317-IB03090425-modify]//
  oneof varid   = SystemConfig.PcieRootPortEn[OFFSET_1],
    prompt      = STRING_TOKEN(STR_PCH_PCIERP2_PROMPT),
    help        = STRING_TOKEN(STR_PCH_PCIERP_HELP),
//[-start-160506-IB03090427-modify]//
//[-start-160603-IB07400740-modify]//
    //
    // Set default as Auto for auto detect
    //
//#if !BXTI_PF_ENABLE
    option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
    option text = STRING_TOKEN(STR_ENABLE), value = 1, flags = RESET_REQUIRED;
    option text = STRING_TOKEN(STR_AUTOMATIC), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
//#else
//    option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
//    option text = STRING_TOKEN(STR_ENABLE), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
//    option text = STRING_TOKEN(STR_AUTOMATIC), value = 2, flags = RESET_REQUIRED;
//#endif
//[-end-160603-IB07400740-modify]//
//[-end-160506-IB03090427-modify]//
  endoneof;

  text
    help  = STRING_TOKEN(STR_EMPTY_STRING),
    text  = STRING_TOKEN(STR_DIS_TO_EN_HELP),
    flags = 0,
    key   = 0;
//[-end-160317-IB03090425-modify]//

  suppressif ideqval SystemConfig.PcieRootPortEn[OFFSET_1] == 0x0;
    oneof varid   = SystemConfig.PcieRootPortAspm[OFFSET_1],
      prompt      = STRING_TOKEN(STR_PCIE_ASPM_PROMPT),
      help        = STRING_TOKEN(STR_PCIE_ASPM_HELP),
      option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_PCIE_ASPM_L0S_STRING), value = 1, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_PCIE_ASPM_L1_STRING), value = 2, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_PCIE_ASPM_L0SL1_STRING), value = 3, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_AUTOMATIC), value = 4, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;

    oneof varid   = SystemConfig.PcieRootPortL1SubStates[OFFSET_1],
      prompt      = STRING_TOKEN(STR_PCIE_L1SUB_PROMPT),
      help        = STRING_TOKEN(STR_PCIE_L1SUB_HELP),
      option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_PCIE_L1SUB_1_STRING), value = 1, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_PCIE_L1SUB_2_STRING), value = 2, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_PCIE_L1SUB_1_2_STRING), value = 3, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;

    oneof varid   = SystemConfig.PcieRootPortACS[OFFSET_1],
      prompt      = STRING_TOKEN(STR_PCIE_ACS_PROMPT),
      help        = STRING_TOKEN(STR_PCIE_ACS_HELP),
      option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;

    oneof varid   = SystemConfig.PcieRootPortURE[OFFSET_1],
      prompt      = STRING_TOKEN(STR_PCH_PCIE_URE_PROMPT),
      help        = STRING_TOKEN(STR_PCH_PCIE_URE_HELP),
      option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLE), value = 1, flags = RESET_REQUIRED;
    endoneof;

    oneof varid   = SystemConfig.PcieRootPortFEE[OFFSET_1],
      prompt      = STRING_TOKEN(STR_PCH_PCIE_FEE_PROMPT),
      help        = STRING_TOKEN(STR_PCH_PCIE_FEE_HELP),
      option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLE), value = 1, flags = RESET_REQUIRED;
    endoneof;

    oneof varid   = SystemConfig.PcieRootPortNFE[OFFSET_1],
      prompt      = STRING_TOKEN(STR_PCH_PCIE_NFE_PROMPT),
      help        = STRING_TOKEN(STR_PCH_PCIE_NFE_HELP),
      option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLE), value = 1, flags = RESET_REQUIRED;
    endoneof;

    oneof varid   = SystemConfig.PcieRootPortCEE[OFFSET_1],
      prompt      = STRING_TOKEN(STR_PCH_PCIE_CEE_PROMPT),
      help        = STRING_TOKEN(STR_PCH_PCIE_CEE_HELP),
      option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLE), value = 1, flags = RESET_REQUIRED;
    endoneof;

    oneof varid   = SystemConfig.PcieRootPortCTD[OFFSET_1],
      prompt      = STRING_TOKEN(STR_PCH_PCIE_CTD_PROMPT),
      help        = STRING_TOKEN(STR_PCH_PCIE_CTD_HELP),
      option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
    endoneof;

    oneof varid   = SystemConfig.PcieRootPortSFE[OFFSET_1],
      prompt      = STRING_TOKEN(STR_PCH_PCIE_SFE_PROMPT),
      help        = STRING_TOKEN(STR_PCH_PCIE_SFE_HELP),
      option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLE), value = 1, flags = RESET_REQUIRED;
    endoneof;

    oneof varid   = SystemConfig.PcieRootPortSNE[OFFSET_1],
      prompt      = STRING_TOKEN(STR_PCH_PCIE_SNE_PROMPT),
      help        = STRING_TOKEN(STR_PCH_PCIE_SNE_HELP),
      option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLE), value = 1, flags = RESET_REQUIRED;
    endoneof;

    oneof varid   = SystemConfig.PcieRootPortSCE[OFFSET_1],
      prompt      = STRING_TOKEN(STR_PCH_PCIE_SCE_PROMPT),
      help        = STRING_TOKEN(STR_PCH_PCIE_SCE_HELP),
      option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLE), value = 1, flags = RESET_REQUIRED;
    endoneof;

    oneof varid   = SystemConfig.PcieRootPortPMCE[OFFSET_1],
      prompt      = STRING_TOKEN(STR_PCH_PCIE_PMCE_PROMPT),
      help        = STRING_TOKEN(STR_PCH_PCIE_PMCE_HELP),
      option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLE), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;

    oneof varid   = SystemConfig.PcieRootPortHPE[OFFSET_1],
      prompt      = STRING_TOKEN(STR_PCH_PCIE_HPE_PROMPT),
      help        = STRING_TOKEN(STR_PCH_PCIE_HPE_HELP),
      option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLE), value = 1, flags = RESET_REQUIRED;
    endoneof;

    oneof varid   = SystemConfig.PcieRootPortSpeed[OFFSET_1],
      prompt      = STRING_TOKEN (STR_PCIE_SPEED_PROMPT),
      help        = STRING_TOKEN (STR_PCIE_SPEED_HELP),
      option text = STRING_TOKEN (STR_AUTO), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN (STR_GEN1), value = 1, flags = RESET_REQUIRED;
      option text = STRING_TOKEN (STR_GEN2), value = 2, flags = RESET_REQUIRED;
    endoneof;

    oneof varid   = SystemConfig.PcieRootPortTHS[OFFSET_1],
      prompt      = STRING_TOKEN(STR_PCH_PCIE_THS_PROMPT),
      help        = STRING_TOKEN(STR_PCH_PCIE_THS_HELP),
      option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLE), value = 1, flags = RESET_REQUIRED;
    endoneof;

    numeric varid = SystemConfig.PcieExtraBusRsvd[OFFSET_1],
      prompt      = STRING_TOKEN (STR_PCH_PCIE_RBUS_PROMPT),
      help        = STRING_TOKEN (STR_PCH_PCIE_RBUS_HELP),
      minimum     = 0,
      maximum     = 7,
      step        = 1,    // Stepping of 0 equates to a manual entering of a value, otherwise it will auto-increment with a left/right arrow
      default     = 0,    // default no extra bus reserved
    endnumeric;

    numeric varid = SystemConfig.PcieMemRsvd[OFFSET_1],
      prompt      = STRING_TOKEN (STR_PCH_PCIE_RMEM_PROMPT),
      help        = STRING_TOKEN (STR_PCH_PCIE_RMEM_HELP),
      minimum     = 1,
      maximum     = 20,
      step        = 1,    // Stepping of 0 equates to a manual entering of a value, otherwise it will auto-increment with a left/right arrow
      default     = 10,   // Default 10MB Memory Reserved
    endnumeric;

    numeric varid = SystemConfig.PcieIoRsvd[OFFSET_1],
      prompt      = STRING_TOKEN (STR_PCH_PCIE_RVIO_PROMPT),
      help        = STRING_TOKEN (STR_PCH_PCIE_RVIO_HELP),
      minimum     = 4,
      maximum     = 20,
      step        = 4,    // Stepping of 0 equates to a manual entering of a value, otherwise it will auto-increment with a left/right arrow
      default     = 4,    // Default 4K IO Reserved
    endnumeric;

  subtitle text = STRING_TOKEN(STR_PCH_PCIE_LTR_CONFIG);
  
    oneof varid   = SystemConfig.PchPcieLtrEnable[OFFSET_1],
      prompt   = STRING_TOKEN (STR_PCH_PCIE_LTR_PROMPT),
      help     = STRING_TOKEN (STR_PCH_PCIE_LTR_HELP),
      option text = STRING_TOKEN(STR_DISABLED),  value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;

    suppressif ideqval SystemConfig.PchPcieLtrEnable[OFFSET_1] == 0;
      oneof varid   = SystemConfig.PchPcieSnoopLatencyOverrideMode[OFFSET_1],
        prompt      = STRING_TOKEN (STR_PCH_PCIE_SL_OVRD_PROMPT),
        help        = STRING_TOKEN (STR_PCH_PCIE_SL_OVRD_HELP),
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_MANUAL_STRING),   value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_AUTO_STRING),     value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      suppressif NOT ideqval SystemConfig.PchPcieSnoopLatencyOverrideMode[OFFSET_1] == 1;
        numeric varid = SystemConfig.PchPcieSnoopLatencyOverrideValue[OFFSET_1],
          prompt      = STRING_TOKEN(STR_PCH_PCIE_SL_VAL_PROMPT),
          help        = STRING_TOKEN(STR_PCH_PCIE_SL_VAL_HELP),
          flags       = RESET_REQUIRED,
          minimum     = 0,
          maximum     = 1023,
          step        = 1,
          default     = 60,
        endnumeric;

        oneof varid   = SystemConfig.PchPcieSnoopLatencyOverrideMultiplier[OFFSET_1],
          prompt      = STRING_TOKEN(STR_PCH_PCIE_SL_SCALE_PROMPT),
          help        = STRING_TOKEN(STR_PCH_PCIE_SL_SCALE_HELP),
          option text = STRING_TOKEN(STR_LTR_SCALE_0), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_LTR_SCALE_1), value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_LTR_SCALE_2), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_LTR_SCALE_3), value = 3, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_LTR_SCALE_4), value = 4, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_LTR_SCALE_5), value = 5, flags = RESET_REQUIRED;
        endoneof;
      endif;

      oneof varid   = SystemConfig.PchPcieNonSnoopLatencyOverrideMode[OFFSET_1],
        prompt      = STRING_TOKEN (STR_PCH_PCIE_NSL_OVRD_PROMPT),
        help        = STRING_TOKEN (STR_PCH_PCIE_NSL_OVRD_HELP),
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_MANUAL_STRING),   value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_AUTO_STRING),     value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      suppressif NOT ideqval SystemConfig.PchPcieNonSnoopLatencyOverrideMode[OFFSET_1] == 1;
        numeric varid = SystemConfig.PchPcieNonSnoopLatencyOverrideValue[OFFSET_1],
          prompt      = STRING_TOKEN(STR_PCH_PCIE_NSL_VAL_PROMPT),
          help        = STRING_TOKEN(STR_PCH_PCIE_NSL_VAL_HELP),
          flags       = RESET_REQUIRED,
          minimum     = 0,
          maximum     = 1023,
          step        = 1,
          default     = 60,
        endnumeric;

        oneof varid   = SystemConfig.PchPcieNonSnoopLatencyOverrideMultiplier[OFFSET_1],
          prompt      = STRING_TOKEN(STR_PCH_PCIE_NSL_SCALE_PROMPT),
          help        = STRING_TOKEN(STR_PCH_PCIE_NSL_SCALE_HELP),
          option text = STRING_TOKEN(STR_LTR_SCALE_0), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_LTR_SCALE_1), value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_LTR_SCALE_2), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_LTR_SCALE_3), value = 3, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_LTR_SCALE_4), value = 4, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_LTR_SCALE_5), value = 5, flags = RESET_REQUIRED;
        endoneof;
      endif;
    endif;

    oneof varid   = SystemConfig.PchPcieLtrConfigLock[OFFSET_1],
      prompt   = STRING_TOKEN (STR_PCH_PCIE_LTRLOCK_PROMPT),
      help     = STRING_TOKEN (STR_PCH_PCIE_LTRLOCK_HELP),
      option text = STRING_TOKEN(STR_DISABLED),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = RESET_REQUIRED;
    endoneof;
//[-start-160506-IB03090427-add]//
    oneof varid   = SystemConfig.PcieRootPortSelectableDeemphasis[OFFSET_1],
      prompt   = STRING_TOKEN (STR_PCH_PCIE_SD_PROMPT),
      help     = STRING_TOKEN (STR_PCH_PCIE_SD_HELP),
      option text = STRING_TOKEN(STR_DISABLED),  value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;
//[-end-160506-IB03090427-add]//
  endif;
endform; //End of PCIERP2_OPTIONS_FORM_ID

//------------------------------------------------------------------------------------

form formid       = PCIERP3_OPTIONS_FORM_ID,
  title           = STRING_TOKEN(STR_PCH_PCIERP3_PROMPT);


//[-start-160317-IB03090425-modify]//
  oneof varid   = SystemConfig.PcieRootPortEn[OFFSET_2],
    prompt      = STRING_TOKEN(STR_PCH_PCIERP3_PROMPT),
    help        = STRING_TOKEN(STR_PCH_PCIERP_HELP),
//[-start-160506-IB03090427-modify]//
//[-start-160603-IB07400740-modify]//
    //
    // Set default as Auto for auto detect
    //
//#if !BXTI_PF_ENABLE
    option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
    option text = STRING_TOKEN(STR_ENABLE), value = 1, flags = RESET_REQUIRED;
    option text = STRING_TOKEN(STR_AUTOMATIC), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
//#else
//    option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
//    option text = STRING_TOKEN(STR_ENABLE), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
//    option text = STRING_TOKEN(STR_AUTOMATIC), value = 2, flags = RESET_REQUIRED;
//#endif
//[-end-160603-IB07400740-modify]//
//[-end-160506-IB03090427-modify]//
  endoneof;

  text
    help  = STRING_TOKEN(STR_EMPTY_STRING),
    text  = STRING_TOKEN(STR_DIS_TO_EN_HELP),
    flags = 0,
    key   = 0;
//[-end-160317-IB03090425-modify]//

  suppressif ideqval SystemConfig.PcieRootPortEn[OFFSET_2] == 0x0;
    oneof varid   = SystemConfig.PcieRootPortAspm[OFFSET_2],
      prompt      = STRING_TOKEN(STR_PCIE_ASPM_PROMPT),
      help        = STRING_TOKEN(STR_PCIE_ASPM_HELP),
      option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_PCIE_ASPM_L0S_STRING), value = 1, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_PCIE_ASPM_L1_STRING), value = 2, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_PCIE_ASPM_L0SL1_STRING), value = 3, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_AUTOMATIC), value = 4, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;

    oneof varid   = SystemConfig.PcieRootPortL1SubStates[OFFSET_2],
      prompt      = STRING_TOKEN(STR_PCIE_L1SUB_PROMPT),
      help        = STRING_TOKEN(STR_PCIE_L1SUB_HELP),
      option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_PCIE_L1SUB_1_STRING), value = 1, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_PCIE_L1SUB_2_STRING), value = 2, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_PCIE_L1SUB_1_2_STRING), value = 3, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;

    oneof varid   = SystemConfig.PcieRootPortACS[OFFSET_2],
      prompt      = STRING_TOKEN(STR_PCIE_ACS_PROMPT),
      help        = STRING_TOKEN(STR_PCIE_ACS_HELP),
      option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;

    oneof varid   = SystemConfig.PcieRootPortURE[OFFSET_2],
      prompt      = STRING_TOKEN(STR_PCH_PCIE_URE_PROMPT),
      help        = STRING_TOKEN(STR_PCH_PCIE_URE_HELP),
      option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLE), value = 1, flags = RESET_REQUIRED;
    endoneof;

    oneof varid   = SystemConfig.PcieRootPortFEE[OFFSET_2],
      prompt      = STRING_TOKEN(STR_PCH_PCIE_FEE_PROMPT),
      help        = STRING_TOKEN(STR_PCH_PCIE_FEE_HELP),
      option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLE), value = 1, flags = RESET_REQUIRED;
    endoneof;

    oneof varid   = SystemConfig.PcieRootPortNFE[OFFSET_2],
      prompt      = STRING_TOKEN(STR_PCH_PCIE_NFE_PROMPT),
      help        = STRING_TOKEN(STR_PCH_PCIE_NFE_HELP),
      option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLE), value = 1, flags = RESET_REQUIRED;
    endoneof;

    oneof varid   = SystemConfig.PcieRootPortCEE[OFFSET_2],
      prompt      = STRING_TOKEN(STR_PCH_PCIE_CEE_PROMPT),
      help        = STRING_TOKEN(STR_PCH_PCIE_CEE_HELP),
      option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLE), value = 1, flags = RESET_REQUIRED;
    endoneof;

    oneof varid   = SystemConfig.PcieRootPortCTD[OFFSET_2],
      prompt      = STRING_TOKEN(STR_PCH_PCIE_CTD_PROMPT),
      help        = STRING_TOKEN(STR_PCH_PCIE_CTD_HELP),
      option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
    endoneof;

    oneof varid   = SystemConfig.PcieRootPortSFE[OFFSET_2],
      prompt      = STRING_TOKEN(STR_PCH_PCIE_SFE_PROMPT),
      help        = STRING_TOKEN(STR_PCH_PCIE_SFE_HELP),
      option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLE), value = 1, flags = RESET_REQUIRED;
    endoneof;

    oneof varid   = SystemConfig.PcieRootPortSNE[OFFSET_2],
      prompt      = STRING_TOKEN(STR_PCH_PCIE_SNE_PROMPT),
      help        = STRING_TOKEN(STR_PCH_PCIE_SNE_HELP),
      option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLE), value = 1, flags = RESET_REQUIRED;
    endoneof;

    oneof varid   = SystemConfig.PcieRootPortSCE[OFFSET_2],
      prompt      = STRING_TOKEN(STR_PCH_PCIE_SCE_PROMPT),
      help        = STRING_TOKEN(STR_PCH_PCIE_SCE_HELP),
      option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLE), value = 1, flags = RESET_REQUIRED;
    endoneof;

    oneof varid   = SystemConfig.PcieRootPortPMCE[OFFSET_2],
      prompt      = STRING_TOKEN(STR_PCH_PCIE_PMCE_PROMPT),
      help        = STRING_TOKEN(STR_PCH_PCIE_PMCE_HELP),
      option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLE), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;

    oneof varid   = SystemConfig.PcieRootPortHPE[OFFSET_2],
      prompt      = STRING_TOKEN(STR_PCH_PCIE_HPE_PROMPT),
      help        = STRING_TOKEN(STR_PCH_PCIE_HPE_HELP),
      option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLE), value = 1, flags = RESET_REQUIRED;
    endoneof;

    oneof varid   = SystemConfig.PcieRootPortSpeed[OFFSET_2],
      prompt      = STRING_TOKEN (STR_PCIE_SPEED_PROMPT),
      help        = STRING_TOKEN (STR_PCIE_SPEED_HELP),
      option text = STRING_TOKEN (STR_AUTO), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN (STR_GEN1), value = 1, flags = RESET_REQUIRED;
      option text = STRING_TOKEN (STR_GEN2), value = 2, flags = RESET_REQUIRED;
//[-start-160801-IB03090430-remove]//
//      option text = STRING_TOKEN (STR_GEN3), value = 3, flags = RESET_REQUIRED;
//[-end-160801-IB03090430-remove]//
    endoneof;

    oneof varid   = SystemConfig.PcieRootPortTHS[OFFSET_2],
      prompt      = STRING_TOKEN(STR_PCH_PCIE_THS_PROMPT),
      help        = STRING_TOKEN(STR_PCH_PCIE_THS_HELP),
      option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLE), value = 1, flags = RESET_REQUIRED;
    endoneof;

    numeric varid = SystemConfig.PcieExtraBusRsvd[OFFSET_2],
      prompt      = STRING_TOKEN (STR_PCH_PCIE_RBUS_PROMPT),
      help        = STRING_TOKEN (STR_PCH_PCIE_RBUS_HELP),
      minimum     = 0,
      maximum     = 7,
      step        = 1,    // Stepping of 0 equates to a manual entering of a value, otherwise it will auto-increment with a left/right arrow
      default     = 0,    // default no extra bus reserved
    endnumeric;

    numeric varid = SystemConfig.PcieMemRsvd[OFFSET_2],
      prompt      = STRING_TOKEN (STR_PCH_PCIE_RMEM_PROMPT),
      help        = STRING_TOKEN (STR_PCH_PCIE_RMEM_HELP),
      minimum     = 1,
      maximum     = 20,
      step        = 1,    // Stepping of 0 equates to a manual entering of a value, otherwise it will auto-increment with a left/right arrow
      default     = 10,   // Default 10MB Memory Reserved
    endnumeric;

    numeric varid = SystemConfig.PcieIoRsvd[OFFSET_2],
      prompt      = STRING_TOKEN (STR_PCH_PCIE_RVIO_PROMPT),
      help        = STRING_TOKEN (STR_PCH_PCIE_RVIO_HELP),
      minimum     = 4,
      maximum     = 20,
      step        = 4,    // Stepping of 0 equates to a manual entering of a value, otherwise it will auto-increment with a left/right arrow
      default     = 4,    // Default 4K IO Reserved
    endnumeric;

  subtitle text = STRING_TOKEN(STR_PCH_PCIE_LTR_CONFIG);
  
    oneof varid   = SystemConfig.PchPcieLtrEnable[OFFSET_2],
      prompt   = STRING_TOKEN (STR_PCH_PCIE_LTR_PROMPT),
      help     = STRING_TOKEN (STR_PCH_PCIE_LTR_HELP),
      option text = STRING_TOKEN(STR_DISABLED),  value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;

    suppressif ideqval SystemConfig.PchPcieLtrEnable[OFFSET_2] == 0;
      oneof varid   = SystemConfig.PchPcieSnoopLatencyOverrideMode[OFFSET_2],
        prompt      = STRING_TOKEN (STR_PCH_PCIE_SL_OVRD_PROMPT),
        help        = STRING_TOKEN (STR_PCH_PCIE_SL_OVRD_HELP),
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_MANUAL_STRING),   value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_AUTO_STRING),     value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      suppressif NOT ideqval SystemConfig.PchPcieSnoopLatencyOverrideMode[OFFSET_2] == 1;
        numeric varid = SystemConfig.PchPcieSnoopLatencyOverrideValue[0],
          prompt      = STRING_TOKEN(STR_PCH_PCIE_SL_VAL_PROMPT),
          help        = STRING_TOKEN(STR_PCH_PCIE_SL_VAL_HELP),
          flags       = RESET_REQUIRED,
          minimum     = 0,
          maximum     = 1023,
          step        = 1,
          default     = 60,
        endnumeric;

        oneof varid   = SystemConfig.PchPcieSnoopLatencyOverrideMultiplier[OFFSET_2],
          prompt      = STRING_TOKEN(STR_PCH_PCIE_SL_SCALE_PROMPT),
          help        = STRING_TOKEN(STR_PCH_PCIE_SL_SCALE_HELP),
          option text = STRING_TOKEN(STR_LTR_SCALE_0), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_LTR_SCALE_1), value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_LTR_SCALE_2), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_LTR_SCALE_3), value = 3, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_LTR_SCALE_4), value = 4, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_LTR_SCALE_5), value = 5, flags = RESET_REQUIRED;
        endoneof;
      endif;

      oneof varid   = SystemConfig.PchPcieNonSnoopLatencyOverrideMode[OFFSET_2],
        prompt      = STRING_TOKEN (STR_PCH_PCIE_NSL_OVRD_PROMPT),
        help        = STRING_TOKEN (STR_PCH_PCIE_NSL_OVRD_HELP),
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_MANUAL_STRING),   value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_AUTO_STRING),     value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      suppressif NOT ideqval SystemConfig.PchPcieNonSnoopLatencyOverrideMode[OFFSET_2] == 1;
        numeric varid = SystemConfig.PchPcieNonSnoopLatencyOverrideValue[OFFSET_2],
          prompt      = STRING_TOKEN(STR_PCH_PCIE_NSL_VAL_PROMPT),
          help        = STRING_TOKEN(STR_PCH_PCIE_NSL_VAL_HELP),
          flags       = RESET_REQUIRED,
          minimum     = 0,
          maximum     = 1023,
          step        = 1,
          default     = 60,
        endnumeric;

        oneof varid   = SystemConfig.PchPcieNonSnoopLatencyOverrideMultiplier[OFFSET_2],
          prompt      = STRING_TOKEN(STR_PCH_PCIE_NSL_SCALE_PROMPT),
          help        = STRING_TOKEN(STR_PCH_PCIE_NSL_SCALE_HELP),
          option text = STRING_TOKEN(STR_LTR_SCALE_0), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_LTR_SCALE_1), value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_LTR_SCALE_2), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_LTR_SCALE_3), value = 3, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_LTR_SCALE_4), value = 4, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_LTR_SCALE_5), value = 5, flags = RESET_REQUIRED;
        endoneof;
      endif;
    endif;

    oneof varid   = SystemConfig.PchPcieLtrConfigLock[OFFSET_2],
      prompt   = STRING_TOKEN (STR_PCH_PCIE_LTRLOCK_PROMPT),
      help     = STRING_TOKEN (STR_PCH_PCIE_LTRLOCK_HELP),
      option text = STRING_TOKEN(STR_DISABLED),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = RESET_REQUIRED;
    endoneof;
//[-start-160506-IB03090427-add]//
    oneof varid   = SystemConfig.PcieRootPortSelectableDeemphasis[OFFSET_2],
      prompt   = STRING_TOKEN (STR_PCH_PCIE_SD_PROMPT),
      help     = STRING_TOKEN (STR_PCH_PCIE_SD_HELP),
      option text = STRING_TOKEN(STR_DISABLED),  value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;
//[-end-160506-IB03090427-add]//
  endif;
endform; //End of PCIERP3_OPTIONS_FORM_ID

//------------------------------------------------------------------------------------

form formid       = PCIERP4_OPTIONS_FORM_ID,
  title           = STRING_TOKEN(STR_PCH_PCIERP4_PROMPT);


//[-start-160317-IB03090425-modify]//
  oneof varid   = SystemConfig.PcieRootPortEn[OFFSET_3],
    prompt      = STRING_TOKEN(STR_PCH_PCIERP4_PROMPT),
    help        = STRING_TOKEN(STR_PCH_PCIERP_HELP),
//[-start-160506-IB03090427-modify]//
//[-start-160603-IB07400740-modify]//
    //
    // Set default as Auto for auto detect
    //
//#if !BXTI_PF_ENABLE
    option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
    option text = STRING_TOKEN(STR_ENABLE), value = 1, flags = RESET_REQUIRED;
    option text = STRING_TOKEN(STR_AUTOMATIC), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
//#else
//    option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
//    option text = STRING_TOKEN(STR_ENABLE), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
//    option text = STRING_TOKEN(STR_AUTOMATIC), value = 2, flags = RESET_REQUIRED;
//#endif
//[-end-160603-IB07400740-modify]//
//[-end-160506-IB03090427-modify]//
  endoneof;

  text
    help  = STRING_TOKEN(STR_EMPTY_STRING),
    text  = STRING_TOKEN(STR_DIS_TO_EN_HELP),
    flags = 0,
    key   = 0;
//[-end-160317-IB03090425-modify]//

  suppressif ideqval SystemConfig.PcieRootPortEn[OFFSET_3] == 0x0;
    oneof varid   = SystemConfig.PcieRootPortAspm[OFFSET_3],
      prompt      = STRING_TOKEN(STR_PCIE_ASPM_PROMPT),
      help        = STRING_TOKEN(STR_PCIE_ASPM_HELP),
      option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_PCIE_ASPM_L0S_STRING), value = 1, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_PCIE_ASPM_L1_STRING), value = 2, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_PCIE_ASPM_L0SL1_STRING), value = 3, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_AUTOMATIC), value = 4, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;

    oneof varid   = SystemConfig.PcieRootPortL1SubStates[OFFSET_3],
      prompt      = STRING_TOKEN(STR_PCIE_L1SUB_PROMPT),
      help        = STRING_TOKEN(STR_PCIE_L1SUB_HELP),
      option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_PCIE_L1SUB_1_STRING), value = 1, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_PCIE_L1SUB_2_STRING), value = 2, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_PCIE_L1SUB_1_2_STRING), value = 3, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;

    oneof varid   = SystemConfig.PcieRootPortACS[OFFSET_3],
      prompt      = STRING_TOKEN(STR_PCIE_ACS_PROMPT),
      help        = STRING_TOKEN(STR_PCIE_ACS_HELP),
      option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;

    oneof varid   = SystemConfig.PcieRootPortURE[OFFSET_3],
      prompt      = STRING_TOKEN(STR_PCH_PCIE_URE_PROMPT),
      help        = STRING_TOKEN(STR_PCH_PCIE_URE_HELP),
      option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLE), value = 1, flags = RESET_REQUIRED;
    endoneof;

    oneof varid   = SystemConfig.PcieRootPortFEE[OFFSET_3],
      prompt      = STRING_TOKEN(STR_PCH_PCIE_FEE_PROMPT),
      help        = STRING_TOKEN(STR_PCH_PCIE_FEE_HELP),
      option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLE), value = 1, flags = RESET_REQUIRED;
    endoneof;

    oneof varid   = SystemConfig.PcieRootPortNFE[OFFSET_3],
      prompt      = STRING_TOKEN(STR_PCH_PCIE_NFE_PROMPT),
      help        = STRING_TOKEN(STR_PCH_PCIE_NFE_HELP),
      option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLE), value = 1, flags = RESET_REQUIRED;
    endoneof;

    oneof varid   = SystemConfig.PcieRootPortCEE[OFFSET_3],
      prompt      = STRING_TOKEN(STR_PCH_PCIE_CEE_PROMPT),
      help        = STRING_TOKEN(STR_PCH_PCIE_CEE_HELP),
      option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLE), value = 1, flags = RESET_REQUIRED;
    endoneof;

    oneof varid   = SystemConfig.PcieRootPortCTD[OFFSET_3],
      prompt      = STRING_TOKEN(STR_PCH_PCIE_CTD_PROMPT),
      help        = STRING_TOKEN(STR_PCH_PCIE_CTD_HELP),
      option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
    endoneof;

    oneof varid   = SystemConfig.PcieRootPortSFE[OFFSET_3],
      prompt      = STRING_TOKEN(STR_PCH_PCIE_SFE_PROMPT),
      help        = STRING_TOKEN(STR_PCH_PCIE_SFE_HELP),
      option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLE), value = 1, flags = RESET_REQUIRED;
    endoneof;

    oneof varid   = SystemConfig.PcieRootPortSNE[OFFSET_3],
      prompt      = STRING_TOKEN(STR_PCH_PCIE_SNE_PROMPT),
      help        = STRING_TOKEN(STR_PCH_PCIE_SNE_HELP),
      option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLE), value = 1, flags = RESET_REQUIRED;
    endoneof;

    oneof varid   = SystemConfig.PcieRootPortSCE[OFFSET_3],
      prompt      = STRING_TOKEN(STR_PCH_PCIE_SCE_PROMPT),
      help        = STRING_TOKEN(STR_PCH_PCIE_SCE_HELP),
      option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLE), value = 1, flags = RESET_REQUIRED;
    endoneof;

    oneof varid   = SystemConfig.PcieRootPortPMCE[OFFSET_3],
      prompt      = STRING_TOKEN(STR_PCH_PCIE_PMCE_PROMPT),
      help        = STRING_TOKEN(STR_PCH_PCIE_PMCE_HELP),
      option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLE), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;

    oneof varid   = SystemConfig.PcieRootPortHPE[OFFSET_3],
      prompt      = STRING_TOKEN(STR_PCH_PCIE_HPE_PROMPT),
      help        = STRING_TOKEN(STR_PCH_PCIE_HPE_HELP),
      option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLE), value = 1, flags = RESET_REQUIRED;
    endoneof;

    oneof varid   = SystemConfig.PcieRootPortSpeed[OFFSET_3],
      prompt      = STRING_TOKEN (STR_PCIE_SPEED_PROMPT),
      help        = STRING_TOKEN (STR_PCIE_SPEED_HELP),
      option text = STRING_TOKEN (STR_AUTO), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN (STR_GEN1), value = 1, flags = RESET_REQUIRED;
      option text = STRING_TOKEN (STR_GEN2), value = 2, flags = RESET_REQUIRED;
    endoneof;

    oneof varid   = SystemConfig.PcieRootPortTHS[OFFSET_3],
      prompt      = STRING_TOKEN(STR_PCH_PCIE_THS_PROMPT),
      help        = STRING_TOKEN(STR_PCH_PCIE_THS_HELP),
      option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLE), value = 1, flags = RESET_REQUIRED;
    endoneof;

    numeric varid = SystemConfig.PcieExtraBusRsvd[OFFSET_3],
      prompt      = STRING_TOKEN (STR_PCH_PCIE_RBUS_PROMPT),
      help        = STRING_TOKEN (STR_PCH_PCIE_RBUS_HELP),
      minimum     = 0,
      maximum     = 7,
      step        = 1,    // Stepping of 0 equates to a manual entering of a value, otherwise it will auto-increment with a left/right arrow
      default     = 0,    // default no extra bus reserved
    endnumeric;

    numeric varid = SystemConfig.PcieMemRsvd[OFFSET_3],
      prompt      = STRING_TOKEN (STR_PCH_PCIE_RMEM_PROMPT),
      help        = STRING_TOKEN (STR_PCH_PCIE_RMEM_HELP),
      minimum     = 1,
      maximum     = 20,
      step        = 1,    // Stepping of 0 equates to a manual entering of a value, otherwise it will auto-increment with a left/right arrow
      default     = 10,   // Default 10MB Memory Reserved
    endnumeric;

    numeric varid = SystemConfig.PcieIoRsvd[OFFSET_3],
      prompt      = STRING_TOKEN (STR_PCH_PCIE_RVIO_PROMPT),
      help        = STRING_TOKEN (STR_PCH_PCIE_RVIO_HELP),
      minimum     = 4,
      maximum     = 20,
      step        = 4,    // Stepping of 0 equates to a manual entering of a value, otherwise it will auto-increment with a left/right arrow
      default     = 4,    // Default 4K IO Reserved
    endnumeric;

  subtitle text = STRING_TOKEN(STR_PCH_PCIE_LTR_CONFIG);
  
    oneof varid   = SystemConfig.PchPcieLtrEnable[OFFSET_3],
      prompt   = STRING_TOKEN (STR_PCH_PCIE_LTR_PROMPT),
      help     = STRING_TOKEN (STR_PCH_PCIE_LTR_HELP),
      option text = STRING_TOKEN(STR_DISABLED),  value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;

    suppressif ideqval SystemConfig.PchPcieLtrEnable[OFFSET_3] == 0;
      oneof varid   = SystemConfig.PchPcieSnoopLatencyOverrideMode[OFFSET_3],
        prompt      = STRING_TOKEN (STR_PCH_PCIE_SL_OVRD_PROMPT),
        help        = STRING_TOKEN (STR_PCH_PCIE_SL_OVRD_HELP),
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_MANUAL_STRING),   value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_AUTO_STRING),     value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      suppressif NOT ideqval SystemConfig.PchPcieSnoopLatencyOverrideMode[OFFSET_3] == 1;
        numeric varid = SystemConfig.PchPcieSnoopLatencyOverrideValue[OFFSET_3],
          prompt      = STRING_TOKEN(STR_PCH_PCIE_SL_VAL_PROMPT),
          help        = STRING_TOKEN(STR_PCH_PCIE_SL_VAL_HELP),
          flags       = RESET_REQUIRED,
          minimum     = 0,
          maximum     = 1023,
          step        = 1,
          default     = 60,
        endnumeric;

        oneof varid   = SystemConfig.PchPcieSnoopLatencyOverrideMultiplier[OFFSET_3],
          prompt      = STRING_TOKEN(STR_PCH_PCIE_SL_SCALE_PROMPT),
          help        = STRING_TOKEN(STR_PCH_PCIE_SL_SCALE_HELP),
          option text = STRING_TOKEN(STR_LTR_SCALE_0), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_LTR_SCALE_1), value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_LTR_SCALE_2), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_LTR_SCALE_3), value = 3, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_LTR_SCALE_4), value = 4, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_LTR_SCALE_5), value = 5, flags = RESET_REQUIRED;
        endoneof;
      endif;

      oneof varid   = SystemConfig.PchPcieNonSnoopLatencyOverrideMode[OFFSET_3],
        prompt      = STRING_TOKEN (STR_PCH_PCIE_NSL_OVRD_PROMPT),
        help        = STRING_TOKEN (STR_PCH_PCIE_NSL_OVRD_HELP),
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_MANUAL_STRING),   value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_AUTO_STRING),     value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      suppressif NOT ideqval SystemConfig.PchPcieNonSnoopLatencyOverrideMode[OFFSET_3] == 1;
        numeric varid = SystemConfig.PchPcieNonSnoopLatencyOverrideValue[OFFSET_3],
          prompt      = STRING_TOKEN(STR_PCH_PCIE_NSL_VAL_PROMPT),
          help        = STRING_TOKEN(STR_PCH_PCIE_NSL_VAL_HELP),
          flags       = RESET_REQUIRED,
          minimum     = 0,
          maximum     = 1023,
          step        = 1,
          default     = 60,
        endnumeric;

        oneof varid   = SystemConfig.PchPcieNonSnoopLatencyOverrideMultiplier[OFFSET_3],
          prompt      = STRING_TOKEN(STR_PCH_PCIE_NSL_SCALE_PROMPT),
          help        = STRING_TOKEN(STR_PCH_PCIE_NSL_SCALE_HELP),
          option text = STRING_TOKEN(STR_LTR_SCALE_0), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_LTR_SCALE_1), value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_LTR_SCALE_2), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_LTR_SCALE_3), value = 3, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_LTR_SCALE_4), value = 4, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_LTR_SCALE_5), value = 5, flags = RESET_REQUIRED;
        endoneof;
      endif;
    endif;

    oneof varid   = SystemConfig.PchPcieLtrConfigLock[OFFSET_3],
      prompt   = STRING_TOKEN (STR_PCH_PCIE_LTRLOCK_PROMPT),
      help     = STRING_TOKEN (STR_PCH_PCIE_LTRLOCK_HELP),
      option text = STRING_TOKEN(STR_DISABLED),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = RESET_REQUIRED;
    endoneof;
//[-start-160506-IB03090427-add]//
    oneof varid   = SystemConfig.PcieRootPortSelectableDeemphasis[OFFSET_3],
      prompt   = STRING_TOKEN (STR_PCH_PCIE_SD_PROMPT),
      help     = STRING_TOKEN (STR_PCH_PCIE_SD_HELP),
      option text = STRING_TOKEN(STR_DISABLED),  value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;
//[-end-160506-IB03090427-add]//
  endif;
endform; //End of PCIERP4_OPTIONS_FORM_ID

//--------------------------------------------------------------------------------

form formid     = PCIERP5_OPTIONS_FORM_ID,
  title         = STRING_TOKEN(STR_PCH_PCIERP5_PROMPT);
  subtitle text = STRING_TOKEN(STR_NULL_STRING);

//[-start-160317-IB03090425-modify]//
  oneof varid   = SystemConfig.PcieRootPortEn[OFFSET_4],
    prompt      = STRING_TOKEN(STR_PCH_PCIERP5_PROMPT),
    help        = STRING_TOKEN(STR_PCH_PCIERP_HELP),
//[-start-160506-IB03090427-modify]//
//[-start-160603-IB07400740-modify]//
    //
    // Set default as Auto for auto detect
    //
//#if !BXTI_PF_ENABLE
    option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
    option text = STRING_TOKEN(STR_ENABLE), value = 1, flags = RESET_REQUIRED;
    option text = STRING_TOKEN(STR_AUTOMATIC), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
//#else
//    option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
//    option text = STRING_TOKEN(STR_ENABLE), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
//    option text = STRING_TOKEN(STR_AUTOMATIC), value = 2, flags = RESET_REQUIRED;
//#endif
//[-end-160603-IB07400740-modify]//
//[-end-160506-IB03090427-modify]//
  endoneof;

  text
    help  = STRING_TOKEN(STR_EMPTY_STRING),
    text  = STRING_TOKEN(STR_DIS_TO_EN_HELP),
    flags = 0,
    key   = 0;
//[-end-160317-IB03090425-modify]//

  suppressif ideqval SystemConfig.PcieRootPortEn[OFFSET_4] == 0x0;
    oneof varid   = SystemConfig.PcieRootPortAspm[OFFSET_4],
      prompt      = STRING_TOKEN(STR_PCIE_ASPM_PROMPT),
      help        = STRING_TOKEN(STR_PCIE_ASPM_HELP),
      option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_PCIE_ASPM_L0S_STRING), value = 1, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_PCIE_ASPM_L1_STRING), value = 2, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_PCIE_ASPM_L0SL1_STRING), value = 3, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_AUTOMATIC), value = 4, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;

    oneof varid   = SystemConfig.PcieRootPortL1SubStates[OFFSET_4],
      prompt      = STRING_TOKEN(STR_PCIE_L1SUB_PROMPT),
      help        = STRING_TOKEN(STR_PCIE_L1SUB_HELP),
      option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_PCIE_L1SUB_1_STRING), value = 1, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_PCIE_L1SUB_2_STRING), value = 2, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_PCIE_L1SUB_1_2_STRING), value = 3, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;

    oneof varid   = SystemConfig.PcieRootPortACS[OFFSET_4],
      prompt      = STRING_TOKEN(STR_PCIE_ACS_PROMPT),
      help        = STRING_TOKEN(STR_PCIE_ACS_HELP),
      option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;

    oneof varid   = SystemConfig.PcieRootPortURE[OFFSET_4],
      prompt      = STRING_TOKEN(STR_PCH_PCIE_URE_PROMPT),
      help        = STRING_TOKEN(STR_PCH_PCIE_URE_HELP),
      option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLE), value = 1, flags = RESET_REQUIRED;
    endoneof;

    oneof varid   = SystemConfig.PcieRootPortFEE[OFFSET_4],
      prompt      = STRING_TOKEN(STR_PCH_PCIE_FEE_PROMPT),
      help        = STRING_TOKEN(STR_PCH_PCIE_FEE_HELP),
      option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLE), value = 1, flags = RESET_REQUIRED;
    endoneof;

    oneof varid   = SystemConfig.PcieRootPortNFE[OFFSET_4],
      prompt      = STRING_TOKEN(STR_PCH_PCIE_NFE_PROMPT),
      help        = STRING_TOKEN(STR_PCH_PCIE_NFE_HELP),
      option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLE), value = 1, flags = RESET_REQUIRED;
    endoneof;

    oneof varid   = SystemConfig.PcieRootPortCEE[OFFSET_4],
      prompt      = STRING_TOKEN(STR_PCH_PCIE_CEE_PROMPT),
      help        = STRING_TOKEN(STR_PCH_PCIE_CEE_HELP),
      option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLE), value = 1, flags = RESET_REQUIRED;
    endoneof;

    oneof varid   = SystemConfig.PcieRootPortCTD[OFFSET_4],
      prompt      = STRING_TOKEN(STR_PCH_PCIE_CTD_PROMPT),
      help        = STRING_TOKEN(STR_PCH_PCIE_CTD_HELP),
      option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
    endoneof;

    oneof varid   = SystemConfig.PcieRootPortSFE[OFFSET_4],
      prompt      = STRING_TOKEN(STR_PCH_PCIE_SFE_PROMPT),
      help        = STRING_TOKEN(STR_PCH_PCIE_SFE_HELP),
      option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLE), value = 1, flags = RESET_REQUIRED;
    endoneof;

    oneof varid   = SystemConfig.PcieRootPortSNE[OFFSET_4],
      prompt      = STRING_TOKEN(STR_PCH_PCIE_SNE_PROMPT),
      help        = STRING_TOKEN(STR_PCH_PCIE_SNE_HELP),
      option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLE), value = 1, flags = RESET_REQUIRED;
    endoneof;

    oneof varid   = SystemConfig.PcieRootPortSCE[OFFSET_4],
      prompt      = STRING_TOKEN(STR_PCH_PCIE_SCE_PROMPT),
      help        = STRING_TOKEN(STR_PCH_PCIE_SCE_HELP),
      option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLE), value = 1, flags = RESET_REQUIRED;
    endoneof;

    oneof varid   = SystemConfig.PcieRootPortPMCE[OFFSET_4],
      prompt      = STRING_TOKEN(STR_PCH_PCIE_PMCE_PROMPT),
      help        = STRING_TOKEN(STR_PCH_PCIE_PMCE_HELP),
      option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLE), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;

    oneof varid   = SystemConfig.PcieRootPortHPE[OFFSET_4],
      prompt      = STRING_TOKEN(STR_PCH_PCIE_HPE_PROMPT),
      help        = STRING_TOKEN(STR_PCH_PCIE_HPE_HELP),
      option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLE), value = 1, flags = RESET_REQUIRED;
    endoneof;

    oneof varid   = SystemConfig.PcieRootPortSpeed[OFFSET_4],
      prompt      = STRING_TOKEN (STR_PCIE_SPEED_PROMPT),
      help        = STRING_TOKEN (STR_PCIE_SPEED_HELP),
      option text = STRING_TOKEN (STR_AUTO), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN (STR_GEN1), value = 1, flags = RESET_REQUIRED;
      option text = STRING_TOKEN (STR_GEN2), value = 2, flags = RESET_REQUIRED;
    endoneof;

    oneof varid   = SystemConfig.PcieRootPortTHS[OFFSET_4],
      prompt      = STRING_TOKEN(STR_PCH_PCIE_THS_PROMPT),
      help        = STRING_TOKEN(STR_PCH_PCIE_THS_HELP),
      option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLE), value = 1, flags = RESET_REQUIRED;
    endoneof;

    numeric varid = SystemConfig.PcieExtraBusRsvd[OFFSET_4],
      prompt      = STRING_TOKEN (STR_PCH_PCIE_RBUS_PROMPT),
      help        = STRING_TOKEN (STR_PCH_PCIE_RBUS_HELP),
      minimum     = 0,
      maximum     = 7,
      step        = 1,    // Stepping of 0 equates to a manual entering of a value, otherwise it will auto-increment with a left/right arrow
      default     = 0,    // default no extra bus reserved
    endnumeric;

    numeric varid = SystemConfig.PcieMemRsvd[OFFSET_4],
      prompt      = STRING_TOKEN (STR_PCH_PCIE_RMEM_PROMPT),
      help        = STRING_TOKEN (STR_PCH_PCIE_RMEM_HELP),
      minimum     = 1,
      maximum     = 20,
      step        = 1,    // Stepping of 0 equates to a manual entering of a value, otherwise it will auto-increment with a left/right arrow
      default     = 10,   // Default 10MB Memory Reserved
    endnumeric;

    numeric varid = SystemConfig.PcieIoRsvd[OFFSET_4],
      prompt      = STRING_TOKEN (STR_PCH_PCIE_RVIO_PROMPT),
      help        = STRING_TOKEN (STR_PCH_PCIE_RVIO_HELP),
      minimum     = 4,
      maximum     = 20,
      step        = 4,    // Stepping of 0 equates to a manual entering of a value, otherwise it will auto-increment with a left/right arrow
      default     = 4,    // Default 4K IO Reserved
    endnumeric;

  subtitle text = STRING_TOKEN(STR_PCH_PCIE_LTR_CONFIG);
  
    oneof varid   = SystemConfig.PchPcieLtrEnable[OFFSET_4],
      prompt   = STRING_TOKEN (STR_PCH_PCIE_LTR_PROMPT),
      help     = STRING_TOKEN (STR_PCH_PCIE_LTR_HELP),
      option text = STRING_TOKEN(STR_DISABLED),  value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;

    suppressif ideqval SystemConfig.PchPcieLtrEnable[OFFSET_4] == 0;
      oneof varid   = SystemConfig.PchPcieSnoopLatencyOverrideMode[OFFSET_4],
        prompt      = STRING_TOKEN (STR_PCH_PCIE_SL_OVRD_PROMPT),
        help        = STRING_TOKEN (STR_PCH_PCIE_SL_OVRD_HELP),
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_MANUAL_STRING),   value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_AUTO_STRING),     value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      suppressif NOT ideqval SystemConfig.PchPcieSnoopLatencyOverrideMode[OFFSET_4] == 1;
        numeric varid = SystemConfig.PchPcieSnoopLatencyOverrideValue[OFFSET_4],
          prompt      = STRING_TOKEN(STR_PCH_PCIE_SL_VAL_PROMPT),
          help        = STRING_TOKEN(STR_PCH_PCIE_SL_VAL_HELP),
          flags       = RESET_REQUIRED,
          minimum     = 0,
          maximum     = 1023,
          step        = 1,
          default     = 60,
        endnumeric;

        oneof varid   = SystemConfig.PchPcieSnoopLatencyOverrideMultiplier[OFFSET_4],
          prompt      = STRING_TOKEN(STR_PCH_PCIE_SL_SCALE_PROMPT),
          help        = STRING_TOKEN(STR_PCH_PCIE_SL_SCALE_HELP),
          option text = STRING_TOKEN(STR_LTR_SCALE_0), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_LTR_SCALE_1), value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_LTR_SCALE_2), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_LTR_SCALE_3), value = 3, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_LTR_SCALE_4), value = 4, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_LTR_SCALE_5), value = 5, flags = RESET_REQUIRED;
        endoneof;
      endif;

      oneof varid   = SystemConfig.PchPcieNonSnoopLatencyOverrideMode[OFFSET_4],
        prompt      = STRING_TOKEN (STR_PCH_PCIE_NSL_OVRD_PROMPT),
        help        = STRING_TOKEN (STR_PCH_PCIE_NSL_OVRD_HELP),
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_MANUAL_STRING),   value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_AUTO_STRING),     value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      suppressif NOT ideqval SystemConfig.PchPcieNonSnoopLatencyOverrideMode[OFFSET_4] == 1;
        numeric varid = SystemConfig.PchPcieNonSnoopLatencyOverrideValue[OFFSET_4],
          prompt      = STRING_TOKEN(STR_PCH_PCIE_NSL_VAL_PROMPT),
          help        = STRING_TOKEN(STR_PCH_PCIE_NSL_VAL_HELP),
          flags       = RESET_REQUIRED,
          minimum     = 0,
          maximum     = 1023,
          step        = 1,
          default     = 60,
        endnumeric;

        oneof varid   = SystemConfig.PchPcieNonSnoopLatencyOverrideMultiplier[OFFSET_4],
          prompt      = STRING_TOKEN(STR_PCH_PCIE_NSL_SCALE_PROMPT),
          help        = STRING_TOKEN(STR_PCH_PCIE_NSL_SCALE_HELP),
          option text = STRING_TOKEN(STR_LTR_SCALE_0), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_LTR_SCALE_1), value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_LTR_SCALE_2), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_LTR_SCALE_3), value = 3, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_LTR_SCALE_4), value = 4, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_LTR_SCALE_5), value = 5, flags = RESET_REQUIRED;
        endoneof;
      endif;
    endif;

    oneof varid   = SystemConfig.PchPcieLtrConfigLock[OFFSET_4],
      prompt   = STRING_TOKEN (STR_PCH_PCIE_LTRLOCK_PROMPT),
      help     = STRING_TOKEN (STR_PCH_PCIE_LTRLOCK_HELP),
      option text = STRING_TOKEN(STR_DISABLED),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = RESET_REQUIRED;
    endoneof;
//[-start-160506-IB03090427-add]//
    oneof varid   = SystemConfig.PcieRootPortSelectableDeemphasis[OFFSET_4],
      prompt   = STRING_TOKEN (STR_PCH_PCIE_SD_PROMPT),
      help     = STRING_TOKEN (STR_PCH_PCIE_SD_HELP),
      option text = STRING_TOKEN(STR_DISABLED),  value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;
//[-end-160506-IB03090427-add]//
  endif;
endform; //End of PCIERP5_OPTIONS_FORM_ID

//------------------------------------------------------------------------------

form formid     = PCIERP6_OPTIONS_FORM_ID,
  title         = STRING_TOKEN(STR_PCH_PCIERP6_PROMPT);
  subtitle text = STRING_TOKEN(STR_NULL_STRING);

//[-start-160317-IB03090425-modify]//
  oneof varid   = SystemConfig.PcieRootPortEn[OFFSET_5],
    prompt      = STRING_TOKEN(STR_PCH_PCIERP6_PROMPT),
    help        = STRING_TOKEN(STR_PCH_PCIERP_HELP),
//[-start-160506-IB03090427-modify]//
//[-start-160603-IB07400740-modify]//
    //
    // Set default as Auto for auto detect
    //
//#if !BXTI_PF_ENABLE
    option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
    option text = STRING_TOKEN(STR_ENABLE), value = 1, flags = RESET_REQUIRED;
    option text = STRING_TOKEN(STR_AUTOMATIC), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
//#else
//    option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
//    option text = STRING_TOKEN(STR_ENABLE), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
//    option text = STRING_TOKEN(STR_AUTOMATIC), value = 2, flags = RESET_REQUIRED;
//#endif
//[-end-160603-IB07400740-modify]//
//[-end-160506-IB03090427-modify]//
  endoneof;

  text
    help  = STRING_TOKEN(STR_EMPTY_STRING),
    text  = STRING_TOKEN(STR_DIS_TO_EN_HELP),
    flags = 0,
    key   = 0;
//[-end-160317-IB03090425-modify]//

  suppressif ideqval SystemConfig.PcieRootPortEn[OFFSET_5] == 0x0;
    oneof varid   = SystemConfig.PcieRootPortAspm[OFFSET_5],
      prompt      = STRING_TOKEN(STR_PCIE_ASPM_PROMPT),
      help        = STRING_TOKEN(STR_PCIE_ASPM_HELP),
      option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_PCIE_ASPM_L0S_STRING), value = 1, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_PCIE_ASPM_L1_STRING), value = 2, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_PCIE_ASPM_L0SL1_STRING), value = 3, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_AUTOMATIC), value = 4, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;

    oneof varid   = SystemConfig.PcieRootPortL1SubStates[OFFSET_5],
      prompt      = STRING_TOKEN(STR_PCIE_L1SUB_PROMPT),
      help        = STRING_TOKEN(STR_PCIE_L1SUB_HELP),
      option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_PCIE_L1SUB_1_STRING), value = 1, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_PCIE_L1SUB_2_STRING), value = 2, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_PCIE_L1SUB_1_2_STRING), value = 3, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;

    oneof varid   = SystemConfig.PcieRootPortACS[OFFSET_5],
      prompt      = STRING_TOKEN(STR_PCIE_ACS_PROMPT),
      help        = STRING_TOKEN(STR_PCIE_ACS_HELP),
      option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;

    oneof varid   = SystemConfig.PcieRootPortURE[OFFSET_5],
      prompt      = STRING_TOKEN(STR_PCH_PCIE_URE_PROMPT),
      help        = STRING_TOKEN(STR_PCH_PCIE_URE_HELP),
      option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLE), value = 1, flags = RESET_REQUIRED;
    endoneof;

    oneof varid   = SystemConfig.PcieRootPortFEE[OFFSET_5],
      prompt      = STRING_TOKEN(STR_PCH_PCIE_FEE_PROMPT),
      help        = STRING_TOKEN(STR_PCH_PCIE_FEE_HELP),
      option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLE), value = 1, flags = RESET_REQUIRED;
    endoneof;

    oneof varid   = SystemConfig.PcieRootPortNFE[OFFSET_5],
      prompt      = STRING_TOKEN(STR_PCH_PCIE_NFE_PROMPT),
      help        = STRING_TOKEN(STR_PCH_PCIE_NFE_HELP),
      option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLE), value = 1, flags = RESET_REQUIRED;
    endoneof;

    oneof varid   = SystemConfig.PcieRootPortCEE[OFFSET_5],
      prompt      = STRING_TOKEN(STR_PCH_PCIE_CEE_PROMPT),
      help        = STRING_TOKEN(STR_PCH_PCIE_CEE_HELP),
      option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLE), value = 1, flags = RESET_REQUIRED;
    endoneof;

    oneof varid   = SystemConfig.PcieRootPortCTD[OFFSET_5],
      prompt      = STRING_TOKEN(STR_PCH_PCIE_CTD_PROMPT),
      help        = STRING_TOKEN(STR_PCH_PCIE_CTD_HELP),
      option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
    endoneof;

    oneof varid   = SystemConfig.PcieRootPortSFE[OFFSET_5],
      prompt      = STRING_TOKEN(STR_PCH_PCIE_SFE_PROMPT),
      help        = STRING_TOKEN(STR_PCH_PCIE_SFE_HELP),
      option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLE), value = 1, flags = RESET_REQUIRED;
    endoneof;

    oneof varid   = SystemConfig.PcieRootPortSNE[OFFSET_5],
      prompt      = STRING_TOKEN(STR_PCH_PCIE_SNE_PROMPT),
      help        = STRING_TOKEN(STR_PCH_PCIE_SNE_HELP),
      option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLE), value = 1, flags = RESET_REQUIRED;
    endoneof;

    oneof varid   = SystemConfig.PcieRootPortSCE[OFFSET_5],
      prompt      = STRING_TOKEN(STR_PCH_PCIE_SCE_PROMPT),
      help        = STRING_TOKEN(STR_PCH_PCIE_SCE_HELP),
      option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLE), value = 1, flags = RESET_REQUIRED;
    endoneof;

    oneof varid   = SystemConfig.PcieRootPortPMCE[OFFSET_5],
      prompt      = STRING_TOKEN(STR_PCH_PCIE_PMCE_PROMPT),
      help        = STRING_TOKEN(STR_PCH_PCIE_PMCE_HELP),
      option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLE), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;

    oneof varid   = SystemConfig.PcieRootPortHPE[OFFSET_5],
      prompt      = STRING_TOKEN(STR_PCH_PCIE_HPE_PROMPT),
      help        = STRING_TOKEN(STR_PCH_PCIE_HPE_HELP),
      option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLE), value = 1, flags = RESET_REQUIRED;
    endoneof;

    oneof varid   = SystemConfig.PcieRootPortSpeed[OFFSET_5],
      prompt      = STRING_TOKEN (STR_PCIE_SPEED_PROMPT),
      help        = STRING_TOKEN (STR_PCIE_SPEED_HELP),
      option text = STRING_TOKEN (STR_AUTO), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN (STR_GEN1), value = 1, flags = RESET_REQUIRED;
      option text = STRING_TOKEN (STR_GEN2), value = 2, flags = RESET_REQUIRED;
    endoneof;

    oneof varid   = SystemConfig.PcieRootPortTHS[OFFSET_5],
      prompt      = STRING_TOKEN(STR_PCH_PCIE_THS_PROMPT),
      help        = STRING_TOKEN(STR_PCH_PCIE_THS_HELP),
      option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLE), value = 1, flags = RESET_REQUIRED;
    endoneof;

    numeric varid = SystemConfig.PcieExtraBusRsvd[OFFSET_5],
      prompt      = STRING_TOKEN (STR_PCH_PCIE_RBUS_PROMPT),
      help        = STRING_TOKEN (STR_PCH_PCIE_RBUS_HELP),
      minimum     = 0,
      maximum     = 7,
      step        = 1,    // Stepping of 0 equates to a manual entering of a value, otherwise it will auto-increment with a left/right arrow
      default     = 0,    // default no extra bus reserved
    endnumeric;

    numeric varid = SystemConfig.PcieMemRsvd[OFFSET_5],
      prompt      = STRING_TOKEN (STR_PCH_PCIE_RMEM_PROMPT),
      help        = STRING_TOKEN (STR_PCH_PCIE_RMEM_HELP),
      minimum     = 1,
      maximum     = 20,
      step        = 1,    // Stepping of 0 equates to a manual entering of a value, otherwise it will auto-increment with a left/right arrow
      default     = 10,   // Default 10MB Memory Reserved
    endnumeric;

    numeric varid = SystemConfig.PcieIoRsvd[OFFSET_5],
      prompt      = STRING_TOKEN (STR_PCH_PCIE_RVIO_PROMPT),
      help        = STRING_TOKEN (STR_PCH_PCIE_RVIO_HELP),
      minimum     = 4,
      maximum     = 20,
      step        = 4,    // Stepping of 0 equates to a manual entering of a value, otherwise it will auto-increment with a left/right arrow
      default     = 4,    // Default 4K IO Reserved
    endnumeric;

  subtitle text = STRING_TOKEN(STR_PCH_PCIE_LTR_CONFIG);
  
    oneof varid   = SystemConfig.PchPcieLtrEnable[OFFSET_5],
      prompt   = STRING_TOKEN (STR_PCH_PCIE_LTR_PROMPT),
      help     = STRING_TOKEN (STR_PCH_PCIE_LTR_HELP),
      option text = STRING_TOKEN(STR_DISABLED),  value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;

    suppressif ideqval SystemConfig.PchPcieLtrEnable[OFFSET_5] == 0;
      oneof varid   = SystemConfig.PchPcieSnoopLatencyOverrideMode[OFFSET_5],
        prompt      = STRING_TOKEN (STR_PCH_PCIE_SL_OVRD_PROMPT),
        help        = STRING_TOKEN (STR_PCH_PCIE_SL_OVRD_HELP),
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_MANUAL_STRING),   value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_AUTO_STRING),     value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      suppressif NOT ideqval SystemConfig.PchPcieSnoopLatencyOverrideMode[OFFSET_5] == 1;
        numeric varid = SystemConfig.PchPcieSnoopLatencyOverrideValue[OFFSET_5],
          prompt      = STRING_TOKEN(STR_PCH_PCIE_SL_VAL_PROMPT),
          help        = STRING_TOKEN(STR_PCH_PCIE_SL_VAL_HELP),
          flags       = RESET_REQUIRED,
          minimum     = 0,
          maximum     = 1023,
          step        = 1,
          default     = 60,
        endnumeric;

        oneof varid   = SystemConfig.PchPcieSnoopLatencyOverrideMultiplier[OFFSET_5],
          prompt      = STRING_TOKEN(STR_PCH_PCIE_SL_SCALE_PROMPT),
          help        = STRING_TOKEN(STR_PCH_PCIE_SL_SCALE_HELP),
          option text = STRING_TOKEN(STR_LTR_SCALE_0), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_LTR_SCALE_1), value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_LTR_SCALE_2), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_LTR_SCALE_3), value = 3, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_LTR_SCALE_4), value = 4, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_LTR_SCALE_5), value = 5, flags = RESET_REQUIRED;
        endoneof;
      endif;

      oneof varid   = SystemConfig.PchPcieNonSnoopLatencyOverrideMode[OFFSET_5],
        prompt      = STRING_TOKEN (STR_PCH_PCIE_NSL_OVRD_PROMPT),
        help        = STRING_TOKEN (STR_PCH_PCIE_NSL_OVRD_HELP),
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_MANUAL_STRING),   value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_AUTO_STRING),     value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      suppressif NOT ideqval SystemConfig.PchPcieNonSnoopLatencyOverrideMode[OFFSET_5] == 1;
        numeric varid = SystemConfig.PchPcieNonSnoopLatencyOverrideValue[OFFSET_5],
          prompt      = STRING_TOKEN(STR_PCH_PCIE_NSL_VAL_PROMPT),
          help        = STRING_TOKEN(STR_PCH_PCIE_NSL_VAL_HELP),
          flags       = RESET_REQUIRED,
          minimum     = 0,
          maximum     = 1023,
          step        = 1,
          default     = 60,
        endnumeric;

        oneof varid   = SystemConfig.PchPcieNonSnoopLatencyOverrideMultiplier[OFFSET_5],
          prompt      = STRING_TOKEN(STR_PCH_PCIE_NSL_SCALE_PROMPT),
          help        = STRING_TOKEN(STR_PCH_PCIE_NSL_SCALE_HELP),
          option text = STRING_TOKEN(STR_LTR_SCALE_0), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_LTR_SCALE_1), value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_LTR_SCALE_2), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_LTR_SCALE_3), value = 3, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_LTR_SCALE_4), value = 4, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_LTR_SCALE_5), value = 5, flags = RESET_REQUIRED;
        endoneof;
      endif;
    endif;

    oneof varid   = SystemConfig.PchPcieLtrConfigLock[OFFSET_5],
      prompt   = STRING_TOKEN (STR_PCH_PCIE_LTRLOCK_PROMPT),
      help     = STRING_TOKEN (STR_PCH_PCIE_LTRLOCK_HELP),
      option text = STRING_TOKEN(STR_DISABLED),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = RESET_REQUIRED;
    endoneof;
//[-start-160506-IB03090427-add]//
    oneof varid   = SystemConfig.PcieRootPortSelectableDeemphasis[OFFSET_5],
      prompt   = STRING_TOKEN (STR_PCH_PCIE_SD_PROMPT),
      help     = STRING_TOKEN (STR_PCH_PCIE_SD_HELP),
      option text = STRING_TOKEN(STR_DISABLED),  value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;
//[-end-160506-IB03090427-add]//
  endif;
endform; //End of PCIERP6_OPTIONS_FORM_ID

//
// USB Configurations
//
form formid     = USB_OPTIONS_FORM_ID,
  title         = STRING_TOKEN(STR_USB_OPTIONS_FORM_TITLE);
  subtitle text = STRING_TOKEN(STR_NULL_STRING);

//[-start-160413-IB04190071-add]//
  suppressif ideqvallist SystemConfig.BootType == 0 1;
    oneof
      varid       = SystemConfig.LegacyUsbSupport,  
      prompt      = STRING_TOKEN(STR_USB_SUPPORT_STRING),
      help        = STRING_TOKEN(STR_USB_SUPPORT_UEFI_HELP),
      option text = STRING_TOKEN(STR_DISABLED_TEXT),  value = 0, flags = 0;
      option text = STRING_TOKEN(STR_ENABLED_TEXT),   value = 1, flags = DEFAULT;
    endoneof;
  endif;   

  suppressif ideqval SystemConfig.BootType == 2;
    oneof
      varid       = SystemConfig.LegacyUsbSupport,
      prompt      = STRING_TOKEN(STR_USB_SUPPORT_STRING),
      help        = STRING_TOKEN(STR_USB_SUPPORT_LEGACY_HELP),
      option text = STRING_TOKEN(STR_DISABLED_TEXT),  value = 0, flags = 0;
      option text = STRING_TOKEN(STR_ENABLED_TEXT),   value = 1, flags = DEFAULT;
      option text = STRING_TOKEN(STR_UEFI_ONLY_TEXT), value = 2, flags = 0;
    endoneof;
  endif; 
//[-end-160413-IB04190071-add]//

  //
  // XHCI support
  //
//[-start-160317-IB03090425-modify]//
//[-start-170321-IB07400848-remove]//
//  oneof varid   = SystemConfig.UsbXhciSupport,
//    prompt      = STRING_TOKEN(STR_USB_XHCI_SUPPORT_PROMPT),
//    help        = STRING_TOKEN(STR_USB_XHCI_SUPPORT_HELP),
//    option text = STRING_TOKEN(STR_ENABLE), value = 1, flags = RESET_REQUIRED;
//    option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
//  endoneof;
//[-end-170321-IB07400848-remove]//
//[-end-160317-IB03090425-modify]//

//[-start-160413-IB03090426-modify]//
  oneof varid   = SystemConfig.ScUsb30Mode,
    prompt      = STRING_TOKEN(STR_PCH_USB30_MODE_PROMPT),
    help        = STRING_TOKEN(STR_PCH_USB30_MODE_HELP),
    option text = STRING_TOKEN(STR_ENABLE), value = 1, flags = DEFAULT | RESET_REQUIRED;
    option text = STRING_TOKEN(STR_DISABLE), value = 0, flags =  MANUFACTURING | RESET_REQUIRED;
  endoneof;
//[-end-160413-IB03090426-modify]//

//[-start-170321-IB07400848-remove]//
  // 
  // IBL doc#557198, Page 33: Number of HSIC Ports:0
  // IBL doc#557775, Table 197: SSIC is not supported on APL platform 
  //
//  subtitle text = STRING_TOKEN(STR_NULL_STRING);
//
//  oneof varid   = SystemConfig.ScUsbVbusOn,
//    prompt      = STRING_TOKEN(STR_PCH_USB_VBUS_PROMPT),
//    help        = STRING_TOKEN(STR_PCH_USB_VBUS_HELP),
//    option text = STRING_TOKEN(STR_OFF), value = 0, flags = RESET_REQUIRED;
//    option text = STRING_TOKEN(STR_ON), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
//  endoneof;
//
//  oneof varid   = SystemConfig.Hsic1Support,
//    prompt      = STRING_TOKEN(STR_USB_HSIC1_PROMPT),
//    help        = STRING_TOKEN(STR_USB_HSIC1_HELP),
//    option text = STRING_TOKEN(STR_ENABLE), value = 1, flags = RESET_REQUIRED;
//    option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
//  endoneof;
//
//  oneof varid   = SystemConfig.Ssic1Support,
//    prompt      = STRING_TOKEN(STR_USB_SSIC1_PROMPT),
//    help        = STRING_TOKEN(STR_USB_SSIC1_HELP),
//    option text = STRING_TOKEN(STR_ENABLE), value = 1, flags = RESET_REQUIRED;
//    option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
//  endoneof;
//
// // This default is updated on FirstBoot via SMIP/MultiBom
// suppressif ideqval SystemConfig.Ssic1Support == 0;
//  oneof varid   = SystemConfig.Ssic1Rate,
//    prompt      = STRING_TOKEN(STR_USB_SSIC1_RATE_PROMPT),
//    help        = STRING_TOKEN(STR_USB_SSIC1_RATE_HELP),
//    option text = STRING_TOKEN(STR_SSIC_A_RATE), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
//    option text = STRING_TOKEN(STR_SSIC_B_RATE), value = 2, flags = RESET_REQUIRED;
//  endoneof;
// endif;
//
// // This default is updated on FirstBoot via SMIP/MultiBom
// suppressif ideqval SystemConfig.Ssic1Support == 0;
//  oneof varid   = SystemConfig.SsicDlanePg,
//    prompt      = STRING_TOKEN(STR_USB_SSIC_DLANE_PG_PROMPT),
//    help        = STRING_TOKEN(STR_USB_SSIC_DLANE_PG_HELP),
//    option text = STRING_TOKEN(STR_ENABLE), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
//    option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
//  endoneof;
// endif;
//[-end-170321-IB07400848-remove]//
 
//[-start-160317-IB03090425-remove]//
//   oneof varid   = SystemConfig.Ssic2Support,
//    prompt      = STRING_TOKEN(STR_USB_SSIC2_PROMPT),
//    help        = STRING_TOKEN(STR_USB_SSIC2_HELP),
//    option text = STRING_TOKEN(STR_ENABLE), value = 1, flags = RESET_REQUIRED;
//    option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
//  endoneof;
//
// suppressif ideqval SystemConfig.Ssic2Support == 0;
//  oneof varid   = SystemConfig.Ssic2Rate,
//    prompt      = STRING_TOKEN(STR_USB_SSIC2_RATE_PROMPT),
//    help        = STRING_TOKEN(STR_USB_SSIC2_RATE_HELP),
//    option text = STRING_TOKEN(STR_SSIC_A_RATE), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
//    option text = STRING_TOKEN(STR_SSIC_B_RATE), value = 2, flags = RESET_REQUIRED;
//  endoneof;
// endif;
//[-end-160317-IB03090425-remove]//
  subtitle text = STRING_TOKEN(STR_NULL_STRING);

  //
  // EHCI support
  //
  //
  // Usb ports per-port disable control enable
  //
  oneof varid   = SystemConfig.ScUsbPerPortCtl,
    prompt      = STRING_TOKEN(STR_PCH_USB_PER_PORT_PROMPT),
//[-start-170321-IB07400848-modify]//
    help        = STRING_TOKEN(STR_PCH_USB_PER_PORT_HELP2),
//[-end-170321-IB07400848-modify]//
    option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    option text = STRING_TOKEN(STR_ENABLE), value = 1, flags = RESET_REQUIRED;
  endoneof;

  suppressif ideqval SystemConfig.ScUsbPerPortCtl == 0x0;
    oneof varid   = SystemConfig.ScUsbPort[0],
      prompt      = STRING_TOKEN(STR_PCH_USB_PORT0_PROMPT),
      help        = STRING_TOKEN(STR_PCH_USB_PORT_DIS_HELP),
      option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLE), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;

    oneof varid   = SystemConfig.ScUsbPort[1],
      prompt      = STRING_TOKEN(STR_PCH_USB_PORT1_PROMPT),
      help        = STRING_TOKEN(STR_PCH_USB_PORT_DIS_HELP),
      option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLE), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;

    oneof varid   = SystemConfig.ScUsbPort[2],
      prompt      = STRING_TOKEN(STR_PCH_USB_PORT2_PROMPT),
      help        = STRING_TOKEN(STR_PCH_USB_PORT_DIS_HELP),
      option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLE), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;
    oneof varid   = SystemConfig.ScUsbPort[3],
      prompt      = STRING_TOKEN(STR_PCH_USB_PORT3_PROMPT),
      help        = STRING_TOKEN(STR_PCH_USB_PORT_DIS_HELP),
      option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLE), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;
//[-start-170110-IB07250263-add]//
    oneof varid   = SystemConfig.ScUsbPort[4],
      prompt      = STRING_TOKEN(STR_PCH_USB_PORT4_PROMPT),
      help        = STRING_TOKEN(STR_PCH_USB_PORT_DIS_HELP),
      option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLE), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;
    oneof varid   = SystemConfig.ScUsbPort[5],
      prompt      = STRING_TOKEN(STR_PCH_USB_PORT5_PROMPT),
      help        = STRING_TOKEN(STR_PCH_USB_PORT_DIS_HELP),
      option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLE), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;
    oneof varid   = SystemConfig.ScUsbPort[6],
      prompt      = STRING_TOKEN(STR_PCH_USB_PORT6_PROMPT),
      help        = STRING_TOKEN(STR_PCH_USB_PORT_DIS_HELP),
      option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLE), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;
    oneof varid   = SystemConfig.ScUsbPort[7],
      prompt      = STRING_TOKEN(STR_PCH_USB_PORT7_PROMPT),
      help        = STRING_TOKEN(STR_PCH_USB_PORT_DIS_HELP),
      option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLE), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;
//[-end-170110-IB07250263-add]//
  endif;

//[-start-160317-IB03090425-modify]//
  oneof varid   = SystemConfig.ScUsbOtg,
    prompt      = STRING_TOKEN(STR_USB_XDCI_PROMPT),
    help        = STRING_TOKEN(STR_USB_XDCI_HELP),
    option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    option text = STRING_TOKEN(STR_PCI_MODE_STRING), value = 1, flags = RESET_REQUIRED;
//  option text = STRING_TOKEN(STR_ACPI_MODE_STRING), value = 2, flags = RESET_REQUIRED;
  endoneof;
//[-end-160317-IB03090425-modify]//

  oneof varid   = SystemConfig.DisableComplianceMode,
    prompt      = STRING_TOKEN(STR_XHCI_COMPLIANCE_PROMPT),
    help        = STRING_TOKEN(STR_XHCI_COMPLIANCE_HELP),
    option text = STRING_TOKEN(STR_XHCI_COMPLIANCE_FALSE), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    option text = STRING_TOKEN(STR_XHCI_COMPLIANCE_TRUE), value = 1, flags = RESET_REQUIRED;
  endoneof;

//[-start-160506-IB03090427-add]//
//[-start-160914-IB07400784-modify]//
//#if BXTI_PF_ENABLE
  suppressif ideqval SystemConfig.IsIOTGBoardIds == 0;
    oneof varid   = SystemConfig.AfeComp,
      prompt      = STRING_TOKEN(STR_USB_AFE_PROMPT),
      help        = STRING_TOKEN(STR_USB_AFE_HELP),
      option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLE), value = 1, flags = RESET_REQUIRED;
    endoneof;
  endif;
//#endif
//[-end-160914-IB07400784-modify]//
//[-end-160506-IB03090427-add]//
  
endform; // end of USB_OPTIONS_FORM_ID

//
// SATA Configurations
//
form formid = SATA_CONFIGURATION_ID,

  title    = STRING_TOKEN(STR_SATA_FORM_TITLE);

//[-start-170321-IB07400848-remove]//
//  //
//  // Title on Drive Configuration Page
//  //
//  text
//    help   = STRING_TOKEN(STR_NULL_STRING),
//    text   = STRING_TOKEN(STR_SATA_FORM_TITLE),
//    text   = STRING_TOKEN(STR_NULL_STRING),
//    flags  = 0,
//    key    = 0;
//
//  subtitle text = STRING_TOKEN(STR_NULL_STRING);
//[-end-170321-IB07400848-remove]//
  subtitle text = STRING_TOKEN(STR_CHIPSET_SATA_STRING);

//[-start-160317-IB03090425-modify]//
  oneof varid   = SystemConfig.Sata,
    prompt      = STRING_TOKEN(STR_SATA_PROMPT),
    help        = STRING_TOKEN(STR_SATA_HELP),
    option text = STRING_TOKEN(STR_ENABLE), value=1, flags=DEFAULT | MANUFACTURING | RESET_REQUIRED;
    option text = STRING_TOKEN(STR_DISABLE), value=0, flags=0 | RESET_REQUIRED;
  endoneof;
//[-end-160317-IB03090425-modify]//

  oneof varid   = SystemConfig.SataInterfaceMode,
    prompt   = STRING_TOKEN(STR_SATA_MODE_SELECTION_PROMPT),
    help     = STRING_TOKEN(STR_SATA_MODE_SELECTION_HELP),
    option text = STRING_TOKEN(STR_SATA_AHCI),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
//[-start-170321-IB07400848-remove]//
//    option text = STRING_TOKEN(STR_SATA_RAID),  value = 1, flags = RESET_REQUIRED;
//[-end-170321-IB07400848-remove]//
  endoneof;

//[-start-160429-IB07400722-add]//
  oneof
    varid       = SystemConfig.SATASpeed,
    prompt      = STRING_TOKEN(STR_SATA_INTERFACE_SPEED_PROMPT),
    help        = STRING_TOKEN(STR_SATA_INTERFACE_SPEED_HELP),
    option text = STRING_TOKEN(STR_GEN1_TEXT),                       value = 0x01, flags = RESET_REQUIRED;
    option text = STRING_TOKEN(STR_GEN2_TEXT),                       value = 0x02, flags = RESET_REQUIRED;
    option text = STRING_TOKEN(STR_GEN3_TEXT),                       value = 0x03, flags = RESET_REQUIRED | DEFAULT ;
  endoneof;
//[-end-160429-IB07400722-add]//

  oneof varid   = SystemConfig.SataTestMode,
    prompt      = STRING_TOKEN(STR_SATA_TEST_MODE_PROMPT),
    help        = STRING_TOKEN(STR_SATA_TEST_MODE_HELP),
    option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
    option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
  endoneof;


    oneof varid   = SystemConfig.SataSalp,
      prompt      = STRING_TOKEN(STR_SATA_AHCI_SALP),
      help        = STRING_TOKEN(STR_SATA_AHCI_SALP_HELP),
      option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;

  subtitle text = STRING_TOKEN(STR_NULL_STRING);

//[-start-170321-IB07400848-modify]//
  grayoutif TRUE;
    text
      help   = STRING_TOKEN(STR_EMPTY_STRING),
      text   = STRING_TOKEN(STR_SATA0_STRING),
      text   = STRING_TOKEN(STR_SATA0_NAME),
      flags  = 0,
      key    = 0;

    text
      help   = STRING_TOKEN(STR_EMPTY_STRING),
      text   = STRING_TOKEN(STR_SOFT_PRESERVE),
      text   = STRING_TOKEN(STR_SATA0_SOFT_PRESERVE_STATUS),
      flags  = 0,
      key    = 0;
  endif;    
//[-end-170321-IB07400848-modify]//


    oneof varid   = SystemConfig.SataPort[0],
      prompt      = STRING_TOKEN(STR_SATA_PORT_0),
      help        = STRING_TOKEN(STR_SATA_PORT_HELP),
      option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;


    suppressif ideqval SystemConfig.SataExternal[0] == 1;
      oneof varid   = SystemConfig.SataHotPlug[0],
        prompt      = STRING_TOKEN(STR_SATA0_HOTPLUG_CAP_PROMPT),
        help        = STRING_TOKEN(STR_SATA_HOTPLUG_CAP_HELP),
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
      endoneof;
//[-start-170321-IB07400848-add]//
    endif;
    
    suppressif ideqval SystemConfig.SataExternal[0] == 0;
//[-end-170321-IB07400848-add]//
      text
        help   = STRING_TOKEN(STR_EMPTY_STRING),
        text   = STRING_TOKEN(STR_SATA_ESATA),
        text   = STRING_TOKEN(STR_SATA_HOTPLUG_SUPPORT),
        flags  = 0,
        key    = 0;
    endif;


      oneof varid   = SystemConfig.SataMechanicalSw[0],
        prompt      = STRING_TOKEN(STR_SATA_MECHANICAL_SW0),
        help        = STRING_TOKEN(STR_SATA_MECHANICAL_SW_HELP),
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;


    oneof varid   = SystemConfig.SataSpinUp[0],
      prompt      = STRING_TOKEN(STR_SATA_SPIN_UP0),
      help        = STRING_TOKEN(STR_SATA_SPIN_UP_HELP),
      option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
    endoneof;

    oneof varid   = SystemConfig.SataType[0],
      prompt      = STRING_TOKEN(STR_SATA_TYPE0),
      help        = STRING_TOKEN(STR_SATA_TYPE_HELP),
      option text = STRING_TOKEN(STR_SATA_HDD_STRING), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_SATA_SSD_STRING), value = 1, flags = RESET_REQUIRED;
    endoneof;


    oneof varid   = SystemConfig.PxDevSlp[0],
      prompt      = STRING_TOKEN(STR_PCH_P0DEVSLP_PROMPT),
      help        = STRING_TOKEN(STR_PCH_P0DEVSLP_HELP),
      option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
    endoneof;

    oneof varid   = SystemConfig.EnableDitoConfig[0],
      prompt      = STRING_TOKEN(STR_PCH_ENABLE_DITO_CONFIG_PROMPT),
      help        = STRING_TOKEN(STR_PCH_ENABLE_DITO_CONFIG_HELP),
      option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
    endoneof;

    grayoutif ideqval SystemConfig.EnableDitoConfig[0] == 0;
      numeric varid = SystemConfig.DitoVal[0],
        prompt      = STRING_TOKEN(STR_PCH_DITO_VAL_PROMPT),
        help        = STRING_TOKEN(STR_PCH_DITO_VAL_HELP),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 1023,
        step        = 0,    // Stepping of 0 equates to a manual entering of a value, otherwise it will auto-increment with a left/right arrow
        default     = 625,  // 625 by default
      endnumeric;

      numeric varid   = SystemConfig.DmVal[0],
        prompt      = STRING_TOKEN(STR_PCH_DM_VAL_PROMPT),
        help        = STRING_TOKEN(STR_PCH_DM_VAL_HELP),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 15,
        step        = 0,    // Stepping of 0 equates to a manual entering of a value, otherwise it will auto-increment with a left/right arrow
        default     = 15,    // 15 by default
      endnumeric;
    endif;

  subtitle text = STRING_TOKEN(STR_NULL_STRING);

//[-start-170321-IB07400848-modify]//
  grayoutif TRUE;
    text
      help   = STRING_TOKEN(STR_EMPTY_STRING),
      text   = STRING_TOKEN(STR_SATA1_STRING),
      text   = STRING_TOKEN(STR_SATA1_NAME),
      flags  = 0,
      key    = 0;

    text
      help   = STRING_TOKEN(STR_EMPTY_STRING),
      text   = STRING_TOKEN(STR_SOFT_PRESERVE),
      text   = STRING_TOKEN(STR_SATA1_SOFT_PRESERVE_STATUS),
      flags  = 0,
      key    = 0;
  endif;
//[-end-170321-IB07400848-modify]//

//TODO    suppressif ideqvallist  SystemConfig.SataTestMode ==  SATA_TEST_MODE_ENABLE;
      oneof varid   = SystemConfig.SataPort[1],
        prompt      = STRING_TOKEN(STR_SATA_PORT_1),
        help        = STRING_TOKEN(STR_SATA_PORT_HELP),
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

    suppressif ideqval SystemConfig.SataExternal[1] == 1;
      oneof varid   = SystemConfig.SataHotPlug[1],
        prompt      = STRING_TOKEN(STR_SATA1_HOTPLUG_CAP_PROMPT),
        help        = STRING_TOKEN(STR_SATA_HOTPLUG_CAP_HELP),
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
      endoneof;
//[-start-170321-IB07400848-add]//
    endif;
    
    suppressif ideqval SystemConfig.SataExternal[1] == 0;
//[-end-170321-IB07400848-add]//
      text
        help   = STRING_TOKEN(STR_EMPTY_STRING),
        text   = STRING_TOKEN(STR_SATA_ESATA),
        text   = STRING_TOKEN(STR_SATA_HOTPLUG_SUPPORT),
        flags  = 0,
        key    = 0;
    endif;


      oneof varid   = SystemConfig.SataMechanicalSw[1],
        prompt      = STRING_TOKEN(STR_SATA_MECHANICAL_SW1),
        help        = STRING_TOKEN(STR_SATA_MECHANICAL_SW_HELP),
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;


    oneof varid   = SystemConfig.SataSpinUp[1],
      prompt      = STRING_TOKEN(STR_SATA_SPIN_UP1),
      help        = STRING_TOKEN(STR_SATA_SPIN_UP_HELP),
      option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
    endoneof;

    oneof varid   = SystemConfig.SataType[1],
      prompt      = STRING_TOKEN(STR_SATA_TYPE1),
      help        = STRING_TOKEN(STR_SATA_TYPE_HELP),
      option text = STRING_TOKEN(STR_SATA_HDD_STRING), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_SATA_SSD_STRING), value = 1, flags = RESET_REQUIRED;
    endoneof;

    oneof varid   = SystemConfig.PxDevSlp[1],
      prompt      = STRING_TOKEN(STR_PCH_P1DEVSLP_PROMPT),
      help        = STRING_TOKEN(STR_PCH_P1DEVSLP_HELP),
      option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
    endoneof;

    oneof varid   = SystemConfig.EnableDitoConfig[1],
      prompt      = STRING_TOKEN(STR_PCH_ENABLE_DITO_CONFIG_PROMPT),
      help        = STRING_TOKEN(STR_PCH_ENABLE_DITO_CONFIG_HELP),
      option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
    endoneof;

    grayoutif ideqval SystemConfig.EnableDitoConfig[1] == 0;
      numeric varid = SystemConfig.DitoVal[1],
        prompt      = STRING_TOKEN(STR_PCH_DITO_VAL_PROMPT),
        help        = STRING_TOKEN(STR_PCH_DITO_VAL_HELP),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 1023,
        step        = 0,    // Stepping of 0 equates to a manual entering of a value, otherwise it will auto-increment with a left/right arrow
        default     = 625,  // 625 by default
      endnumeric;

      numeric varid   = SystemConfig.DmVal[1],
        prompt      = STRING_TOKEN(STR_PCH_DM_VAL_PROMPT),
        help        = STRING_TOKEN(STR_PCH_DM_VAL_HELP),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 15,
        step        = 0,    // Stepping of 0 equates to a manual entering of a value, otherwise it will auto-increment with a left/right arrow
        default     = 15,   // 15 by default
      endnumeric;
    endif;

endform;  //End of SATA
//
// HD-Audio Configuration
//
form formid     = HDAUDIO_OPTIONS_FORM_ID,
  title         = STRING_TOKEN(STR_HDAUDIO_OPTIONS_FORM_TITLE);
  subtitle text = STRING_TOKEN(STR_HDAUDIO_OPTIONS_FORM_TITLE);

//[-start-160317-IB03090425-modify]//
  oneof varid   = SystemConfig.ScHdAudio,
    prompt      = STRING_TOKEN(STR_HDA_PROMPT),
    help        = STRING_TOKEN(STR_HDA_HELP),
    option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
    option text = STRING_TOKEN(STR_ENABLE), value= 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
  endoneof;
//[-end-160317-IB03090425-modify]//

  oneof varid   = SystemConfig.ScHdAudioDsp,
    prompt      = STRING_TOKEN(STR_HDA_DSP_PROMPT),
    help        = STRING_TOKEN(STR_HDA_DSP_HELP),
    option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
    option text = STRING_TOKEN(STR_ENABLE), value= 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
  endoneof;

 suppressif ideqval SystemConfig.ScHdAudioDsp == 0;
    text
      help   = STRING_TOKEN(STR_EMPTY_STRING),
      text   = STRING_TOKEN(STR_HDA_FEATURE_TITLE),
      text   = STRING_TOKEN(STR_HDA_FEATURE_HELP),
      flags  = 0,
      key    = 0;

   
//[-start-161018-IB06740518-add]//
//[-start-161026-IB07400806-modify]//
//[-start-171220-IB07400935-modify]//
      //
      // Default enable to using OS inbox driver
      //
      oneof varid   = SystemConfig.HdAudioDspUaaCompliance,
        prompt      = STRING_TOKEN(STR_SC_HDA_ADSP_UAA_COMP_PROMPT),
        help        = STRING_TOKEN(STR_SC_HDA_ADSP_UAA_COMP_HELP),
        option text = STRING_TOKEN(STR_SC_HDA_NON_UAA), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(STR_SC_HDA_UAA),     value = 1, flags = RESET_REQUIRED;
      endoneof;
//[-end-171220-IB07400935-modify]//
//[-end-161026-IB07400806-modify]//
//[-end-161018-IB06740518-add]//
     

    // Wake on Voice (WoV) support
    checkbox varid = SystemConfig.ScHdAudioFeature[0],
      prompt       = STRING_TOKEN(STR_HDA_FEATURE_0_PROMPT),
      help         = STRING_TOKEN(STR_HDA_FEATURE_HELP),
      flags        = 0 | RESET_REQUIRED,
      key          = 0,
    endcheckbox;

    // BT Sideband support
    checkbox varid = SystemConfig.ScHdAudioFeature[1],
      prompt       = STRING_TOKEN(STR_HDA_FEATURE_1_PROMPT),
      help         = STRING_TOKEN(STR_HDA_FEATURE_HELP),
//[-start-160429-IB03090426-modify]//
      flags        = CHECKBOX_DEFAULT | RESET_REQUIRED,
//[-end-160429-IB03090426-modify]//
      key          = 0,
    endcheckbox;
    
//[-start-160506-IB03090427-add]//
    // SRAM Reclaim
    checkbox varid = SystemConfig.ScHdAudioFeature[3],
        prompt       = STRING_TOKEN(STR_HDA_FEATURE_3_PROMPT),
        help         = STRING_TOKEN(STR_HDA_FEATURE_HELP),
        flags        = CHECKBOX_DEFAULT | RESET_REQUIRED,
        key          = 0,
        default      = TRUE,
      endcheckbox;
//[-end-160506-IB03090427-add]//
    
    suppressif ideqval SystemConfig.ScHdAudioFeature[1] == 0;
      // BT Intel HFP SCO
      checkbox varid = SystemConfig.ScHdAudioFeature[5],
        prompt       = STRING_TOKEN(STR_HDA_FEATURE_5_PROMPT),
        help         = STRING_TOKEN(STR_HDA_FEATURE_HELP),
//[-start-160429-IB03090426-modify]//
        flags        = CHECKBOX_DEFAULT | RESET_REQUIRED,
//[-end-160429-IB03090426-modify]//
        key          = 0,
      endcheckbox;

      // BT Intel A2DP
      checkbox varid = SystemConfig.ScHdAudioFeature[6],
        prompt       = STRING_TOKEN(STR_HDA_FEATURE_6_PROMPT),
        help         = STRING_TOKEN(STR_HDA_FEATURE_HELP),
        flags        = 0 | RESET_REQUIRED,
        key          = 0,
      endcheckbox;
    endif;
    
//[-start-160506-IB03090427-add]//
    // Context Aware
    checkbox varid = SystemConfig.ScHdAudioFeature[9],
        prompt       = STRING_TOKEN(STR_HDA_FEATURE_9_PROMPT),
        help         = STRING_TOKEN(STR_HDA_FEATURE_HELP),
        flags        = 0 | RESET_REQUIRED,
        key          = 0,
      endcheckbox;
//[-end-160506-IB03090427-add]//

  // NHLT Endpoints selection
    text
       help   = STRING_TOKEN(STR_HDA_NHLT_ENDPOINT_TITLE),
       text   = STRING_TOKEN(STR_HDA_NHLT_ENDPOINT_TITLE),
       flags  = 0,
       key    = 0;

    oneof varid     = SystemConfig.ScHdAudioNhltEndpointDmic,
           prompt      = STRING_TOKEN(STR_HDA_NHLT_ENDPOINT_DMIC),
           help        = STRING_TOKEN(STR_HDA_NHLT_ENDPOINT_DMIC_HELP),
//[-start-161008-IB07400794-modify]//
//[-start-171220-IB07400935-modify]//
           option text = STRING_TOKEN(STR_DISABLED),  value = 0, flags = DEFAULT |RESET_REQUIRED;
           option text = STRING_TOKEN(STR_HDA_DMIC_2CH), value = 1, flags = RESET_REQUIRED;
           option text = STRING_TOKEN(STR_HDA_DMIC_4CH), value = 2, flags = RESET_REQUIRED;
//[-end-171220-IB07400935-modify]//
//[-end-161008-IB07400794-modify]//
    endoneof;

    oneof varid     = SystemConfig.ScHdAudioNhltEndpointBt,
           prompt      = STRING_TOKEN(STR_HDA_NHLT_ENDPOINT_BT),
           help        = STRING_TOKEN(STR_HDA_NHLT_ENDPOINT_BT_HELP),
//[-start-161008-IB07400794-modify]//
//#if !BXTI_PF_ENABLE // OS default is Windows
           option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
           option text = STRING_TOKEN(STR_ENABLED), value = 1, flags =  DEFAULT | RESET_REQUIRED;
//#else
//           option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | RESET_REQUIRED;
//           option text = STRING_TOKEN(STR_ENABLED), value = 1, flags =  RESET_REQUIRED;
//#endif
//[-end-161008-IB07400794-modify]//
    endoneof;

    grayoutif ideqval SystemConfig.ScHdAudioIoBufferOwnership == 0;
    oneof varid     = SystemConfig.ScHdAudioNhltEndpointI2sSKP,
             prompt      = STRING_TOKEN(STR_HDA_NHLT_ENDPOINT_I2S_SKP),
             help        = STRING_TOKEN(STR_HDA_NHLT_ENDPOINT_I2S_SKP_HELP),
             option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
             option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = DEFAULT | RESET_REQUIRED;
      endoneof;
  
      oneof varid     = SystemConfig.ScHdAudioNhltEndpointI2sHP,
             prompt      = STRING_TOKEN(STR_HDA_NHLT_ENDPOINT_I2S_HP),
             help        = STRING_TOKEN(STR_HDA_NHLT_ENDPOINT_I2S_HP_HELP),
             option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
             option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = DEFAULT | RESET_REQUIRED;
      endoneof;
    endif;
    
  // Codec based Voice Activity Detection (VAD) support
    checkbox varid = SystemConfig.ScHdAudioFeature[2],
      prompt       = STRING_TOKEN(STR_HDA_FEATURE_2_PROMPT),
      help         = STRING_TOKEN(STR_HDA_FEATURE_HELP),
      flags        = 0 | RESET_REQUIRED,
      key          = 0,
    endcheckbox;

      // DSP-based speech pre-processing disabled
      checkbox varid  = SystemConfig.ScHdAudioFeature[7],
        prompt   = STRING_TOKEN(STR_HDA_FEATURE_7_PROMPT),
        help     = STRING_TOKEN(STR_HDA_FEATURE_HELP),
        flags    = 0 | RESET_REQUIRED,
        key      = 0,
      endcheckbox;

      grayoutif ideqval SystemConfig.ScHdAudioFeature[7] == 0x0;
        // Support for Windows 10 Hardware Voice Activation for Cortana or Intel WoV
        // (can be enabled only for DSP-based speech pre-processing in disabled state)
        // 0 == Intel Wake on Voice, 1 == Windows Voice Activation
        oneof varid  = SystemConfig.ScHdAudioFeature[8],
               prompt      = STRING_TOKEN(STR_HDA_FEATURE_8_PROMPT),
               help        = STRING_TOKEN(STR_HDA_FEATURE_HELP),
               option text = STRING_TOKEN(STR_INTEL_WAKE_ON_VOICE), value = 0, flags = DEFAULT | RESET_REQUIRED;
               option text = STRING_TOKEN(STR_WIN_VOICE_ACTIVATION), value = 1, flags = RESET_REQUIRED;
        endoneof;
      endif; // Speech pre-processing disabled check

    // DSP Pre/Post Processing module support selection
    text
      help   = STRING_TOKEN(STR_EMPTY_STRING),
      text   = STRING_TOKEN(STR_HDA_PP_MODULE_TITLE),
      text   = STRING_TOKEN(STR_HDA_PP_MODULE_HELP),
      flags  = 0,
      key    = 0;

  // Post Processing Module 0 - Waves
    checkbox varid = SystemConfig.ScHdAudioPostProcessingMod[0],
      prompt       = STRING_TOKEN(STR_HDA_PP_MODULE_0_PROMPT),
      help         = STRING_TOKEN(STR_HDA_PP_MODULE_HELP),
      flags        = 0 | RESET_REQUIRED,
      key          = 0,
    endcheckbox;

    // Post Processing Module 1 - DTS
    checkbox varid = SystemConfig.ScHdAudioPostProcessingMod[1],
      prompt       = STRING_TOKEN(STR_HDA_PP_MODULE_1_PROMPT),
      help         = STRING_TOKEN(STR_HDA_PP_MODULE_HELP),
      flags        = 0 | RESET_REQUIRED,
      key          = 0,
    endcheckbox;

    // Post Processing Module 2 - Spatial
    checkbox varid = SystemConfig.ScHdAudioPostProcessingMod[2],
      prompt       = STRING_TOKEN(STR_HDA_PP_MODULE_2_PROMPT),
      help         = STRING_TOKEN(STR_HDA_PP_MODULE_HELP),
      flags        = 0 | RESET_REQUIRED,
      key          = 0,
    endcheckbox;

    // Post Processing Module 3 - Dolby
    checkbox varid = SystemConfig.ScHdAudioPostProcessingMod[3],
      prompt       = STRING_TOKEN(STR_HDA_PP_MODULE_3_PROMPT),
      help         = STRING_TOKEN(STR_HDA_PP_MODULE_HELP),
      flags        = 0 | RESET_REQUIRED,
      key          = 0,
    endcheckbox;

    // Post Processing Module 4 - Samsung SoundAlive
    checkbox varid = SystemConfig.ScHdAudioPostProcessingMod[4],
      prompt       = STRING_TOKEN(STR_HDA_PP_MODULE_4_PROMPT),
      help         = STRING_TOKEN(STR_HDA_PP_MODULE_HELP),
      flags        = 0 | RESET_REQUIRED,
      key          = 0,
    endcheckbox;

    // Post Processing Module 5 - Samsung SoundBooster
    checkbox varid = SystemConfig.ScHdAudioPostProcessingMod[5],
      prompt       = STRING_TOKEN(STR_HDA_PP_MODULE_5_PROMPT),
      help         = STRING_TOKEN(STR_HDA_PP_MODULE_HELP),
      flags        = 0 | RESET_REQUIRED,
      key          = 0,
    endcheckbox;

    // Post Processing Module 6 - Samsung EQ/DRC
    checkbox varid = SystemConfig.ScHdAudioPostProcessingMod[6],
      prompt       = STRING_TOKEN(STR_HDA_PP_MODULE_6_PROMPT),
      help         = STRING_TOKEN(STR_HDA_PP_MODULE_HELP),
      flags        = 0 | RESET_REQUIRED,
      key          = 0,
    endcheckbox;

    // Post Processing Module 7 - ForteMedia SAMSoft
    checkbox varid = SystemConfig.ScHdAudioPostProcessingMod[7],
      prompt       = STRING_TOKEN(STR_HDA_PP_MODULE_7_PROMPT),
      help         = STRING_TOKEN(STR_HDA_PP_MODULE_HELP),
      flags        = 0 | RESET_REQUIRED,
      key          = 0,
    endcheckbox;
    // Check WoV support status in DspFeatureMask
    grayoutif ideqval SystemConfig.ScHdAudioFeature[0] == 0x0;
      // Post Processing Module 8 - WoV Intel
      checkbox varid  = SystemConfig.ScHdAudioPostProcessingMod[8],
        prompt   = STRING_TOKEN(STR_HDA_PP_MODULE_8_PROMPT),
        help     = STRING_TOKEN(STR_HDA_PP_MODULE_HELP),
        flags    = 0 | RESET_REQUIRED,
        key      = 0,
      endcheckbox;

      // Post Processing Module 9 - WoV Sensory
      checkbox varid  = SystemConfig.ScHdAudioPostProcessingMod[9],
        prompt   = STRING_TOKEN(STR_HDA_PP_MODULE_9_PROMPT),
        help     = STRING_TOKEN(STR_HDA_PP_MODULE_HELP),
        flags    = 0 | RESET_REQUIRED,
        key      = 0,
      endcheckbox;
    endif; // WoV Support
    // Post Processing Module 10 - Conexant Pre-Process
    checkbox varid  = SystemConfig.ScHdAudioPostProcessingMod[10],
      prompt   = STRING_TOKEN(STR_HDA_PP_MODULE_10_PROMPT),
      help     = STRING_TOKEN(STR_HDA_PP_MODULE_HELP),
      flags    = 0 | RESET_REQUIRED,
      key      = 0,
    endcheckbox;

//[-start-160506-IB03090427-add]//
    // Post Processing Module 11 - Context Aware
    grayoutif ideqval SystemConfig.ScHdAudioFeature[9] == 0x0;
    checkbox varid  = SystemConfig.ScHdAudioPostProcessingMod[11],
      prompt   = STRING_TOKEN(STR_HDA_PP_MODULE_11_PROMPT),
      help     = STRING_TOKEN(STR_HDA_PP_MODULE_HELP),
      flags    = 0 | RESET_REQUIRED,
      key      = 0,
    endcheckbox;
    endif; // Context Aware Support
//[-end-160506-IB03090427-add]//

//    // Custom Pre/Post-Processing modules with GUID entered by user
//    checkbox varid  = SystemConfig.ScHdAudioPostProcessingMod[29],
//      prompt   = STRING_TOKEN(STR_HDA_PP_MODULE_29_PROMPT),
//      help     = STRING_TOKEN(STR_HDA_PP_MODULE_HELP),
//      flags    = 0 | RESET_REQUIRED,
//      key      = 0,
//    endcheckbox;
//    suppressif ideqval SystemConfig.ScHdAudioPostProcessingMod[29] == 0x0;
//      string  varid   = SystemConfig.ScHdAudioPostProcessingModCustomGuid1,
//              prompt  = STRING_TOKEN(STR_HDA_PP_CUSTOM_GUID_29_PROMPT),
//              help    = STRING_TOKEN(STR_HDA_PP_CUSTOM_GUID_HELP),
//              flags   = 0 | RESET_REQUIRED, //INTERACTIVE,
//              key     = 0,
//              minsize = 36, // GUID characters number in format 11111111-2222-3333-4444-1234567890ab (without ending null)
//              maxsize = 36,
//      endstring;
//    endif; // Custom module 29 disabled
//
//    checkbox varid  = SystemConfig.ScHdAudioPostProcessingMod[30],
//      prompt   = STRING_TOKEN(STR_HDA_PP_MODULE_30_PROMPT),
//      help     = STRING_TOKEN(STR_HDA_PP_MODULE_HELP),
//      flags    = 0 | RESET_REQUIRED,
//      key      = 0,
//    endcheckbox;
//    suppressif ideqval SystemConfig.ScHdAudioPostProcessingMod[30] == 0x0;
//      string  varid   = SystemConfig.ScHdAudioPostProcessingModCustomGuid2,
//              prompt  = STRING_TOKEN(STR_HDA_PP_CUSTOM_GUID_30_PROMPT),
//              help    = STRING_TOKEN(STR_HDA_PP_CUSTOM_GUID_HELP),
//              flags   = 0 | RESET_REQUIRED, //INTERACTIVE,
//              key     = 0,
//              minsize = 36, // GUID characters number in format 11111111-2222-3333-4444-1234567890ab (without ending null)
//              maxsize = 36,
//      endstring;
//    endif; // Custom module 30 disabled
//
//    checkbox varid  = SystemConfig.ScHdAudioPostProcessingMod[31],
//      prompt   = STRING_TOKEN(STR_HDA_PP_MODULE_31_PROMPT),
//      help     = STRING_TOKEN(STR_HDA_PP_MODULE_HELP),
//      flags    = 0 | RESET_REQUIRED,
//      key      = 0,
//    endcheckbox;
//    suppressif ideqval SystemConfig.ScHdAudioPostProcessingMod[31] == 0x0;
//      string  varid   = SystemConfig.ScHdAudioPostProcessingModCustomGuid3,
//              prompt  = STRING_TOKEN(STR_HDA_PP_CUSTOM_GUID_31_PROMPT),
//              help    = STRING_TOKEN(STR_HDA_PP_CUSTOM_GUID_HELP),
//              flags   = 0 | RESET_REQUIRED, //INTERACTIVE,
//              key     = 0,
//              minsize = 36, // GUID characters number in format 11111111-2222-3333-4444-1234567890ab (without ending null)
//              maxsize = 36,
//      endstring;
//    endif; // Custom module 31 disabled
  endif;
//
//
//[-start-160506-IB03090427-remove]//
//  oneof varid   = SystemConfig.ScHdAudioCtlPwrGate,
//    prompt      = STRING_TOKEN(STR_HDA_CTL_POWER_GATE_PROMPT),
//    help        = STRING_TOKEN(STR_HDA_CTL_POWER_GATE_HELP),
//    option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
//    option text = STRING_TOKEN(STR_ENABLE), value= 1, flags = RESET_REQUIRED;
//  endoneof;
//
//  oneof varid   = SystemConfig.ScHdAudioDspPwrGate,
//    prompt      = STRING_TOKEN(STR_HDA_DSP_POWER_GATE_PROMPT),
//    help        = STRING_TOKEN(STR_HDA_DSP_POWER_GATE_HELP),
//    option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = DEFAULT | MANUFACTURING |RESET_REQUIRED;
//    option text = STRING_TOKEN(STR_ENABLE), value= 1, flags = RESET_REQUIRED;
//  endoneof;
//[-end-160506-IB03090427-remove]//

  oneof varid   = SystemConfig.ScHdAudioMmt,
    prompt      = STRING_TOKEN(STR_HDA_CSME_MEM_TRANS_PROMPT),
    help        = STRING_TOKEN(STR_HDA_CSME_MEM_TRANS_HELP),
    option text = STRING_TOKEN(STR_HDA_VC0), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    option text = STRING_TOKEN(STR_HDA_VC2), value= 1, flags = RESET_REQUIRED;
  endoneof;

  oneof varid   = SystemConfig.ScHdAudioHmt,
    prompt      = STRING_TOKEN(STR_HDA_HOST_MEM_TRANS_PROMPT),
    help        = STRING_TOKEN(STR_HDA_HOST_MEM_TRANS_HELP),
    option text = STRING_TOKEN(STR_HDA_VC0), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    option text = STRING_TOKEN(STR_HDA_VC2), value= 1, flags = RESET_REQUIRED;
  endoneof;

  oneof varid   = SystemConfig.ScHdAudioIoBufferOwnership,
    prompt      = STRING_TOKEN(STR_HDA_IO_BUFF_PROMPT),
    help        = STRING_TOKEN(STR_HDA_IO_BUFF_HELP),
//[-start-161008-IB07400794-modify]//
//#if !BXTI_PF_ENABLE  // OS default is Windows
    option text = STRING_TOKEN(STR_HDA_HDALINK), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    option text = STRING_TOKEN(STR_HDA_I2S), value = 3, flags = RESET_REQUIRED;
//#else
//    option text = STRING_TOKEN(STR_HDA_HDALINK), value = 0, flags = RESET_REQUIRED;
//    option text = STRING_TOKEN(STR_HDA_I2S), value = 3, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
//#endif
//[-end-161008-IB07400794-modify]//
  endoneof;

//[-start-161018-IB06740518-remove]//
//  oneof varid   = SystemConfig.ScHdAudioBiosCfgLockDown,
//    prompt      = STRING_TOKEN(STR_HDA_BIOS_CONFIG_LOCK_DOWN_PROMPT),
//    help        = STRING_TOKEN(STR_HDA_BIOS_CONFIG_LOCK_DOWN_HELP),
//    option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
//    option text = STRING_TOKEN(STR_ENABLE), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
//  endoneof;
//[-end-161018-IB06740518-remove]//

  oneof varid   = SystemConfig.ScHdAudioClkGate,
    prompt      = STRING_TOKEN(STR_HDA_CLOCK_GATE_PROMPT),
    help        = STRING_TOKEN(STR_HDA_CLOCK_GATE_HELP),
    option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
    option text = STRING_TOKEN(STR_ENABLE), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
  endoneof;

  oneof varid   = SystemConfig.ScHdAudioPwrGate,
    prompt      = STRING_TOKEN(STR_HDA_POWER_GATE_PROMPT),
    help        = STRING_TOKEN(STR_HDA_POWER_GATE_HELP),
    option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
    option text = STRING_TOKEN(STR_ENABLE), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
  endoneof;

  oneof varid   = SystemConfig.ScHdAudioPme,
    prompt      = STRING_TOKEN(STR_HDA_PME_PROMPT),
    help        = STRING_TOKEN(STR_HDA_PME_HELP),
    option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
    option text = STRING_TOKEN(STR_ENABLE), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
  endoneof;

//[-start-160506-IB03090427-add]//
  subtitle text = STRING_TOKEN(STR_NULL_STRING);

  oneof varid    = SystemConfig.HdAudioLinkFrequency,
     prompt      = STRING_TOKEN(STR_HDA_HDAUDIO_LINK_FREQ),
     help        = STRING_TOKEN(STR_HDA_HDAUDIO_LINK_FREQ_HELP),
     option text = STRING_TOKEN(STR_6MHZ),  value = 0, flags = RESET_REQUIRED;
     option text = STRING_TOKEN(STR_12MHZ), value = 1, flags = RESET_REQUIRED;
     option text = STRING_TOKEN(STR_24MHZ), value = 2, flags = DEFAULT | RESET_REQUIRED;
  endoneof;
  
  oneof varid    = SystemConfig.IDispLinkFrequency,
     prompt      = STRING_TOKEN(STR_HDA_IDISP_LINK_FREQ),
     help        = STRING_TOKEN(STR_HDA_IDISP_LINK_FREQ_HELP),
     option text = STRING_TOKEN(STR_48MHZ), value = 3, flags = RESET_REQUIRED;
     option text = STRING_TOKEN(STR_96MHZ), value = 4, flags = DEFAULT | RESET_REQUIRED;
  endoneof;

   suppressif ideqval SystemConfig.IDispLinkFrequency == 0x4;
      oneof varid  = SystemConfig.IDispLinkTmode,
        prompt   = STRING_TOKEN(STR_HDA_IDISP_LINK_TMODE),
        help     = STRING_TOKEN(STR_HDA_IDISP_LINK_TMODE_HELP),
        option text = STRING_TOKEN(STR_HDA_IDISP_2T_MODE), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(STR_HDA_IDISP_1T_MODE), value = 1, flags = RESET_REQUIRED;
      endoneof;
   endif; //  Setup.IDisplayLinkFreq == 0x4;
//[-end-160506-IB03090427-add]//


  subtitle text = STRING_TOKEN(STR_NULL_STRING);

endform; // End of HDAUDIO_OPTIONS_FORM_ID

//
// GMM Configurations
//
form formid     = GMM_OPTIONS_FORM_ID,
  title         = STRING_TOKEN(STR_GMM_OPTIONS_FORM_TITLE);
  subtitle text = STRING_TOKEN(STR_GMM_OPTIONS_FORM_TITLE);

//[-start-160317-IB03090425-modify]//
  oneof varid   = SystemConfig.Gmm,
    prompt      = STRING_TOKEN(STR_GMM_PROMPT),
    help        = STRING_TOKEN(STR_GMM_HELP),
    option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    option text = STRING_TOKEN(STR_ENABLE), value = 1, flags = RESET_REQUIRED;
  endoneof;
//[-end-160317-IB03090425-modify]//

  subtitle text = STRING_TOKEN(STR_NULL_STRING);

  subtitle text = STRING_TOKEN(STR_GMM_CLOCK_GATE_SETTING_SUBTITLE);

  oneof varid   = SystemConfig.GmmCgPGCBEnabled,
    prompt      = STRING_TOKEN(STR_GMM_CG_PGCB_ENABLE_PROMPT),
    help        = STRING_TOKEN(STR_GMM_CG_PGCB_ENABLE_HELP),
    option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
    option text = STRING_TOKEN(STR_ENABLE), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
  endoneof;

  oneof varid   = SystemConfig.GmmCgSBDEnabled,
    prompt      = STRING_TOKEN(STR_GMM_CG_SBD_ENABLE_PROMPT),
    help        = STRING_TOKEN(STR_GMM_CG_SBD_ENABLE_HELP),
    option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
    option text = STRING_TOKEN(STR_ENABLE), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
  endoneof;

  oneof varid   = SystemConfig.GmmCgSBTEnabled,
    prompt      = STRING_TOKEN(STR_GMM_CG_SBT_ENABLE_PROMPT),
    help        = STRING_TOKEN(STR_GMM_CG_SBT_ENABLE_HELP),
    option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
    option text = STRING_TOKEN(STR_ENABLE), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
  endoneof;

  oneof varid   = SystemConfig.GmmCgSBPEnabled,
    prompt      = STRING_TOKEN(STR_GMM_CG_SBP_ENABLE_PROMPT),
    help        = STRING_TOKEN(STR_GMM_CG_SBP_ENABLE_HELP),
    option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
    option text = STRING_TOKEN(STR_ENABLE), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
  endoneof;

  oneof varid   = SystemConfig.GmmCgCoreEnabled,
    prompt      = STRING_TOKEN(STR_GMM_CG_CORE_ENABLE_PROMPT),
    help        = STRING_TOKEN(STR_GMM_CG_CORE_ENABLE_HELP),
    option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
    option text = STRING_TOKEN(STR_ENABLE), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
  endoneof;

  oneof varid   = SystemConfig.GmmCgDmaEnabled,
    prompt      = STRING_TOKEN(STR_GMM_CG_DMA_ENABLE_PROMPT),
    help        = STRING_TOKEN(STR_GMM_CG_DMA_ENABLE_HELP),
    option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
    option text = STRING_TOKEN(STR_ENABLE), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
  endoneof;

  oneof varid   = SystemConfig.GmmCgRAEnabled,
    prompt      = STRING_TOKEN(STR_GMM_CG_RA_ENABLE_PROMPT),
    help        = STRING_TOKEN(STR_GMM_CG_RA_ENABLE_HELP),
    option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
    option text = STRING_TOKEN(STR_ENABLE), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
  endoneof;

  oneof varid   = SystemConfig.GmmCgHostEnabled,
    prompt      = STRING_TOKEN(STR_GMM_CG_HOST_ENABLE_PROMPT),
    help        = STRING_TOKEN(STR_GMM_CG_HOST_ENABLE_HELP),
    option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
    option text = STRING_TOKEN(STR_ENABLE), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
  endoneof;

  oneof varid   = SystemConfig.GmmCgPEnabled,
    prompt      = STRING_TOKEN(STR_GMM_CG_PARTITION_ENABLE_PROMPT),
    help        = STRING_TOKEN(STR_GMM_CG_PARTITION_ENABLE_HELP),
    option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
    option text = STRING_TOKEN(STR_ENABLE), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
  endoneof;

  oneof varid   = SystemConfig.GmmCgTEnabled,
    prompt      = STRING_TOKEN(STR_GMM_CG_TRUNK_ENABLE_PROMPT),
    help        = STRING_TOKEN(STR_GMM_CG_TRUNK_ENABLE_HELP),
    option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
    option text = STRING_TOKEN(STR_ENABLE), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
  endoneof;

  subtitle text = STRING_TOKEN(STR_NULL_STRING);

  subtitle text = STRING_TOKEN(STR_GMM_POWER_GATE_SETTING_SUBTITLE);

  oneof varid   = SystemConfig.GmmPgHwAutoEnabled,
    prompt      = STRING_TOKEN(STR_GMM_PG_HW_AUTO_ENABLE_PROMPT),
    help        = STRING_TOKEN(STR_GMM_PG_HW_AUTO_ENABLE_HELP),
    option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
    option text = STRING_TOKEN(STR_ENABLE), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
  endoneof;

  grayoutif ideqval SystemConfig.GmmPgHwAutoEnabled == 1;
    oneof varid   = SystemConfig.GmmPgD3HotEnabled,
      prompt      = STRING_TOKEN(STR_GMM_PG_D3_HOT_ENABLE_PROMPT),
      help        = STRING_TOKEN(STR_GMM_PG_D3_HOT_ENABLE_HELP),
      option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLE), value = 1, flags = RESET_REQUIRED;
    endoneof;

    oneof varid   = SystemConfig.GmmPgI3Enabled,
      prompt      = STRING_TOKEN(STR_GMM_PG_I3_ENABLE_PROMPT),
      help        = STRING_TOKEN(STR_GMM_PG_I3_ENABLE_HELP),
      option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLE), value = 1, flags = RESET_REQUIRED;
    endoneof;

    oneof varid   = SystemConfig.GmmPgPMCREnabled,
      prompt      = STRING_TOKEN(STR_GMM_PG_PMCR_ENABLE_PROMPT),
      help        = STRING_TOKEN(STR_GMM_PG_PMCR_ENABLE_HELP),
      option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLE), value = 1, flags = RESET_REQUIRED;
    endoneof;
  endif;

endform; // End of GMM_OPTIONS_FORM_ID
#ifdef PSS_SUPPORT
//
// PSS Chip Configurations
//
form formid     = PSS_CHIP_OPTION_FORM_ID,
    
  title         = STRING_TOKEN(STR_PSS_CHIP_OPTIONS_FORM_TITLE);
  subtitle text = STRING_TOKEN(STR_NULL_STRING);
  
  oneof varid = SystemConfig.PssEnabled,
    prompt    = STRING_TOKEN(STR_PSS_ENABLE_PROMPT),
    help      = STRING_TOKEN(STR_PSS_ENABLE_HELP),
    option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = MANUFACTURING | DEFAULT | RESET_REQUIRED;
    option text = STRING_TOKEN(STR_ENABLE),  value = 1, flags = RESET_REQUIRED;
  endoneof;

  //
  // Jump to PSS Chip Factory Form
  //
  goto PSS_CHIP_FACTORY_FORM_ID,
    prompt = STRING_TOKEN(STR_PSS_CHIP_FACTORY_FORM_TITLE),
    help   = STRING_TOKEN(STR_PSS_CHIP_FACTORY_FORM_TITLE_HELP);

  //
  // Jump to PSS Chip Engineering Form
  //
  goto PSS_CHIP_ENGINEERING_FORM_ID,
    prompt = STRING_TOKEN(STR_PSS_CHIP_ENGINEERING_FORM_TITLE),
    help   = STRING_TOKEN(STR_PSS_CHIP_ENGINEERING_FORM_TITLE_HELP);

  //
  // Jump to PSS Chip Lab Form
  //
  goto PSS_CHIP_LAB_FORM_ID,
    prompt = STRING_TOKEN(STR_PSS_CHIP_LAB_FORM_TITLE),
    help   = STRING_TOKEN(STR_PSS_CHIP_LAB_FORM_TITLE_HELP);
        
endform;

form formid     = PSS_CHIP_FACTORY_FORM_ID,

  title         = STRING_TOKEN(STR_PSS_CHIP_FACTORY_FORM_TITLE);
  subtitle text = STRING_TOKEN(STR_NULL_STRING);

  text
    help   = STRING_TOKEN(STR_NULL_STRING),
    text   = STRING_TOKEN(STR_PSS_CHIP_BOARD_SERIAL_NUMBER_STRING),
    text   = STRING_TOKEN(STR_PSS_CHIP_BOARD_SERIAL_NUMBER_VALUE),
    flags  = 0,
    key    = 0;

   text
    help   = STRING_TOKEN(STR_NULL_STRING),
    text   = STRING_TOKEN(STR_PSS_CHIP_TID_STRING),
    text   = STRING_TOKEN(STR_PSS_CHIP_TID_VALUE),
    flags  = 0,
    key    = 0;

  text
    help   = STRING_TOKEN(STR_NULL_STRING),
    text   = STRING_TOKEN(STR_PSS_CHIP_WORK_ORDER_NUMBER_STRING),
    text   = STRING_TOKEN(STR_PSS_CHIP_WORK_ORDER_NUMBER_VALUE),
    flags  = 0,
    key    = 0;

  text
    help   = STRING_TOKEN(STR_NULL_STRING),
    text   = STRING_TOKEN(STR_PSS_CHIP_INTEL_PART_NUMBER_STRING),
    text   = STRING_TOKEN(STR_PSS_CHIP_INTEL_PART_NUMBER_VALUE),
    flags  = 0,
    key    = 0;

   text
    help   = STRING_TOKEN(STR_NULL_STRING),
    text   = STRING_TOKEN(STR_PSS_CHIP_DATE_SHIPPED_STRING),
    text   = STRING_TOKEN(STR_PSS_CHIP_DATE_SHIPPED_VALUE),
    flags  = 0,
    key    = 0;

   text
    help   = STRING_TOKEN(STR_NULL_STRING),
    text   = STRING_TOKEN(STR_PSS_CHIP_SPECIAL_INSTRUCTIONS_STRING),
    text   = STRING_TOKEN(STR_PSS_CHIP_SPECIAL_INSTRUCTIONS_VALUE),
    flags  = 0,
    key    = 0;

   text
    help   = STRING_TOKEN(STR_NULL_STRING),
    text   = STRING_TOKEN(STR_PSS_CHIP_REWORK_STRING),
    text   = STRING_TOKEN(STR_PSS_CHIP_REWORK_VALUE),
    flags  = 0,
    key    = 0;

   text
    help   = STRING_TOKEN(STR_NULL_STRING),
    text   = STRING_TOKEN(STR_PSS_CHIP_PRODUCT_FAMILY_STRING),
    text   = STRING_TOKEN(STR_PSS_CHIP_PRODUCT_FAMILY_VALUE),
    flags  = 0,
    key    = 0;

endform;

form formid     = PSS_CHIP_ENGINEERING_FORM_ID,

  title         = STRING_TOKEN(STR_PSS_CHIP_ENGINEERING_FORM_TITLE);
  subtitle text = STRING_TOKEN(STR_NULL_STRING);

   text
    help   = STRING_TOKEN(STR_NULL_STRING),
    text   = STRING_TOKEN(STR_PSS_CHIP_IFWI_STRING),
    text   = STRING_TOKEN(STR_PSS_CHIP_IFWI_VALUE),
    flags  = 0,
    key    = 0;

   text
    help   = STRING_TOKEN(STR_NULL_STRING),
    text   = STRING_TOKEN(STR_PSS_CHIP_OS_STRING),
    text   = STRING_TOKEN(STR_PSS_CHIP_OS_VALUE),
    flags  = 0,
    key    = 0;

   text
    help   = STRING_TOKEN(STR_NULL_STRING),
    text   = STRING_TOKEN(STR_PSS_CHIP_BKC_VERSION_STRING),
    text   = STRING_TOKEN(STR_PSS_CHIP_BKC_VERSION_VALUE),
    flags  = 0,
    key    = 0;

  text
    help   = STRING_TOKEN(STR_NULL_STRING),
    text   = STRING_TOKEN(STR_PSS_CHIP_PMIC_VERSION_STRING),
    text   = STRING_TOKEN(STR_PSS_CHIP_PMIC_VERSION_VALUE),
    flags  = 0,
    key    = 0;

   text
    help   = STRING_TOKEN(STR_NULL_STRING),
    text   = STRING_TOKEN(STR_PSS_CHIP_SOC_VERSION_STRING),
    text   = STRING_TOKEN(STR_PSS_CHIP_SOC_VERSION_VALUE),
    flags  = 0,
    key    = 0;
           
endform;

form formid     = PSS_CHIP_LAB_FORM_ID,

  title         = STRING_TOKEN(STR_PSS_CHIP_LAB_FORM_TITLE);
  subtitle text = STRING_TOKEN(STR_NULL_STRING);

   text
    help   = STRING_TOKEN(STR_NULL_STRING),
    text   = STRING_TOKEN(STR_PSS_CHIP_LAST_PSS_UPDATE_STRING),
    text   = STRING_TOKEN(STR_PSS_CHIP_LAST_PSS_UPDATE_VALUE),
    flags  = 0,
    key    = 0;

   text
    help   = STRING_TOKEN(STR_NULL_STRING),
    text   = STRING_TOKEN(STR_PSS_CHIP_LAST_RFID_SYNC_STRING),
    text   = STRING_TOKEN(STR_PSS_CHIP_LAST_RFID_SYNC_VALUE),
    flags  = 0,
    key    = 0;

   text
    help   = STRING_TOKEN(STR_NULL_STRING),
    text   = STRING_TOKEN(STR_PSS_CHIP_ASSIGNED_USER_STRING),
    text   = STRING_TOKEN(STR_PSS_CHIP_ASSIGNED_USER_VALUE),
    flags  = 0,
    key    = 0;

   text
    help   = STRING_TOKEN(STR_NULL_STRING),
    text   = STRING_TOKEN(STR_PSS_CHIP_LOCATION_STRING),
    text   = STRING_TOKEN(STR_PSS_CHIP_LOCATION_VALUE),
    flags  = 0,
    key    = 0;

   text
    help   = STRING_TOKEN(STR_NULL_STRING),
    text   = STRING_TOKEN(STR_PSS_CHIP_STATUS_STRING),
    text   = STRING_TOKEN(STR_PSS_CHIP_STATUS_VALUE),
    flags  = 0,
    key    = 0;

   text
    help   = STRING_TOKEN(STR_NULL_STRING),
    text   = STRING_TOKEN(STR_PSS_CHIP_LATITUDE_STRING),
    text   = STRING_TOKEN(STR_PSS_CHIP_LATITUDE_VALUE),
    flags  = 0,
    key    = 0;

   text
    help   = STRING_TOKEN(STR_NULL_STRING),
    text   = STRING_TOKEN(STR_PSS_CHIP_LONGITUDE_STRING),
    text   = STRING_TOKEN(STR_PSS_CHIP_LONGITUDE_VALUE),
    flags  = 0,
    key    = 0;

   text
    help   = STRING_TOKEN(STR_NULL_STRING),
    text   = STRING_TOKEN(STR_PSS_CHIP_BOOT_COUNT_STRING),
    text   = STRING_TOKEN(STR_PSS_CHIP_BOOT_COUNT_VALUE),
    flags  = 0,
    key    = 0;

   text
    help   = STRING_TOKEN(STR_NULL_STRING),
    text   = STRING_TOKEN(STR_PSS_CHIP_CONSUMPTION_METER_STRING),
    text   = STRING_TOKEN(STR_PSS_CHIP_CONSUMPTION_METER_VALUE),
    flags  = 0,
    key    = 0;

   text
    help   = STRING_TOKEN(STR_NULL_STRING),
    text   = STRING_TOKEN(STR_PSS_CHIP_RECALL_STRING),
    text   = STRING_TOKEN(STR_PSS_CHIP_RECALL_VALUE),
    flags  = 0,
    key    = 0;

endform;
#endif
//[-end-160216-IB03090424-modify]//