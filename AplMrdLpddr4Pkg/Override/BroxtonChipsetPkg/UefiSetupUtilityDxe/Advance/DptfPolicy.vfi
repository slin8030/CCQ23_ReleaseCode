// *++
//
// Copyright (c)  1999 - 2015 Intel Corporation. All rights reserved
// This software and associated documentation (if any) is furnished
// under a license and may only be used or copied in accordance
// with the terms of the license. Except as permitted by such
// license, no part of this software or documentation may be
// reproduced, stored in a retrieval system, or transmitted in any
// form or by any means without the express written consent of
// Intel Corporation.
//
//
// Module Name:
//
//   DPTFPolicy.vfr
//
// Abstract:
//
//   Driver Setup formset.
//
// Revision History:
//   ------------------------------------------------------------------------------
//   Rev   Date<MM/DD/YYYY>    Name    Description
//   ------------------------------------------------------------------------------

// --*/

form formid = DPTF_POLICY_FORM_ID,

  title  = STRING_TOKEN(STR_DPTF_POLICY_TITLE);


  subtitle text = STRING_TOKEN(STR_DPTF_POLICY_TITLE);

  oneof varid    = SystemConfig.EnableActivePolicy,
    prompt      = STRING_TOKEN(STR_ACTIVE_POLICY_DPTF_PROMPT),
    help        = STRING_TOKEN(STR_ACTIVE_POLICY_DPTF_HELP),
    option text = STRING_TOKEN(STR_DISABLED),  value = 0, flags = RESET_REQUIRED;
    option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
  endoneof;

  oneof varid    = SystemConfig.EnablePassivePolicy,
    prompt      = STRING_TOKEN(STR_PASSIVE_POLICY_DPTF_PROMPT),
    help        = STRING_TOKEN(STR_PASSIVE_POLICY_DPTF_HELP),
    option text = STRING_TOKEN(STR_DISABLED),  value = 0, flags = RESET_REQUIRED;
    option text = STRING_TOKEN(STR_PASSIVE_POLICY_10_DPTF_HELP),  value = 1, flags = RESET_REQUIRED;
    option text = STRING_TOKEN(STR_PASSIVE_POLICY_20_DPTF_HELP),  value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
  endoneof;

  suppressif ideqval SystemConfig.EnablePassivePolicy == 0;
    oneof varid     = SystemConfig.TrtRevision,
      prompt      = STRING_TOKEN(STR_TRT_REVISION_OBJECTS),
      help        = STRING_TOKEN(STR_TRT_REVISION_OBJECTS_HELP),
      option text = STRING_TOKEN(STR_TRT_TRADITIONAL),value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_TRT_PRIORITY), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;
  endif;

  oneof varid    = SystemConfig.EnableCriticalPolicy,
    prompt      = STRING_TOKEN(STR_CRITICAL_POLICY_DPTF_PROMPT),
    help        = STRING_TOKEN(STR_CRITICAL_POLICY_DPTF_HELP),
    option text = STRING_TOKEN(STR_DISABLED),  value = 0, flags = RESET_REQUIRED;
    option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
  endoneof;

  oneof varid    = SystemConfig.EnablePowerBossPolicy,
    prompt      = STRING_TOKEN(STR_POWER_BOSS_POLICY_DPTF_PROMPT),
    help        = STRING_TOKEN(STR_POWER_BOSS_POLICY_DPTF_HELP),
    option text = STRING_TOKEN(STR_DISABLED),  value = 0, flags = RESET_REQUIRED;
    option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
  endoneof;

  oneof varid    = SystemConfig.EnableVSPolicy,
    prompt      = STRING_TOKEN(STR_VS_POLICY_DPTF_PROMPT),
    help        = STRING_TOKEN(STR_VS_POLICY_DPTF_HELP),
    option text = STRING_TOKEN(STR_DISABLED),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = RESET_REQUIRED;
  endoneof;

endform;