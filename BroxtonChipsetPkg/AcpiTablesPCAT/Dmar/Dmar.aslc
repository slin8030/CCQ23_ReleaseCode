/** @file
  This file describes the contents of the ACPI DMA address Remapping

@copyright
  Copyright (c) 1999 - 2015 Intel Corporation. All rights reserved
  This software and associated documentation (if any) is furnished
  under a license and may only be used or copied in accordance
  with the terms of the license. Except as permitted by such
  license, no part of this software or documentation may be
  reproduced, stored in a retrieval system, or transmitted in any
  form or by any means without the express written consent of
  Intel Corporation.
  This file contains an 'Intel Peripheral Driver' and uniquely
  identified as "Intel Reference Module" and is
  licensed for Intel CPUs and chipsets under the terms of your
  license agreement with Intel or your vendor.  This file may
  be modified by the user, subject to additional terms of the
  license agreement
**/
#include "Dmar.h"

EFI_ACPI_DMAR_TABLE DmarTable = {

  EFI_ACPI_VTD_DMAR_TABLE_SIGNATURE,
  sizeof (EFI_ACPI_DMAR_TABLE),
  EFI_ACPI_DMAR_TABLE_REVISION,

  //
  // Checksum will be updated at runtime
  //
  0x00,

  //
  // It is expected that these values will be programmed at runtime
  //
  'I', 'N', 'T', 'E', 'L', ' ',
  EFI_ACPI_DMAR_OEM_TABLE_ID,
  0x1,
  EFI_ACPI_DMAR_OEM_CREATOR_ID,
  1,

  //
  // DMAR table specific entries below:
  //

  //
  // 39-bit addressing Host Address Width
  //
  38,

  //
  // Flags
  //
  0,

  //
  // Reserved fields
  //
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,

  //
  // First DRHD structure, VT-d Engine #1
  //
  {
    0,                                          // Type = 0 (DRHD)
    sizeof (EFI_ACPI_DRHD_ENGINE1_STRUCT),      // Length of structure
    0,                                          // Flag - Do not include all - bugbug - not clear what this means
    0,                                          // Reserved fields
    0,                                          // Segment
    0x00000000,                                 // Base address of DMA-remapping hardware - Updated at boot time

    //
    // Device Scopes
    //
    {
      1,                                      // Type
      sizeof (EFI_ACPI_DEV_SCOPE_STRUCTURE),  // Length
      0,                                      // Segment number
      0,                                      // Reserved
      0,                                      // Start bus number
      {2, 0}                                  // PCI path
    }
  },

  //Second DRHD structure VT-d Engine# 2
  {
    0,                                         // Type = 0 (DRHD)
    sizeof(EFI_ACPI_DRHD_ENGINE2_STRUCT),      // Length of strucure.
    1,                                         // Flag - Include all
    0,                                         // Reserved
    0,                                         // Segment Number
    0x00000000,                                // Base address of DMA-remapping hardware.

    {
      //
      // Device Scopes
      //
      {
        3,                                        // Type=IO APIC
        sizeof (EFI_ACPI_DEV_SCOPE_STRUCTURE),    // Length
        0,                                        // Reserved
        1,                                        // Enumeration ID
        0xFA,                                     // Start bus number
        {31, 0}                                   // PCI path
      },
      //
      // Device Scopes
      //
      {
        4,                                        // Type=HPET
        sizeof (EFI_ACPI_DEV_SCOPE_STRUCTURE),    // Length
        0,                                        // Reserved
        0,                                        // Enumeration ID
        0xFA,                                     // Start bus number
        {15, 0}                                   // PCI path
      }
    }
  },

  //RMRR structure for USB devices.
  {
    0x1,                                       // Type 1 - RMRR structure
    sizeof(EFI_ACPI_RMRR_USB_STRUC),           // Length
    0x0000,                                    // Reserved
    0x0000,                                    // Segment Num
    0x0000000000000000,                        // RMRR Base address - Updated in runtime.
    0x0000000000000000,                        // RMRR Limit address - Updated in runtime.
    {
      {
        1,                                     // Type
        sizeof(EFI_ACPI_DEV_SCOPE_STRUCTURE),  // Length
        0,                                     // Reserved
        0,                                     // Enum ID
        0,                                     // Start bus number
        {21, 0}                                // PCI path
      },
      {
        1,                                     // Type
        sizeof(EFI_ACPI_DEV_SCOPE_STRUCTURE),  // Length
        0,                                     // Reserved
        0,                                     // Enum ID
        0,                                     // Start bus number
        {21, 1}                                // PCI path
      }
    }
  },

  //RMRR structure for IGD device.
  {
    1,                                        // Type 1 - RMRR structure
    sizeof(EFI_ACPI_RMRR_IGD_STRUC),          // Length
    0x0000,                                   // Reserved
    0x0000,                                   // Segment Num
    0x0000000000000000,                       // RMRR Base address - Updated in runtime.
    0x0000000000000000,                       // RMRR Limit address - Updated in runtime.
    {
      {
        1,                                    // Type
        sizeof(EFI_ACPI_DEV_SCOPE_STRUCTURE), // Length
        0,                                    // Reserved
        0,                                    // Enum ID
        0,                                    // Start bus number
        {2, 0}                                // PCI path
      }
    }
  }
};

//
// Dummy function required for build tools
//
#if defined (__GNUC__)
VOID*
ReferenceAcpiTable (
  VOID
  )

{
  //
  // Reference the table being generated to prevent the optimizer from removing the 
  // data structure from the executable
  //
  return (VOID*)&DmarTable;
}
#else
int
main (
  VOID
  )
{
  return 0;
}
#endif