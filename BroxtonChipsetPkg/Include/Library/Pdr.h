/**@file

@copyright
 Copyright (c) 1996 - 2016 Intel Corporation. All rights reserved
 This software and associated documentation (if any) is furnished
 under a license and may only be used or copied in accordance
 with the terms of the license. Except as permitted by the
 license, no part of this software or documentation may be
 reproduced, stored in a retrieval system, or transmitted in any
 form or by any means without the express written consent of
 Intel Corporation.
 This file contains a 'Sample Driver' and is licensed as such
 under the terms of your license agreement with Intel or your
 vendor. This file may be modified by the user, subject to
 the additional terms of the license agreement.

@par Specification
**/
/*++

Module Name:


Abstract:


--*/

#ifndef _PDR_H_
#define _PDR_H_

//
// Definitions of SPID region in PDR
//
#define SPID_OFFSET              0
#define SPID_SIZE_IN_BYTE        32
#define SSN_OFFSET               32
#define SSN_SIZE_IN_BYTE         32
#define BATTERY_PROFILES_NUMBER  5
#define TEMP_RANGES_NUMBER       4

// {53912211-34D1-4df5-8E0D-B2B704F1DC5A}
#define EFI_PDR_REGION_GUID   { 0x53912211, 0x34d1, 0x4df5, { 0x8e, 0xd, 0xb2, 0xb7, 0x4, 0xf1, 0xdc, 0x5a } };
extern EFI_GUID gEfiPdrRegionGuid;

#define EFI_PDR_ENERGE_MANAGEMENT_NAME L"PdrEmData"
#define EFI_PDR_SPID_NAME              L"PdrSpidData"

//
// EM region
//

#pragma pack(1)

//
// Following structures definition follows Cherry Trail PAD and Flexible Data Editor tool.
//

typedef struct {
  UINT8 SbctMinorRev:4;
  UINT8 SbctMajorRev:4;
} SBCT_REVISION;

typedef struct {
  UINT8 UsbCompliantCharging:1;
  UINT8 DigitalBatteryOverride:1;
  UINT8 FixedBattery:1;
  UINT8 DigitalBattContentChecksum:1;
  UINT8 BootOnInvalidBattery:1;
  UINT8 DbiType:1;
  UINT8 EmergencyChargingEn:1;
  UINT8 UseExtendedSmip:1;
} FIXED_PLATFORM_OPTIONS;

typedef struct {
  UINT8 Reserved:4;
  UINT8 BattIdentifyPlace:1;
  UINT8 UseIaAppsRun:1;
  UINT8 BootModeOnLowBatt:1;
  UINT8 BootModeOnBattInsert:1;
} FIXED_PLATFORM_OPTIONS_1;

typedef struct {
  SBCT_REVISION              SbctRevision;
  FIXED_PLATFORM_OPTIONS     FixedPlatformOptions;
  FIXED_PLATFORM_OPTIONS_1   FixedPlatformOptions1;
  UINT8                      DbiInGpio;
  UINT8                      DbiOutGpio;
  UINT8                      BattChipType;
  UINT16                     IaAppsRun;
  UINT8                      BatidDbiBase;
  UINT8                      BatidAnlgBase;
  UINT8                      IaAppsCap;
  UINT16                     VoltageFrequencyCap;
  UINT8                      FrequencyIndex;
  UINT8                      Reserved1[1];
  UINT8                      FixedBatteryIndex;
  UINT8                      Reserved2[1];
  UINT8                      MaxTurboCharge;
} GLOBAL_EM_SETTINGS;

typedef struct {
  UINT8                  NumberTemperatureRange:4;
  UINT8                  NumberBatteryTypes:4;
} BATTERY_HEADER;

typedef struct {
  UINT8 ClassId;
  UINT8 Tolerance;
}BATT_ID_MIN;

typedef struct {
  BATT_ID_MIN IdMinValue;
  UINT16      IdMaxValue;
  UINT8       Type;
  UINT16      Capacity;
  UINT16      MaxVoltage;
  UINT8       LowSetting;
  UINT8       ChargerSafeLimit;
} BATTERY_DATA;

typedef struct {
  UINT16 UpperTemperatureLimit;
  UINT8  PackResistance;
  UINT16 FastChargeVoltageUpperThreshold;
  UINT16 FastChargeCurrentLimit;
  UINT16 MaintenanceChargeVoltageLowerThreshold;
  UINT16 MaintenanceChargeVoltageUpperThreshold;
  UINT16 MaintenanceChargeCurrentLimit;
  //UINT16 LowerTemperatureLimit; // BUGBUG: This field is not generated by FDE tool.
} TEMPERATURE_RANGE_DATA;

typedef struct {
  UINT16 UpperTemperatureLimit;
  UINT8  PackResistance;
  UINT16 FastChargeVoltageUpperThreshold;
  UINT16 FastChargeCurrentLimit;
  UINT16 MaintenanceChargeVoltageLowerThreshold;
  UINT16 MaintenanceChargeVoltageUpperThreshold;
  UINT16 MaintenanceChargeCurrentLimit;
  UINT16 LowerTemperatureLimit; // BUGBUG: This field is not generated by FDE tool.
} TEMPERATURE_RANGE_DATA_1;

typedef struct {
  BATTERY_DATA BatteryData;
  TEMPERATURE_RANGE_DATA TemperRangeData[TEMP_RANGES_NUMBER-1];
  TEMPERATURE_RANGE_DATA_1  TemperRangeData_1;
} BATTERY_DEFINITION;

typedef struct {
  GLOBAL_EM_SETTINGS   GlobalEmSettings;
  BATTERY_HEADER       BatteryHeader;
  BATTERY_DEFINITION   BatteryDefinition[BATTERY_PROFILES_NUMBER];
  UINT8                Reservd[40];
} PDR_ENERGE_MANAGEMENT;

#pragma pack()
#endif
