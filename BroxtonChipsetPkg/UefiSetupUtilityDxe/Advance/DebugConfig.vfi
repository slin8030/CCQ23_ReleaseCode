// *++
//
// Copyright (c)  1999 - 2016 Intel Corporation. All rights reserved
// This software and associated documentation (if any) is furnished
// under a license and may only be used or copied in accordance
// with the terms of the license. Except as permitted by such
// license, no part of this software or documentation may be
// reproduced, stored in a retrieval system, or transmitted in any
// form or by any means without the express written consent of
// Intel Corporation.
//
//
// Module Name:
//
//   DebugConfiguration.vfi
//
// Abstract:
//
//   Debug Configuration formset.
//


// --*/

form formid = DEBUG_CONFIGURATION_FORM_ID,
  title    = STRING_TOKEN(STR_DEBUG_CONFIGURATION_TITLE);


  subtitle text = STRING_TOKEN(STR_NULL_STRING);

  subtitle text = STRING_TOKEN(STR_OSDBG_STRING);
  
  oneof varid  = SystemConfig.OsDbgEnable,
    prompt   = STRING_TOKEN (STR_OSDBG_PROMPT),
    help     = STRING_TOKEN (STR_OSDBG_HELP),
    option text = STRING_TOKEN (STR_DISABLE), value = 0, flags =  DEFAULT | MANUFACTURING | RESET_REQUIRED;
    option text = STRING_TOKEN (STR_ENABLE),  value = 1, flags =  RESET_REQUIRED;
  endoneof;
  
//[-start-160413-IB03090426-remove]//
//  oneof varid  = SystemConfig.EXIEnabled,
//    prompt   = STRING_TOKEN (STR_EXI_ENABLE_PROMPT),
//    help     = STRING_TOKEN (STR_EXI_ENABLE_HELP),
//    option text = STRING_TOKEN (STR_DISABLE), value = 0, flags =  DEFAULT | MANUFACTURING | RESET_REQUIRED;
//    option text = STRING_TOKEN (STR_ENABLE),  value = 1, flags =  RESET_REQUIRED;
//  endoneof;
//[-end-160413-IB03090426-remove]//
  
  subtitle text = STRING_TOKEN(STR_NULL_STRING);

//[-start-151229-IB03090424-add]//
  subtitle text = STRING_TOKEN(STR_APEIBERT_STRING);
  oneof varid  = SystemConfig.APEIBERT,
    prompt   = STRING_TOKEN (STR_APEIBERT_PROMPT),
    help     = STRING_TOKEN (STR_APEIBERT_HELP),
//[-start-160513-IB03090427-modify]//
    option text = STRING_TOKEN (STR_ENABLE),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    option text = STRING_TOKEN (STR_DISABLE), value = 0, flags = RESET_REQUIRED;
//[-end-160513-IB03090427-modify]//
  endoneof;
//[-start-170323-IB07400848-remove]//
//  subtitle text = STRING_TOKEN(STR_NULL_STRING);
//[-end-170323-IB07400848-remove]//
//[-end-151229-IB03090424-add]//

//[-start-170323-IB07400848-modify]//
  //
  // Unsupport
  //
  suppressif TRUE;
    subtitle text = STRING_TOKEN(STR_NULL_STRING);
    subtitle text = STRING_TOKEN(STR_ACPIMEMDBG_STRING);
  
    oneof varid  = SystemConfig.ACPIMemDbg,
      prompt   = STRING_TOKEN (STR_ACPIMEMDBG_SWTICH),
      help     = STRING_TOKEN (STR_ACPIMEMDBG_SWTICH_HELP),
//[-start-160308-IB03090425-modify]//
      option text = STRING_TOKEN (STR_DISABLE), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN (STR_ENABLE),  value = 1, flags = RESET_REQUIRED;
//[-end-160308-IB03090425-modify]//
    endoneof;
  endif;
//[-end-170323-IB07400848-modify]//

//[-start-151229-IB03090424-add]//
  subtitle text = STRING_TOKEN(STR_NULL_STRING);

  subtitle text = STRING_TOKEN(STR_TXE_DEBUG_OPTION_STRING);

  oneof varid   = SystemConfig.SeCEOPEnable,
    prompt      = STRING_TOKEN(STR_TXE_END_OF_POST_PROMPT),
    help        = STRING_TOKEN(STR_TXE_END_OF_POST_HELP),
    option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
    option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
  endoneof;

//[-start-160308-IB03090425-add]//
  oneof varid	= SystemConfig.SeCLockDir,
  	prompt		= STRING_TOKEN(STR_TXE_LOCK_DIR_PROMPT),
  	help		  = STRING_TOKEN(STR_TXE_LOCK_DIR_HELP),
  	option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
  	option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = RESET_REQUIRED;
  endoneof;
//[-end-160308-IB03090425-add]//
//[-start-160809-IB07400769-add]//
  oneof varid	= SystemConfig.SeCPrepareForUpdate,
  	prompt		= STRING_TOKEN(STR_TXE_PREPARE_FOR_UPDATE_PROMPT),
  	help		  = STRING_TOKEN(STR_TXE_PREPARE_FOR_UPDATE_HELP),
  	option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
  	option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = RESET_REQUIRED;
  endoneof;
//[-end-160809-IB07400769-add]//

  subtitle text = STRING_TOKEN(STR_NULL_STRING);
  subtitle text = STRING_TOKEN(STR_PTT_DEBUG_OPTION_STRING);

  oneof varid   = SystemConfig.PttSuppressCommandSend,
    prompt      = STRING_TOKEN(STR_PTT_SUPPRESS_COMMAND_PROMPT),
    help        = STRING_TOKEN(STR_PTT_SUPPRESS_COMMAND_HELP),
    option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = RESET_REQUIRED;
  endoneof;

//[-start-170323-IB07400848-remove]//
//  subtitle text = STRING_TOKEN(STR_NULL_STRING);
//[-end-170323-IB07400848-remove]//
//[-end-151229-IB03090424-add]//

//[-start-170323-IB07400848-modify]//
  //
  // Unused
  //
  suppressif TRUE;
    subtitle text = STRING_TOKEN(STR_NULL_STRING);
    subtitle text = STRING_TOKEN(STR_TDO_STRING);
    oneof varid   = SystemConfig.TDO,
      prompt      = STRING_TOKEN(STR_TDO_PROMPT),
      help        = STRING_TOKEN(STR_TDO_HELP),
      option text = STRING_TOKEN(STR_DISABLE), value = 0, flags =  RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLE), value = 1, flags =  DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_AUTOMATIC), value = 2, flags =  RESET_REQUIRED;
    endoneof;
  endif;
//[-end-170323-IB07400848-modify]//
    
//[-start-151229-IB03090424-add]//
    subtitle text = STRING_TOKEN(STR_NULL_STRING);
//[-start-170323-IB07400848-add]//
    subtitle text = STRING_TOKEN(STR_MEMORY_CONFIGURATION_TITLE);
//[-end-170323-IB07400848-add]//
    oneof   varid   = SystemConfig.SMRREnable,
      prompt      = STRING_TOKEN(STR_SMRR),
      help        = STRING_TOKEN(STR_SMRR_HELP),
      option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLE),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof; 
//[-end-151229-IB03090424-add]//

//[-start-160506-IB03090427-modify]//
//[-start-160506-IB07400723-modify]//
//[-start-161001-IB07400791-modify]//
//#if BXTI_PF_ENABLE
#ifdef BIOS_SETUP_DRAM_POLICY
//[-start-170323-IB07400848-remove]//
//  subtitle text = STRING_TOKEN(STR_NULL_STRING);
//[-end-170323-IB07400848-remove]//
    oneof   varid   = SystemConfig.Max2G,
      prompt      = STRING_TOKEN(STR_MAX_MEM_2G),
      help        = STRING_TOKEN(STR_MAX_MEM_2G_HELP),
      option text = STRING_TOKEN(STR_ENABLE), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_DISABLE),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof; 
#endif    
//#endif
//[-end-161001-IB07400791-modify]//
//[-end-160506-IB07400723-modify]//
//[-end-160506-IB03090427-modify]//

//[-start-160216-IB03090424-modify]//
#ifdef PRAM_SUPPORT
//[-start-170323-IB07400848-remove]//
//  subtitle text = STRING_TOKEN(STR_NULL_STRING); 
//[-end-170323-IB07400848-remove]//
    oneof varid   = SystemConfig.Pram,
        prompt      = STRING_TOKEN (STR_PRAM_PROMPT),
        help        = STRING_TOKEN (STR_PRAM_HELP),
        option text = STRING_TOKEN (STR_PRAM_64MB),  value = 0x33, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (STR_PRAM_16MB),  value = 0x32, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (STR_PRAM_4MB),   value = 0x31, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (STR_DISABLE),    value = 0x30, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;
#endif
//[-end-160216-IB03090424-modify]//

//[-start-160413-IB03090426-remove]//
////[-start-151229-IB03090424-modify]//
//#ifdef SGX_SUPPORT
//// _BXTP_SGX_PORT_ start
//  subtitle text = STRING_TOKEN(STR_NULL_STRING);
//    oneof varid   = SystemConfig.SgxMode,
//      prompt      = STRING_TOKEN(STR_SGX_PROMPT),
//      help        = STRING_TOKEN(STR_SGX_HELP),
//      option text = STRING_TOKEN(STR_SGX_128MB), value = 3, flags = RESET_REQUIRED;
//      option text = STRING_TOKEN(STR_SGX_64MB),  value = 2, flags = RESET_REQUIRED;
//      option text = STRING_TOKEN(STR_SGX_32MB),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
//      option text = STRING_TOKEN(STR_DISABLE),   value = 0, flags = RESET_REQUIRED;
//    endoneof;
//
//  suppressif ideqval SystemConfig.SgxMode == 0;
//    subtitle text = STRING_TOKEN(STR_NULL_STRING);
//  	numeric varid = SystemConfig.SgxEpoch0,
//    	prompt      = STRING_TOKEN (STR_SGX_EPOCH0_PROMPT),
//        help        = STRING_TOKEN (STR_SGX_EPOCH0_PROMPT_HELP),
//        flags       = DISPLAY_UINT_HEX | RESET_REQUIRED,
//        minimum     = 0x0,
//        maximum     = 0xFFFFFFFFFFFFFFFF,
//        step        = 0x1,
//        default     = 0x0,
//    endnumeric;
//
//  	subtitle text = STRING_TOKEN(STR_NULL_STRING);
//    numeric varid = SystemConfig.SgxEpoch1,
//    	prompt      = STRING_TOKEN (STR_SGX_EPOCH1_PROMPT),
//        help        = STRING_TOKEN (STR_SGX_EPOCH1_PROMPT_HELP),
//        flags       = DISPLAY_UINT_HEX | RESET_REQUIRED,
//        minimum     = 0x0,
//        maximum     = 0xFFFFFFFFFFFFFFFF,
//        step        = 0x1,
//        default     = 0x0,
//   	endnumeric;
//
//  	subtitle text = STRING_TOKEN(STR_NULL_STRING);
//      oneof varid = SystemConfig.SgxMicrocodePrompt,
//    	prompt      = STRING_TOKEN (STR_SGX_MICROCODE_PROMPT),
//      help        = STRING_TOKEN (STR_SGX_MICROCODE_PROMPT_HELP),
//      option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = DEFAULT | MANUFACTURING |  RESET_REQUIRED;
//      option text = STRING_TOKEN(STR_ENABLE),  value = 1, flags = RESET_REQUIRED;
//   	endoneof;
//  endif;
//
//
//// _BXTP_SGX_PORT_ end
//#endif
////[-end-151229-IB03090424-modify]//
//[-end-160413-IB03090426-remove]//
    //
    // Unused
    //
//[-start-170323-IB07400848-remove]//
//  subtitle text = STRING_TOKEN(STR_OS_DNX_STRING);
//
//  oneof varid  = SystemConfig.OSDnX,
//    prompt   = STRING_TOKEN (STR_OS_DNX_ENABLE),
//    help     = STRING_TOKEN (STR_OS_DNX_ENABLE_HELP),
//    option text = STRING_TOKEN (STR_ENABLE),  value = 1, flags = RESET_REQUIRED;
//    option text = STRING_TOKEN (STR_DISABLE), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
//  endoneof;
//[-end-170323-IB07400848-remove]//

//[-start-170323-IB07400848-add]//
    subtitle text = STRING_TOKEN(STR_NULL_STRING);
    subtitle text = STRING_TOKEN(STR_GPIO_ISH_INFORMATION_TITLE);
//[-end-170323-IB07400848-add]//

    oneof varid   = SystemConfig.IshI2c0PullUp,
      prompt      = STRING_TOKEN (STR_ISH_I2C0_GPIO_PULL_ENABLE_PROMPT),
      help        = STRING_TOKEN (STR_ISH_I2C0_GPIO_PULL_HELP),
      option text = STRING_TOKEN(STR_ENABLE),  value = 1, flags = DEFAULT | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
    endoneof;

    oneof varid   = SystemConfig.IshI2c1PullUp,
      prompt      = STRING_TOKEN (STR_ISH_I2C1_GPIO_PULL_ENABLE_PROMPT),
      help        = STRING_TOKEN (STR_ISH_I2C1_GPIO_PULL_HELP),
      option text = STRING_TOKEN(STR_ENABLE),  value = 1, flags = DEFAULT | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
    endoneof;

  subtitle text = STRING_TOKEN(STR_NULL_STRING);

  subtitle text = STRING_TOKEN(STR_PROC_TARCE_STRING);
  
     oneof varid   = SystemConfig.ProcTraceMemSize,
        prompt      = STRING_TOKEN(STR_PROC_TRACE_MEM_SIZE_PROMPT),
        help        = STRING_TOKEN(STR_PROC_TRACE_MEM_SIZE_HELP),
        option text = STRING_TOKEN(STR_DISABLED), value = 0xFF, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(STR_4KB),      value = 0,    flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_8KB),      value = 1,    flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_16KB),     value = 2,    flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_32KB),     value = 3,    flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_64KB),     value = 4,    flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_128KB),    value = 5,    flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_256KB),    value = 6,    flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_512KB),    value = 7,    flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_1MB),      value = 8,    flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_2MB),      value = 9,    flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_4MB),      value = 10,   flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_8MB),      value = 11,   flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_16MB),     value = 12,   flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_32MB),     value = 13,   flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_64MB),     value = 14,   flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_128MB),    value = 15,   flags = RESET_REQUIRED;
     endoneof;


      suppressif  ideqval SystemConfig.ProcTraceMemSize == 0xFF;
          oneof varid   = SystemConfig.ProcTraceEnable,
            prompt      = STRING_TOKEN(STR_PROC_TRACE_ENABLE_PROMPT),
            help        = STRING_TOKEN(STR_PROC_TRACE_ENABLE_HELP),
            option text = STRING_TOKEN(STR_DISABLED_STRING), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(STR_ENABLED_STRING),  value = 1, flags = RESET_REQUIRED;
          endoneof;

          oneof varid   = SystemConfig.ProcTraceOutputScheme,
            prompt      = STRING_TOKEN(STR_PROC_TRACE_OUTPUT_SCHEME_PROMPT),
            help        = STRING_TOKEN(STR_PROC_TRACE_OUTPUT_SCHEME_HELP),
            option text = STRING_TOKEN(STR_SINGLE_RANGE_OUTPUT), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(STR_TOPA_OUTPUT),         value = 1, flags = RESET_REQUIRED;
          endoneof;
      endif;
//[-start-151229-IB03090424-modify]//
#ifdef CRASHDUMP_SUPPORT
  subtitle text = STRING_TOKEN(STR_NULL_STRING);
  oneof varid = SystemConfig.CrashDump,
    prompt   = STRING_TOKEN(STR_CRASHDUMP_PROMPT),
    help     = STRING_TOKEN(STR_CRASHDUMP_HELP),
    option text = STRING_TOKEN(STR_ENABLE),  value = 1, flags = RESET_REQUIRED;
    option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
  endoneof;
#endif


  subtitle text = STRING_TOKEN(STR_NULL_STRING);
  subtitle text = STRING_TOKEN(STR_DATA_CLEAR_STRING);
  text
    help   = STRING_TOKEN(STR_DATA_CLEAR_HELP),
    text   = STRING_TOKEN(STR_DATA_CLEAR),
    text   = STRING_TOKEN(STR_NULL_STRING),
    flags  = INTERACTIVE,
//[-start-161008-IB07400794-modify]//
    key    = KEY_DATA_CLEAR_KEYS;
//[-end-161008-IB07400794-modify]//

//subtitle text = STRING_TOKEN(STR_NULL_STRING);
//
//  subtitle text = STRING_TOKEN(STR_CAPSULE_DATA_CLEAR_STRING);
//  oneof varid  = SystemConfig.CapsuleDataClear,
//    prompt   = STRING_TOKEN (STR_CAPSULE_DATA_CLEAR_PROMPT),
//    help     = STRING_TOKEN (STR_CAPSULE_DATA_CLEAR_HELP),
//    option text = STRING_TOKEN (STR_ENABLE),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
//    option text = STRING_TOKEN (STR_DISABLE), value = 1, flags = RESET_REQUIRED; 
//  endoneof;
  
#if (NPK_ENABLE == 1)
  //
  // Jump to NPK Configuration Form
  //
  subtitle text = STRING_TOKEN(STR_NULL_STRING);
  goto DEBUG_NPK_FORM_ID,
    prompt = STRING_TOKEN(STR_DEBUG_NPK_TITLE),
    help   = STRING_TOKEN(STR_DEBUG_NPK_HELP);
#endif
//[-end-151229-IB03090424-modify]//

//    oneof varid   = SystemConfig.BootDevice,
//       prompt      = STRING_TOKEN(STR_BOOTDEVICE_PROMPT),
//       help        = STRING_TOKEN(STR_BOOTDEVICE_HELP),
//       flags       = INTERACTIVE,
//       option text = STRING_TOKEN(STR_EMMCBOOT), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
//       option text = STRING_TOKEN(STR_UFSBOOT),  value = 2, flags = RESET_REQUIRED;
//       option text = STRING_TOKEN(STR_AUTO),     value = 0, flags = RESET_REQUIRED;
//     endoneof;


endform;

#if (NPK_ENABLE == 1)
  //
  // NPK Configuration
  //
  form formid     = DEBUG_NPK_FORM_ID,
    title         = STRING_TOKEN(STR_DEBUG_NPK_TITLE);

//[-start-160317-IB03090425-modify]//
    oneof varid   = SystemConfig.NpkEn,
      prompt      = STRING_TOKEN(STR_NPK_ENABLE_PROMPT),
      help        = STRING_TOKEN(STR_NPK_ENABLE_HELP),
      option text = STRING_TOKEN(STR_DISABLE),  value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLE),   value = 1, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_DEBUGGER), value = 2, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_AUTO),     value = 3, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;

    suppressif ideqval SystemConfig.NpkEn == 2;

     oneof varid   = SystemConfig.FwTraceEn,
       prompt      = STRING_TOKEN(STR_NPK_FWEN_PROMPT),
       help        = STRING_TOKEN(STR_NPK_FWEN_HELP),
//[-start-160216-IB03090424-modify]//
       option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
       option text = STRING_TOKEN(STR_ENABLE),  value = 1, flags = DEFAULT | MANUFACTURING |RESET_REQUIRED;
//[-end-160216-IB03090424-modify]//
     endoneof;

     oneof varid   = SystemConfig.FwTraceDestination,
       prompt      = STRING_TOKEN(STR_NPK_FWDESTINATION_PROMPT),
       help        = STRING_TOKEN(STR_NPK_FWDESTINATION_HELP),
//[-start-160216-IB03090424-modify]//
       option text = STRING_TOKEN(STR_MEMORY0), value = 1, flags = RESET_REQUIRED;
       option text = STRING_TOKEN(STR_PTI),     value = 4, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
       option text = STRING_TOKEN(STR_USB3),    value = 2, flags = RESET_REQUIRED;
       option text = STRING_TOKEN(STR_BSSB),    value = 3, flags = RESET_REQUIRED;
//[-end-160216-IB03090424-modify]//
     endoneof;

     oneof varid   = SystemConfig.RecoverDump,
       prompt      = STRING_TOKEN(STR_NPK_RECOVERY_DUMP_PROMPT),
       help        = STRING_TOKEN(STR_NPK_RECOVERY_DUMP_HELP),
       option text = STRING_TOKEN(STR_DISABLE), value = 0, flags =  DEFAULT | MANUFACTURING |RESET_REQUIRED;
       option text = STRING_TOKEN(STR_ENABLE), value = 1, flags =  RESET_REQUIRED;
     endoneof;

     oneof varid   = SystemConfig.Msc0Size,
       prompt      = STRING_TOKEN(STR_NPK_MSC0SIZE_PROMPT),
       help        = STRING_TOKEN(STR_NPK_MSC0SIZE_HELP),
       option text = STRING_TOKEN(STR_NONE),  value = 0,    flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
       option text = STRING_TOKEN(STR_1MB),   value = 1,    flags = RESET_REQUIRED;
       option text = STRING_TOKEN(STR_8MB),   value = 8,    flags = RESET_REQUIRED;
       option text = STRING_TOKEN(STR_64MB),  value = 64,   flags = RESET_REQUIRED;
       option text = STRING_TOKEN(STR_128MB), value = 128,  flags = RESET_REQUIRED;
       option text = STRING_TOKEN(STR_256MB), value = 256,  flags = RESET_REQUIRED;
       option text = STRING_TOKEN(STR_512MB), value = 512,  flags = RESET_REQUIRED;
       option text = STRING_TOKEN(STR_1GB),   value = 1024, flags = RESET_REQUIRED;
     endoneof;

     oneof varid   = SystemConfig.Msc0Wrap,
       prompt      = STRING_TOKEN(STR_NPK_MSC0WRAP_PROMPT),
       help        = STRING_TOKEN(STR_NPK_MSC0WRAP_HELP),
       option text = STRING_TOKEN(STR_NOWRAP), value = 0, flags = RESET_REQUIRED;
       option text = STRING_TOKEN(STR_WRAP), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
     endoneof;

     oneof varid   = SystemConfig.Msc1Size,
       prompt      = STRING_TOKEN(STR_NPK_MSC1SIZE_PROMPT),
       help        = STRING_TOKEN(STR_NPK_MSC1SIZE_HELP),
       option text = STRING_TOKEN(STR_NONE),  value = 0,    flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
       option text = STRING_TOKEN(STR_1MB),   value = 1,    flags = RESET_REQUIRED;
       option text = STRING_TOKEN(STR_8MB),   value = 8,    flags = RESET_REQUIRED;
       option text = STRING_TOKEN(STR_64MB),  value = 64,   flags = RESET_REQUIRED;
       option text = STRING_TOKEN(STR_128MB), value = 128,  flags = RESET_REQUIRED;
       option text = STRING_TOKEN(STR_256MB), value = 256,  flags = RESET_REQUIRED;
       option text = STRING_TOKEN(STR_512MB), value = 512,  flags = RESET_REQUIRED;
       option text = STRING_TOKEN(STR_1GB),   value = 1024, flags = RESET_REQUIRED;
     endoneof;  

     oneof varid   = SystemConfig.Msc1Wrap,
       prompt      = STRING_TOKEN(STR_NPK_MSC1WRAP_PROMPT),
       help        = STRING_TOKEN(STR_NPK_MSC1WRAP_HELP),
       option text = STRING_TOKEN(STR_NOWRAP), value = 0, flags = RESET_REQUIRED;
       option text = STRING_TOKEN(STR_WRAP),   value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
     endoneof;

     oneof varid   = SystemConfig.PtiMode,
       prompt      = STRING_TOKEN(STR_NPK_PTIMODE_PROMPT),
       help        = STRING_TOKEN(STR_NPK_PTIMODE_HELP),
       option text = STRING_TOKEN(STR_OFF), value = 4, flags = RESET_REQUIRED;
       option text = STRING_TOKEN(STR_X4),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
       option text = STRING_TOKEN(STR_X8),  value = 2, flags = RESET_REQUIRED;
       option text = STRING_TOKEN(STR_X16), value = 8, flags = RESET_REQUIRED;
     endoneof;

     oneof varid   = SystemConfig.PtiTraining,
       prompt      = STRING_TOKEN(STR_NPK_PTITRAINING_PROMPT),
       help        = STRING_TOKEN(STR_NPK_PTITRAINING_HELP),
       option text = STRING_TOKEN(STR_OFF), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
       option text = STRING_TOKEN(STR_1),   value = 1, flags = RESET_REQUIRED;
       option text = STRING_TOKEN(STR_2),   value = 2, flags = RESET_REQUIRED;
       option text = STRING_TOKEN(STR_3),   value = 3, flags = RESET_REQUIRED;
       option text = STRING_TOKEN(STR_4),   value = 4, flags = RESET_REQUIRED;
       option text = STRING_TOKEN(STR_5),   value = 5, flags = RESET_REQUIRED;
       option text = STRING_TOKEN(STR_6),   value = 6, flags = RESET_REQUIRED;
     endoneof;

     oneof varid   = SystemConfig.PtiSpeed,
       prompt      = STRING_TOKEN(STR_NPK_PTISPEED_PROMPT),
       help        = STRING_TOKEN(STR_NPK_PTISPEED_HELP),
//[-start-160216-IB03090424-modify]//
       option text = STRING_TOKEN(STR_FULL),    value = 0, flags = RESET_REQUIRED;
       option text = STRING_TOKEN(STR_HALF),    value = 1, flags = RESET_REQUIRED;
       option text = STRING_TOKEN(STR_QUARTER), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
//[-end-160216-IB03090424-modify]//
     endoneof;  
//[-end-160317-IB03090425-modify]//

//[-start-151229-IB03090424-add]//
    oneof varid   = SystemConfig.PunitMlvl,
      prompt    = STRING_TOKEN(STR_PUINT_MESSAGE_LEVEL_PROMPT),
      help      = STRING_TOKEN(STR_PUINT_MESSAGE_LEVEL_HELP),
      option text = STRING_TOKEN(STR_DEBUG_MESSAGE_LEVEL_0), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_DEBUG_MESSAGE_LEVEL_1), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_DEBUG_MESSAGE_LEVEL_2), value = 2, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_DEBUG_MESSAGE_LEVEL_3), value = 3, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_DEBUG_MESSAGE_LEVEL_4), value = 4, flags = RESET_REQUIRED;
    endoneof;  
  
    oneof varid   = SystemConfig.PmcMlvl,
      prompt    = STRING_TOKEN(STR_PMC_MESSAGE_LEVEL_PROMPT),
      help      = STRING_TOKEN(STR_PMC_MESSAGE_LEVEL_HELP),
      option text = STRING_TOKEN(STR_DEBUG_MESSAGE_LEVEL_0), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_DEBUG_MESSAGE_LEVEL_1), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_DEBUG_MESSAGE_LEVEL_2), value = 2, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_DEBUG_MESSAGE_LEVEL_3), value = 3, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_DEBUG_MESSAGE_LEVEL_4), value = 4, flags = RESET_REQUIRED;
    endoneof;  
//[-end-151229-IB03090424-add]//

    endif;

  endform; //End of DEBUG_NPK_FORM_ID
#endif

