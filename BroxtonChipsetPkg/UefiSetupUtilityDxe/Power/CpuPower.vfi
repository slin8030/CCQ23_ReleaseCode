// *++
//
// Copyright (c)  1999 - 2015 Intel Corporation. All rights reserved
// This software and associated documentation (if any) is furnished
// under a license and may only be used or copied in accordance
// with the terms of the license. Except as permitted by such
// license, no part of this software or documentation may be
// reproduced, stored in a retrieval system, or transmitted in any
// form or by any means without the express written consent of
// Intel Corporation.
//
//
// Module Name:
//
//   Power.vfr
//
// Abstract:
//
//   Driver Setup formset.
//
// Revision History:
//   ------------------------------------------------------------------------------
//   Rev   Date<MM/DD/YYYY>    Name    Description
//   ------------------------------------------------------------------------------

// --*/

form formid = CPU_PWR_CONFIGURATION_FORM_ID,

  title  = STRING_TOKEN(STR_CPU_POWERMNG_TITLE);


  subtitle text = STRING_TOKEN(STR_SYSTEM_POWER_OPTIONS);
//[-start-160929-IB07400790-add]//
  subtitle text = STRING_TOKEN(STR_NULL_STRING);
//[-end-160929-IB07400790-add]//

//[-start-151229-IB03090424-remove]//
//  oneof varid     = SystemConfig.S0ix,
//    prompt      = STRING_TOKEN(STR_S0IX_PROMPT),
//    help        = STRING_TOKEN(STR_S0IX_HELP),
//    option text = STRING_TOKEN(STR_DISABLE), value=0x00, flags = RESET_REQUIRED;
//    option text = STRING_TOKEN(STR_ENABLE), value=0x01, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
//  endoneof;
//[-end-151229-IB03090424-remove]//

  oneof varid     = SystemConfig.EnableGv,
    prompt      = STRING_TOKEN(STR_CPU_IST_PROMPT),
    help        = STRING_TOKEN(STR_CPU_IST_HELP),
    option text = STRING_TOKEN(STR_DISABLE),  value = 0, flags = RESET_REQUIRED;
    option text = STRING_TOKEN(STR_ENABLE),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
  endoneof;

  //suppressif ideqval SystemConfig.EnableGv == 0;
  oneof varid = SystemConfig.BootPState,
    prompt  = STRING_TOKEN (STR_BOOT_P_STATE),
    help = STRING_TOKEN (STR_BOOT_P_STATE_HELP),
    option text = STRING_TOKEN (STR_BOOT_P_STATE_MAX), value = 0, flags = MANUFACTURING |DEFAULT | RESET_REQUIRED;
    option text = STRING_TOKEN (STR_BOOT_P_STATE_MIN), value = 1, flags = RESET_REQUIRED;
  endoneof;
  //endif;

  suppressif ideqval SystemConfig.EnableGv == 0;
  oneof varid  = SystemConfig.TurboModeEnable,
    prompt = STRING_TOKEN(STR_PROCESSOR_TURBO_MODE),
    help = STRING_TOKEN(STR_PROCESSOR_TURBO_MODE_HELP),
    option text = STRING_TOKEN(STR_DISABLE),  value = 0, flags = RESET_REQUIRED;
    option text = STRING_TOKEN(STR_ENABLE),   value = 1, flags = MANUFACTURING |DEFAULT | RESET_REQUIRED;
  endoneof;
  endif;
  
//[-start-160929-IB07400790-add]//
//[-start-160624-IB07400747-add]//
//#if BXTI_PF_ENABLE
  suppressif ideqval SystemConfig.EnableGv == 0;

//[-start-160929-IB07400790-modify]//
    grayoutif TRUE;
      text
        help   = STRING_TOKEN(STR_NULL_STRING),
        text   = STRING_TOKEN(STR_LONG_DUR_PWR_LIMIT_STRING),
        text   = STRING_TOKEN(STR_LONG_DUR_PWR_LIMIT_VALUE),
        flags  = 0,
        key    = 0;

      text
        help   = STRING_TOKEN(STR_NULL_STRING),
        text   = STRING_TOKEN(STR_SHORT_DUR_PWR_LIMIT_STRING),
        text   = STRING_TOKEN(STR_SHORT_DUR_PWR_LIMIT_VALUE),
        flags  = 0,
        key    = 0;
    endif;   
//[-end-160929-IB07400790-modify]//

    oneof varid    = SystemConfig.PowerLimit1Enable,
      prompt      = STRING_TOKEN(STR_LONG_DUR_PWR_LIMIT_SUPPORT_PROMPT),
      help        = STRING_TOKEN(STR_LONG_DUR_PWR_LIMIT_SUPPORT_HELP),
//[-start-160914-IB07400784-modify]//
      option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
//[-end-160914-IB07400784-modify]//
    endoneof;
  endif;
  
  suppressif  ideqval SystemConfig.EnableGv == 0
           OR ideqval SystemConfig.PowerLimit1Enable == 0;
    oneof varid    = SystemConfig.PowerLimit1Clamp,
      prompt      = STRING_TOKEN(STR_LONG_DUR_PWR_LIMIT_CLAMP_PROMPT),
      help        = STRING_TOKEN(STR_LONG_DUR_PWR_LIMIT_CLAMP_HELP),
//[-start-160914-IB07400784-modify]//
      option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
//[-end-160914-IB07400784-modify]//
    endoneof;

    oneof varid  = SystemConfig.PowerLimit1,
      prompt      = STRING_TOKEN(STR_LONG_DUR_PWR_LIMIT_PROMPT),
      help        = STRING_TOKEN(STR_LONG_DUR_PWR_LIMIT_HELP),
      option text = STRING_TOKEN(STR_AUTO), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_6), value = 6, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_7), value = 7, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_8), value = 8, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_9), value = 9, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_10), value = 10, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_11), value = 11, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_12), value = 12, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_13), value = 13, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_14), value = 14, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_15), value = 15, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_16), value = 16, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_17), value = 17, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_18), value = 18, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_19), value = 19, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_20), value = 20, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_21), value = 21, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_22), value = 22, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_23), value = 23, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_24), value = 24, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_25), value = 25, flags = RESET_REQUIRED;
    endoneof;

    oneof varid    = SystemConfig.PowerLimit1Time,
      prompt      = STRING_TOKEN(STR_LONG_DUR_PWR_LIMIT_TIME_PROMPT),
      help        = STRING_TOKEN(STR_LONG_DUR_PWR_LIMIT_TIME_HELP),
      option text = STRING_TOKEN(STR_AUTO), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_1), value = 1, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_2), value = 2, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_3), value = 3, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_4), value = 4, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_5), value = 5, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_6), value = 6, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_7), value = 7, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_8), value = 8, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_10), value = 10, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_12), value = 12, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_14), value = 14, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_16), value = 16, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_20), value = 20, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_24), value = 24, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_28), value = 28, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_32), value = 32, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_40), value = 40, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_48), value = 48, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_56), value = 56, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_64), value = 64, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_80), value = 80, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_96), value = 96, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_112), value = 112, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_128), value = 128, flags = RESET_REQUIRED;
    endoneof;
  endif;
//#endif
//[-end-160624-IB07400747-add]//
//[-end-160929-IB07400790-add]//

  oneof varid  = SystemConfig.EnableCx,
    prompt = STRING_TOKEN(STR_CSTATE_PROMPT),
    help = STRING_TOKEN(STR_CSTATE_PROMPT_HELP),
    option text = STRING_TOKEN(STR_DISABLE),  value = 0, flags = RESET_REQUIRED;
    option text = STRING_TOKEN(STR_ENABLE),   value = 1, flags = MANUFACTURING |DEFAULT | RESET_REQUIRED;
  endoneof;

  suppressif ideqval SystemConfig.EnableCx == 0 ;
//[-start-151229-IB03090424-modify]//
    oneof varid     = SystemConfig.EnableCxe,
      prompt      = STRING_TOKEN(STR_CXE_PROMPT),
      help        = STRING_TOKEN(STR_CXE_PROMPT_HELP),
      option text = STRING_TOKEN(STR_DISABLE),  value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLE),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;
//[-end-151229-IB03090424-modify]//

//[-start-160311-IB03090425-modify]//
//[-start-160914-IB07400784-modify]//
//#if BXTI_PF_ENABLE
//  disableif ideqval SystemConfig.PmicSetupDefault == 1;
//#endif
    grayoutif ideqval SystemConfig.PmicSetupDefault == 1; 
      oneof varid     = SystemConfig.MaxPkgCState,
        prompt      = STRING_TOKEN(STR_MAX_PKG_CSTATE_SUPPORT_PROMPT),
        help        = STRING_TOKEN(STR_MAX_PKG_CSTATE_STATE_SUPPORT_HELP),
        option text = STRING_TOKEN(STR_MAX_PKG_CSTATE_C2),  value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(STR_MAX_PKG_CSTATE_C1),  value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_MAX_PKG_CSTATE_C0),  value = 0, flags = RESET_REQUIRED;
      endoneof;
    endif;
//#if BXTI_PF_ENABLE
//  endif;
//  
//  suppressif NOT ideqval SystemConfig.PmicSetupDefault == 1;
//  text
//   help   = STRING_TOKEN(STR_MAX_PKG_CSTATE_STATE_SUPPORT_HELP),
//    text   = STRING_TOKEN(STR_MAX_PKG_CSTATE_SUPPORT_PROMPT),
//    text   = STRING_TOKEN(STR_MAX_PKG_CSTATE_C0),
//    flags  = 0,
//    key    = 0;
//  endif;
//#endif
//[-end-160914-IB07400784-modify]//
//[-end-160311-IB03090425-modify]//

//[-start-151229-IB03090424-modify]//
    oneof varid     = SystemConfig.MaxCoreCState,
      prompt      = STRING_TOKEN(STR_MAX_CORE_CSTATE_SUPPORT_PROMPT),
      help        = STRING_TOKEN(STR_MAX_CORE_CSTATE_SUPPORT_HELP),
      option text = STRING_TOKEN(STR_MAX_CORE_CSTATE_FC),  value = 8, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_MAX_CORE_CSTATE_C10), value = 7, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_MAX_CORE_CSTATE_C9),  value = 6, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_MAX_CORE_CSTATE_C8),  value = 5, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_MAX_CORE_CSTATE_C7),  value = 4, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_MAX_CORE_CSTATE_C6),  value = 3, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_MAX_CORE_CSTATE_C1),  value = 1, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_MAX_CORE_CSTATE_C0),  value = 0, flags = RESET_REQUIRED;
    endoneof;

//[-start-160801-IB03090430-modify]//
    oneof varid     = SystemConfig.CStateAutoDemotion,
      prompt      = STRING_TOKEN(STR_CST_AUTO_DEMOTION),
      help        = STRING_TOKEN(STR_CST_AUTO_DEMOTION_HELP),
      option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_C1_AUTO_DEMOTION), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;
//[-end-151229-IB03090424-modify]//

    oneof varid     = SystemConfig.CStateUnDemotion,
      prompt      = STRING_TOKEN(STR_CST_UNDEMOTION),
      help        = STRING_TOKEN(STR_CST_UNDEMOTION_HELP),
      option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_C1_AUTO_DEMOTION), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;
//[-end-160801-IB03090430-modify]//

//[-start-151229-IB03090424-remove]//
//    oneof varid     = SystemConfig.CStatePreWake,
//      prompt      = STRING_TOKEN(STR_CST_PREWAKE),
//      help        = STRING_TOKEN(STR_CST_PREWAKE_HELP),
//      option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
//      option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
//    endoneof;
//[-end-151229-IB03090424-remove]//

//[-start-160929-IB07400790-modify]//
  endif;
//[-end-160929-IB07400790-modify]//

//[-start-160929-IB07400790-add]//
  oneof varid  = SystemConfig.CpuTstate,
    prompt = STRING_TOKEN(STR_TSTATE_PROMPT),
    help = STRING_TOKEN(STR_TSTATE_PROMPT_HELP),
    option text = STRING_TOKEN(STR_DISABLE),  value = 0, flags = RESET_REQUIRED;
    option text = STRING_TOKEN(STR_ENABLE),   value = 1, flags = MANUFACTURING |DEFAULT | RESET_REQUIRED;
  endoneof;
//[-end-160929-IB07400790-add]//


endform;