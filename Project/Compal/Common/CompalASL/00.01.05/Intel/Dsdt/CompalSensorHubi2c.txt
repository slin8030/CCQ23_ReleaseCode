/*
 * (C) Copyright 2013-2020 Compal Electronics, Inc.
 *
 * This software is the property of Compal Electronics, Inc.
 * You have to accept the terms in the license file before use.
 *
 * Copyright 2011-2012 Compal Electronics, Inc.. All rights reserved.

 By installing or using this software or any portion thereof, you ("You") agrees to be bound by the following terms of use ("Terms of Use").
 This software, and any portion thereof, is referred to herein as the "Software."

 USE OF SOFTWARE.  This software is the property of Compal Electronics, Inc. (Compal) and is made available by Compal to You, and may be used only by You for personal or project evaluation.

 RESTRICTIONS.  You shall not claim the ownership of the Software and shall not sell the Software. The software shall be distributed as pre-installed software incorporated in the devices manufactured by Compal only, and shall not be distributed separately via internet or any other medium.

 INDEMNITY.  You agree to hold harmless and indemnify Compal and Compal¡¦s subsidiaries, affiliates, officers, agents, and employees from and against any claim, suit, or action arising from or in any way related to Your use of the Software or Your violation of these Terms of Use, including any liability or expense arising from all claims, losses, damages, suits, judgments, litigation costs and attorneys' fees, of every kind and nature.
 In such a case, Compal will provide You with written notices of such claim, suit, or action.

 DISCLAIMER.  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

*****************************************************************************************************************************************
*****************************************************************************************************************************************
* Please add below code in oemasl.asl and modify I2C device data for project 															*
* design. Please remark "Scope path for I2C device" define, if project have  															*
* supported it.																															*
*****************************************************************************************************************************************
*****************************************************************************************************************************************

#define INTEL_I2C0_PATH           \_SB.PCI0.I2C0
#define INTEL_I2C1_PATH           \_SB.PCI0.I2C1
#define INTEL_I2C2_PATH           \_SB.PCI0.I2C2
#define INTEL_I2C3_PATH           \_SB.PCI0.I2C3
#define INTEL_I2C4_PATH           \_SB.PCI0.I2C4
#define INTEL_I2C5_PATH           \_SB.PCI0.I2C5
//----------------------------
// Scope path for I2C device
//----------------------------
//#define   PROJECT_I2C_INVN_PATH    INTEL_I2C0_PATH    // I2C PATH.
//#define   PROJECT_I2C_CM3218_PATH  INTEL_I2C0_PATH
//#define   PROJECT_I2C_KM61G_PATH   INTEL_I2C0_PATH
//#define   PROJECT_I2C_KXCJ9_PATH   INTEL_I2C0_PATH
//#define   PROJECT_I2C_MTKNFC_PATH  INTEL_I2C4_PATH
//#define   PROJECT_EC_I2C_SHUB_PATH INTEL_I2C0_PATH

//----------------------------
//  INVN Sensor Solution
//----------------------------
#define GYRO_ADDR             0x68              // Gyro slave address
#define COMPASS_ADDR          0x0D              // Compass slave address
#define INVN_I2C_CONTR_NAME   "\\_SB.PCI0.I2C0" // I2C bus controller name 
#define INVN_GPIO_ResourceSource "\\_SB.PCI0.GPI0"   // GPIO device source
#define INVN_GPIO_INT         20                // GPIOInt[GPP_A20]: 24*0+20 =20
#define INVN_INTERRUPT        44                // Direct IRQ[GPP_A20]((24 * 0 + 20) mod 96) + 24 = 44
#define INVN_INT_LEVEL        ActiveHigh        // InterruptLevelKeyword = ActiveHigh | ActiveLow | ActiveBoth

//------------------------------
//  Capella 3218 ALS Solution
//------------------------------
#define ALS_ADDR              0x10              // Capella 32181 slave address
#define ALS_I2C_CONTR_NAME    "\\_SB.PCI0.I2C0" // I2C bus controller name 
#define ALS_GPIO_ResourceSource "\\_SB.PCI0.GPI0"   // GPIO device source
#define ALS_GPIO_INT          22                // GPIOInt[GPP_A22]: 24*0+22 =22
#define ALS_INTERRUPT         46                // Direct IRQ[GPP_A22]((24 * 0 + 22) mod 96) + 24 = 31
#define ALS_INT_LEVEL         ActiveHigh        // InterruptLevelKeyword = ActiveHigh | ActiveLow | ActiveBoth

//-------------------------------
//  Kionix KM61G Sensor Solution
//-------------------------------
#define KM61G_ADDR            0x0F              // Kionix 61G Slave address
#define KM61G_I2C_CONTR_NAME  "\\_SB.PCI0.I2C0" // I2C bus controller name 
#define KM61G_GPIO_ResourceSource "\\_SB.PCI0.GPI0" // GPIO device source
#define KM61G_GYRO_GPIO_INT   18                // GPIOInt[GPP_A18]: 24*0+18 =18
#define KM61G_ACC_GPIO_INT    20                // GPIOInt[GPP_A20]: 24*0+20 =20
#define KM61G_GYRO_INTERRUPT  42                // Direct IRQ[GPP_A18]((24 * 0 + 18) mod 96) + 24 = 42
#define KM61G_GYRO_INT_LEVEL  ActiveHigh        // InterruptLevelKeyword = ActiveHigh | ActiveLow | ActiveBoth
#define KM61G_ACC_INT_LEVEL   ActiveHigh        // InterruptLevelKeyword = ActiveHigh | ActiveLow | ActiveBoth

//-------------------------------
//  Kionix KXCJ9 Sensor Solution
//-------------------------------
#define KXCJ9_ADDR            0x0F              // Kionix CJ9 Slave address
#define KXCJ9_I2C_CONTR_NAME  "\\_SB.PCI0.I2C0" // I2C bus controller name
#define KXCJ9_GPIO_ResourceSource "\\_SB.PCI0.GPI0" // GPIO device source
#define KXCJ9_GPIO_INT        20                // GPIOInt[GPP_A20]: 24*0+20 =20
#define KXCJ9_INTERRUPT       44                // Direct IRQ[GPP_A20]((24 * 0 + 20) mod 96) + 24 = 44
#define KXCJ9_INT_LEVEL       ActiveHigh        // InterruptLevelKeyword = ActiveHigh | ActiveLow | ActiveBoth

//-------------------------------
//  MTK NFC 6605 Solution
//-------------------------------
#define MTK_NFC_ADDR          0x28              // MTK NFC Slave address
#define NFC_I2C_CONTR_NAME    "\\_SB.PCI0.I2C4" // I2C bus controller name 
#define MTK_GPIO_ResourceSource "\\_SB.PCI0.GPI0"   // GPIO device source
#define MTK_NFC_GPIO_INT      126               // GPIOInt[GPP_F6]: 24*5+6 =126
#define MTK_INTERRUPT         54                // Direct IRQ[GPP_F6]((24 * 5 + 6) mod 96) + 24 = 54
#define MTK_NFC_RST_PIN_NUM   123               // NFC_FW_RESET [GPP_F3] 3+(5*24)
#define MTK_NFC_EN_PIN_NUM    127               // NFC_ENABLE [GPP_F7] 7+(5*24)
#define MTK_NFC_INT_LEVEL     ActiveHigh        // InterruptLevelKeyword = ActiveHigh | ActiveLow | ActiveBoth

//-------------------------------
//  EC I2C SensorHub Solution
//-------------------------------
#define EC_SENSORHUB_HID     "ENES6243"        // EC Chip
#define EC_SENSORHUB_ADDR    0x05              // EC I2C Slave address
#define EC_I2C_CONTR_NAME    "\\_SB.PCI0.I2C0" // I2C bus controller name 
#define EC_GPIO_ResourceSource "\\_SB.PCI0.GPI0"   // GPIO device source
#define EC_GPIO_INT          20                // GPIOInt[GPP_A20]: 24*0+20 =20
#define EC_INTERRUPT         44                // Direct IRQ[GPP_A20]((24 * 0 + 20) mod 96) + 24 = 44
#define EC_IHV_ADDR          0x0020            // EC HID Descriptor Address
#define EC_INT_LEVEL         ActiveLow         // InterruptLevelKeyword = ActiveHigh | ActiveLow | ActiveBoth


