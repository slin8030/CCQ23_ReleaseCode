// *++
//
// Copyright (c)  2015 - 2016 Intel Corporation. All rights reserved
// This software and associated documentation (if any) is furnished
// under a license and may only be used or copied in accordance
// with the terms of the license. Except as permitted by such
// license, no part of this software or documentation may be
// reproduced, stored in a retrieval system, or transmitted in any
// form or by any means without the express written consent of
// Intel Corporation.
//
//
// Module Name:
//
//   RtD3.vfi
//
// Abstract:
//
//   Driver SystemConfig formset.
//
// Revision History:
//
// --*/
  // Define forms
  form formid = RTD3_FORM_ID,

    title = STRING_TOKEN(STR_RTD3_FORM_TITLE);

    oneof varid     = SystemConfig.Rtd3Support,
              prompt      = STRING_TOKEN(STR_RTD3),
              help        = STRING_TOKEN(STR_RTD3_HELP),
//[-start-160506-IB03090427-modify]//
#if !BXTI_PF_ENABLE
              option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
              option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
#else
              option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
              option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
#endif
//[-end-160506-IB03090427-modify]//
    endoneof;

    suppressif ideqval SystemConfig.Rtd3Support == 0x0;

      oneof varid   = SystemConfig.ConsolidatedPR,
          prompt      = STRING_TOKEN(STR_CONSOLIDATED_POWER_RESOURCE_PROMPT),
          help        = STRING_TOKEN(STR_CONSOLIDATED_POWER_RESOURCE_PROMPT_HELP),
          option text = STRING_TOKEN(STR_DISABLED),	value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLED),	value = 1, flags = RESET_REQUIRED;
        endoneof;


       numeric varid     = SystemConfig.VRStaggeringDelay,
          prompt      = STRING_TOKEN(STR_VR_STAGGERING_DELAY),
          help        = STRING_TOKEN(STR_VR_STAGGERING_DELAY_HELP),
          minimum = 0,
          maximum = 100,
          step    = 16 ,
          default = 16,
        endnumeric;

       numeric varid     = SystemConfig.VRRampUpDelay,
          prompt      = STRING_TOKEN(STR_VR_RAMP_DELAY),
          help        = STRING_TOKEN(STR_VR_RAMP_DELAY_HELP),
          minimum = 0,
          maximum = 100,
          step    = 16 ,
          default = 16,
        endnumeric;

       numeric varid     = SystemConfig.Rtd3P0dl,
          prompt      = STRING_TOKEN(STR_PEP0),
          help        = STRING_TOKEN(STR_PEP0_HELP),
          minimum = 0,
          maximum = 100,

          step    = 16 ,
          default = 100,
        endnumeric;

       numeric varid     = SystemConfig.Rtd3P3dl,
          prompt      = STRING_TOKEN(STR_PEP3),
          help        = STRING_TOKEN(STR_PEP3_HELP),
          minimum = 0,
          maximum = 10,
          step    = 1 ,
          default = 10,
        endnumeric;

      //
      // Do not allow changing Azalia/ADSP delay for DVT2 or older rev
      // Delay is hard coded to 500ms (in AcpiPlatform.c) to workaround HW issue
      //
        numeric varid     = SystemConfig.RTD3AudioDelay,
          prompt      = STRING_TOKEN(STR_AUDIO_DELAY),
          help        = STRING_TOKEN(STR_AUDIO_DELAY_HELP),
          minimum = 0,
          maximum = 1000,
          step    = 16 ,
          default = 200,
        endnumeric;

      numeric varid  = SystemConfig.RTD3I2C0ControllerPS0Delay,
          prompt     = STRING_TOKEN(STR_I2C0_CONTROLLER_PS0_DELAY),
          help       = STRING_TOKEN(STR_I2C0_CONTROLLER_PS0_DELAY_HELP),
          minimum    = 0,
          maximum    = 1000,
          step       = 16,
          default    = 0,
      endnumeric;

      numeric varid     = SystemConfig.RTD3SensorHub,
         prompt      = STRING_TOKEN(STR_SENSORHUB),
         help        = STRING_TOKEN(STR_SENSORHUB_HELP),
         minimum = 0,
         maximum = 1000,
         step    = 16 ,
         default = 68,
      endnumeric;

      numeric varid  = SystemConfig.RTD3I2C1ControllerPS0Delay,
          prompt     = STRING_TOKEN(STR_I2C1_CONTROLLER_PS0_DELAY),
          help       = STRING_TOKEN(STR_I2C1_CONTROLLER_PS0_DELAY_HELP),
          minimum    = 0,
          maximum    = 1000,
          step       = 16,
          default    = 0,
      endnumeric;

      numeric varid     = SystemConfig.RTD3TouchPadDelay,
         prompt      = STRING_TOKEN(STR_TOUCHPAD),
         help        = STRING_TOKEN(STR_TOUCHPAD_HELP),
         minimum = 0,
         maximum = 1000,
         step    = 16 ,
         default = 68,
      endnumeric;

      numeric varid  = SystemConfig.RTD3TouchPanelDelay,
         prompt      = STRING_TOKEN(STR_TOUCHPANEL),
         help        = STRING_TOKEN(STR_TOUCHPANEL_HELP),
         minimum = 0,
         maximum = 1000,
         step    = 16 ,
         default = 68,
      endnumeric;

      oneof varid     = SystemConfig.PstateCapping,
          prompt      = STRING_TOKEN(STR_RTD3_PSTATE_CAPPING),
          help        = STRING_TOKEN(STR_RTD3_PSTATE_CAPPING_HELP),
          option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid     = SystemConfig.RTD3UsbPt1,
          prompt      = STRING_TOKEN(STR_RTD3_USB_PORT1),
          help        = STRING_TOKEN(STR_RTD3_USB_PORT_HELP),
          option text = STRING_TOKEN(STR_HIGHSPEED), value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_SUPERSPEED), value = 2, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid     = SystemConfig.RTD3UsbPt2,
          prompt      = STRING_TOKEN(STR_RTD3_USB_PORT2),
          help        = STRING_TOKEN(STR_RTD3_USB_PORT_HELP),
          option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_HIGHSPEED), value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_SUPERSPEED), value = 2, flags = RESET_REQUIRED;
      endoneof;

      oneof varid     = SystemConfig.RTD3I2C0SensorHub,
          prompt      = STRING_TOKEN(STR_RTD3_I2C0_SENSOR),
          help        = STRING_TOKEN(STR_RTD3_I2C0_SENSOR_HELP),
          option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid     = SystemConfig.RTD3ZPODD,
          prompt      = STRING_TOKEN(STR_RTD3_ZPODD),
          help        = STRING_TOKEN(STR_RTD3_ZPODD_HELP),
          option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid     = SystemConfig.RTD3Camera,
          prompt      = STRING_TOKEN(STR_RTD3_CAMERA),
          help        = STRING_TOKEN(STR_RTD3_CAMERA_HELP),
          option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid     = SystemConfig.RTD3SataPort1,
          prompt      = STRING_TOKEN(STR_RTD3_SATAPORT1),
          help        = STRING_TOKEN(STR_RTD3_SATAPORT_HELP),
          option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid     = SystemConfig.RTD3SataPort2,
          prompt      = STRING_TOKEN(STR_RTD3_SATAPORT2),
          help        = STRING_TOKEN(STR_RTD3_SATAPORT_HELP),
          option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid     = SystemConfig.RTD3SataPort3,
          prompt      = STRING_TOKEN(STR_RTD3_SATAPORT3),
          help        = STRING_TOKEN(STR_RTD3_SATAPORT_HELP),
          option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_MINICARD15), value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_MINICARD33), value = 2, flags = RESET_REQUIRED;
      endoneof;

    endif; // Rtd3Support

  endform; //RTD3